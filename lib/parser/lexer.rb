# -*- encoding:utf-8; warn-indent:false -*-
# -*- encoding:utf-8; warn-indent:false -*-

# line 1 "lib/parser/lexer.rl"

# line 3 "lib/parser/lexer.rl"
#
# === BEFORE YOU START ===
#
# Read the Ruby Hacking Guide chapter 11, available in English at
# http://whitequark.org/blog/2013/04/01/ruby-hacking-guide-ch-11-finite-state-lexer/
#
# Remember two things about Ragel scanners:
#
#   1) Longest match wins.
#
#   2) If two matches have the same length, the first
#      in source code wins.
#
# General rules of making Ragel and Bison happy:
#
#  * `p` (position) and `@te` contain the index of the character
#    they're pointing to ("current"), plus one. `@ts` contains the index
#    of the corresponding character. The code for extracting matched token is:
#
#       @source[@ts...@te]
#
#  * If your input is `foooooooobar` and the rule is:
#
#       'f' 'o'+
#
#    the result will be:
#
#       foooooooobar
#       ^ ts=0   ^ p=te=9
#
#  * A Ragel lexer action should not emit more than one token, unless
#    you know what you are doing.
#
#  * All Ragel commands (fnext, fgoto, ...) end with a semicolon.
#
#  * If an action emits the token and transitions to another state, use
#    these Ragel commands:
#
#       emit($whatever)
#       fnext $next_state; fbreak;
#
#    If you perform `fgoto` in an action which does not emit a token nor
#    rewinds the stream pointer, the parser's side-effectful,
#    context-sensitive lookahead actions will break in a hard to detect
#    and debug way.
#
#  * If an action does not emit a token:
#
#       fgoto $next_state;
#
#  * If an action features lookbehind, i.e. matches characters with the
#    intent of passing them to another action:
#
#       p = @ts - 1
#       fgoto $next_state;
#
#    or, if the lookbehind consists of a single character:
#
#       fhold; fgoto $next_state;
#
#  * Ragel merges actions. So, if you have `e_lparen = '(' %act` and
#    `c_lparen = '('` and a lexer action `e_lparen | c_lparen`, the result
#    _will_ invoke the action `act`.
#
#    e_something stands for "something with **e**mbedded action".
#
#  * EOF is explicit and is matched by `c_eof`. If you want to introspect
#    the state of the lexer, add this rule to the state:
#
#       c_eof => do_eof;
#
#  * If you proceed past EOF, the lexer will complain:
#
#       NoMethodError: undefined method `ord' for nil:NilClass
#

class Parser::Lexer

  
# line 85 "lib/parser/lexer.rb"
class << self
	attr_accessor :_lex_trans_keys
	private :_lex_trans_keys, :_lex_trans_keys=
end
self._lex_trans_keys = [
	0, 0, 101, 101, 103, 103, 
	105, 105, 110, 110, 69, 
	69, 78, 78, 68, 68, 
	95, 95, 95, 95, 0, 26, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 45, 
	0, 77, 0, 77, 0, 92, 
	0, 26, 0, 26, 0, 
	45, 0, 99, 0, 26, 
	67, 99, 45, 45, 0, 92, 
	0, 77, 0, 102, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 45, 0, 77, 
	0, 77, 0, 92, 0, 
	26, 0, 26, 0, 45, 
	0, 99, 0, 26, 67, 99, 
	45, 45, 0, 92, 0, 
	77, 0, 102, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 58, 
	58, 0, 127, 58, 58, 
	60, 60, 62, 62, 10, 10, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 115, 
	115, 99, 99, 117, 117, 
	101, 101, 108, 116, 101, 101, 
	115, 115, 115, 115, 105, 
	105, 108, 108, 105, 105, 
	108, 108, 58, 58, 0, 127, 
	10, 10, 0, 127, 58, 
	58, 98, 98, 101, 101, 
	103, 103, 105, 105, 110, 110, 
	0, 122, 61, 61, 0, 
	127, 0, 127, 61, 126, 
	0, 127, 0, 127, 93, 93, 
	0, 127, 0, 127, 10, 
	10, 10, 34, 10, 10, 
	10, 39, 0, 127, 10, 96, 
	0, 45, 0, 77, 0, 
	77, 0, 92, 0, 26, 
	0, 26, 0, 45, 0, 99, 
	0, 26, 67, 99, 45, 
	45, 0, 92, 0, 77, 
	0, 102, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 58, 58, 
	58, 58, 0, 127, 43, 57, 
	48, 57, 48, 57, 48, 
	57, 48, 57, 0, 127, 
	58, 58, 9, 92, 9, 92, 
	9, 92, 9, 92, 9, 
	92, 9, 92, 60, 60, 
	10, 10, 9, 46, 0, 46, 
	0, 95, 9, 32, 0, 
	0, 10, 10, 10, 10, 
	98, 98, 9, 32, 10, 10, 
	95, 95, 0, 92, 9, 
	32, 36, 123, 0, 127, 
	48, 57, 0, 120, 0, 0, 
	0, 0, 48, 55, 48, 
	55, 0, 0, 0, 0, 
	0, 92, 0, 0, 0, 0, 
	0, 0, 0, 92, 45, 
	45, 0, 0, 0, 0, 
	0, 0, 0, 92, 0, 45, 
	0, 92, 0, 92, 0, 
	0, 0, 0, 0, 92, 
	0, 45, 10, 10, 0, 92, 
	0, 123, 0, 26, 0, 
	26, 0, 26, 0, 0, 
	0, 102, 0, 102, 0, 102, 
	0, 0, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 125, 
	0, 125, 0, 0, 0, 
	125, 0, 26, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 125, 
	0, 0, 0, 0, 48, 
	102, 0, 0, 0, 92, 
	36, 123, 0, 127, 48, 57, 
	0, 120, 0, 0, 0, 
	0, 48, 55, 48, 55, 
	0, 0, 0, 0, 0, 92, 
	0, 0, 0, 0, 0, 
	0, 0, 92, 45, 45, 
	0, 0, 0, 0, 0, 0, 
	0, 92, 0, 45, 0, 
	92, 0, 92, 0, 0, 
	0, 0, 0, 92, 0, 45, 
	10, 10, 0, 92, 0, 
	123, 0, 26, 0, 26, 
	0, 26, 0, 0, 0, 102, 
	0, 102, 0, 102, 0, 
	0, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 0, 0, 125, 0, 
	125, 0, 0, 0, 125, 
	0, 26, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 0, 0, 125, 0, 
	0, 0, 0, 48, 102, 
	0, 0, 0, 92, 9, 32, 
	0, 26, 0, 92, 0, 
	26, 65, 122, 65, 122, 
	36, 64, 0, 127, 48, 57, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 9, 32, 
	0, 0, 61, 126, 10, 10, 
	10, 10, 0, 127, 0, 
	127, 48, 57, 38, 38, 
	42, 42, 64, 64, 58, 58, 
	60, 61, 62, 62, 61, 
	126, 61, 61, 61, 62, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 93, 93, 
	10, 10, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 124, 124, 0, 
	127, 0, 127, 9, 32, 
	10, 10, 10, 10, 10, 10, 
	0, 0, 0, 127, 0, 
	127, 61, 61, 0, 0, 
	0, 0, 9, 32, 0, 0, 
	61, 126, 10, 10, 10, 
	10, 38, 38, 42, 42, 
	64, 64, 60, 61, 62, 62, 
	61, 126, 61, 61, 61, 
	62, 0, 127, 93, 93, 
	10, 10, 124, 124, 0, 126, 
	0, 127, 0, 61, 9, 
	61, 9, 61, 0, 0, 
	9, 61, 9, 62, 46, 46, 
	46, 46, 58, 58, 9, 
	32, 0, 0, 0, 127, 
	0, 0, 9, 124, 0, 0, 
	10, 10, 10, 10, 0, 
	0, 9, 61, 58, 58, 
	60, 60, 62, 62, 9, 32, 
	10, 10, 0, 127, 102, 
	102, 101, 101, 110, 110, 
	104, 104, 0, 127, 0, 127, 
	0, 127, 0, 0, 0, 
	127, 10, 10, 0, 123, 
	9, 32, 10, 10, 10, 10, 
	10, 10, 0, 0, 111, 
	111, 0, 0, 0, 127, 
	0, 127, 9, 32, 0, 0, 
	10, 10, 10, 10, 10, 
	10, 0, 0, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 58, 61, 0, 0, 
	61, 126, 61, 61, 0, 
	0, 0, 0, 0, 0, 
	58, 58, 9, 32, 61, 61, 
	9, 32, 61, 126, 10, 
	10, 10, 10, 65, 122, 
	0, 122, 38, 61, 0, 0, 
	42, 61, 61, 61, 48, 
	61, 48, 62, 46, 46, 
	46, 46, 0, 26, 0, 127, 
	0, 127, 61, 61, 0, 
	0, 61, 126, 61, 62, 
	0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 61, 
	126, 0, 127, 48, 57, 
	38, 38, 42, 42, 64, 64, 
	60, 61, 62, 62, 61, 
	61, 61, 62, 124, 124, 
	60, 61, 0, 0, 62, 62, 
	61, 126, 61, 62, 0, 
	122, 0, 0, 0, 127, 
	0, 127, 0, 120, 0, 0, 
	0, 0, 48, 55, 48, 
	55, 0, 0, 0, 0, 
	0, 92, 0, 0, 0, 0, 
	0, 0, 0, 92, 45, 
	45, 0, 0, 0, 0, 
	0, 0, 0, 92, 0, 45, 
	0, 92, 0, 92, 0, 
	0, 0, 0, 0, 92, 
	0, 45, 10, 10, 0, 92, 
	0, 123, 0, 26, 0, 
	26, 0, 26, 0, 0, 
	0, 102, 0, 102, 0, 102, 
	0, 0, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 125, 
	0, 125, 0, 0, 0, 
	125, 0, 26, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 125, 
	0, 0, 0, 0, 48, 
	102, 0, 0, 0, 127, 
	0, 127, 0, 127, 0, 0, 
	10, 10, 0, 0, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 61, 126, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 0, 61, 124, 0, 
	92, 9, 32, 0, 0, 
	10, 10, 10, 10, 10, 10, 
	0, 0, 0, 127, 0, 
	127, 9, 32, 0, 0, 
	10, 10, 10, 10, 10, 10, 
	0, 0, 0, 127, 0, 
	127, 61, 61, 0, 0, 
	0, 0, 9, 32, 0, 0, 
	61, 126, 10, 10, 10, 
	10, 0, 127, 0, 127, 
	48, 57, 61, 61, 38, 61, 
	0, 0, 0, 0, 42, 
	61, 61, 62, 46, 57, 
	46, 46, 48, 101, 48, 95, 
	46, 120, 48, 114, 43, 
	57, 48, 105, 0, 0, 
	105, 105, 0, 0, 48, 114, 
	48, 114, 48, 114, 48, 
	114, 105, 114, 0, 0, 
	105, 105, 0, 0, 48, 114, 
	48, 114, 48, 114, 48, 
	114, 48, 114, 48, 114, 
	48, 114, 48, 114, 46, 114, 
	48, 114, 46, 114, 48, 
	114, 58, 58, 60, 61, 
	62, 62, 61, 126, 61, 61, 
	61, 62, 0, 127, 0, 
	127, 0, 0, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	0, 10, 10, 0, 0, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 9, 
	92, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 0, 
	61, 124, 0, 0, 9, 46, 
	9, 46, 0, 46, 10, 
	61, 10, 10, 10, 101, 
	10, 110, 10, 100, 10, 10, 
	0
]

class << self
	attr_accessor :_lex_key_spans
	private :_lex_key_spans, :_lex_key_spans=
end
self._lex_key_spans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 27, 128, 128, 128, 128, 46, 
	78, 78, 93, 27, 27, 46, 100, 27, 
	33, 1, 93, 78, 103, 128, 128, 128, 
	128, 46, 78, 78, 93, 27, 27, 46, 
	100, 27, 33, 1, 93, 78, 103, 128, 
	128, 128, 128, 128, 128, 1, 128, 1, 
	1, 1, 1, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 1, 1, 1, 
	1, 9, 1, 1, 1, 1, 1, 1, 
	1, 1, 128, 1, 128, 1, 1, 1, 
	1, 1, 1, 123, 1, 128, 128, 66, 
	128, 128, 1, 128, 128, 1, 25, 1, 
	30, 128, 87, 46, 78, 78, 93, 27, 
	27, 46, 100, 27, 33, 1, 93, 78, 
	103, 128, 128, 128, 128, 128, 128, 1, 
	1, 128, 15, 10, 10, 10, 10, 128, 
	1, 84, 84, 84, 84, 84, 84, 1, 
	1, 38, 47, 96, 24, 0, 1, 1, 
	1, 24, 1, 1, 93, 24, 88, 128, 
	10, 121, 0, 0, 8, 8, 0, 0, 
	93, 0, 0, 0, 93, 1, 0, 0, 
	0, 93, 46, 93, 93, 0, 0, 93, 
	46, 1, 93, 124, 27, 27, 27, 0, 
	103, 103, 103, 0, 126, 126, 126, 126, 
	126, 0, 126, 126, 0, 126, 27, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 0, 126, 0, 0, 55, 0, 93, 
	88, 128, 10, 121, 0, 0, 8, 8, 
	0, 0, 93, 0, 0, 0, 93, 1, 
	0, 0, 0, 93, 46, 93, 93, 0, 
	0, 93, 46, 1, 93, 124, 27, 27, 
	27, 0, 103, 103, 103, 0, 126, 126, 
	126, 126, 126, 0, 126, 126, 0, 126, 
	27, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 126, 0, 126, 0, 0, 55, 
	0, 93, 24, 27, 93, 27, 58, 58, 
	29, 128, 10, 128, 128, 128, 128, 24, 
	0, 66, 1, 1, 128, 128, 10, 1, 
	1, 1, 1, 2, 1, 66, 1, 2, 
	128, 128, 128, 128, 128, 128, 128, 1, 
	1, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 1, 128, 128, 24, 
	1, 1, 1, 0, 128, 128, 1, 0, 
	0, 24, 0, 66, 1, 1, 1, 1, 
	1, 2, 1, 66, 1, 2, 128, 1, 
	1, 1, 127, 128, 62, 53, 53, 0, 
	53, 54, 1, 1, 1, 24, 0, 128, 
	0, 116, 0, 1, 1, 0, 53, 1, 
	1, 1, 24, 1, 128, 1, 1, 1, 
	1, 128, 128, 128, 0, 128, 1, 124, 
	24, 1, 1, 1, 0, 1, 0, 128, 
	128, 24, 0, 1, 1, 1, 0, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 4, 0, 66, 1, 0, 0, 0, 
	1, 24, 1, 24, 66, 1, 1, 58, 
	123, 24, 0, 20, 1, 14, 15, 1, 
	1, 27, 128, 128, 1, 0, 66, 2, 
	0, 0, 0, 0, 0, 66, 128, 10, 
	1, 1, 1, 2, 1, 1, 2, 1, 
	2, 0, 1, 66, 2, 123, 0, 128, 
	128, 121, 0, 0, 8, 8, 0, 0, 
	93, 0, 0, 0, 93, 1, 0, 0, 
	0, 93, 46, 93, 93, 0, 0, 93, 
	46, 1, 93, 124, 27, 27, 27, 0, 
	103, 103, 103, 0, 126, 126, 126, 126, 
	126, 0, 126, 126, 0, 126, 27, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 0, 126, 0, 0, 55, 0, 128, 
	128, 128, 0, 1, 0, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 66, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 0, 64, 93, 24, 0, 
	1, 1, 1, 0, 128, 128, 24, 0, 
	1, 1, 1, 0, 128, 128, 1, 0, 
	0, 24, 0, 66, 1, 1, 128, 128, 
	10, 1, 24, 0, 0, 20, 2, 12, 
	1, 54, 48, 75, 67, 15, 58, 0, 
	1, 0, 67, 67, 67, 67, 10, 0, 
	1, 0, 67, 67, 67, 67, 67, 67, 
	67, 67, 69, 67, 69, 67, 1, 2, 
	1, 66, 1, 2, 128, 128, 0, 128, 
	128, 128, 128, 128, 128, 0, 1, 0, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 84, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 0, 
	64, 0, 38, 38, 47, 52, 1, 92, 
	101, 91, 1
]

class << self
	attr_accessor :_lex_index_offsets
	private :_lex_index_offsets, :_lex_index_offsets=
end
self._lex_index_offsets = [
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 46, 175, 304, 433, 562, 
	609, 688, 767, 861, 889, 917, 964, 1065, 
	1093, 1127, 1129, 1223, 1302, 1406, 1535, 1664, 
	1793, 1922, 1969, 2048, 2127, 2221, 2249, 2277, 
	2324, 2425, 2453, 2487, 2489, 2583, 2662, 2766, 
	2895, 3024, 3153, 3282, 3411, 3540, 3542, 3671, 
	3673, 3675, 3677, 3679, 3808, 3937, 4066, 4195, 
	4324, 4453, 4582, 4711, 4840, 4969, 5098, 5227, 
	5356, 5485, 5614, 5743, 5872, 6001, 6003, 6005, 
	6007, 6009, 6019, 6021, 6023, 6025, 6027, 6029, 
	6031, 6033, 6035, 6164, 6166, 6295, 6297, 6299, 
	6301, 6303, 6305, 6307, 6431, 6433, 6562, 6691, 
	6758, 6887, 7016, 7018, 7147, 7276, 7278, 7304, 
	7306, 7337, 7466, 7554, 7601, 7680, 7759, 7853, 
	7881, 7909, 7956, 8057, 8085, 8119, 8121, 8215, 
	8294, 8398, 8527, 8656, 8785, 8914, 9043, 9172, 
	9174, 9176, 9305, 9321, 9332, 9343, 9354, 9365, 
	9494, 9496, 9581, 9666, 9751, 9836, 9921, 10006, 
	10008, 10010, 10049, 10097, 10194, 10219, 10220, 10222, 
	10224, 10226, 10251, 10253, 10255, 10349, 10374, 10463, 
	10592, 10603, 10725, 10726, 10727, 10736, 10745, 10746, 
	10747, 10841, 10842, 10843, 10844, 10938, 10940, 10941, 
	10942, 10943, 11037, 11084, 11178, 11272, 11273, 11274, 
	11368, 11415, 11417, 11511, 11636, 11664, 11692, 11720, 
	11721, 11825, 11929, 12033, 12034, 12161, 12288, 12415, 
	12542, 12669, 12670, 12797, 12924, 12925, 13052, 13080, 
	13207, 13334, 13461, 13588, 13715, 13842, 13969, 14096, 
	14223, 14350, 14351, 14478, 14479, 14480, 14536, 14537, 
	14631, 14720, 14849, 14860, 14982, 14983, 14984, 14993, 
	15002, 15003, 15004, 15098, 15099, 15100, 15101, 15195, 
	15197, 15198, 15199, 15200, 15294, 15341, 15435, 15529, 
	15530, 15531, 15625, 15672, 15674, 15768, 15893, 15921, 
	15949, 15977, 15978, 16082, 16186, 16290, 16291, 16418, 
	16545, 16672, 16799, 16926, 16927, 17054, 17181, 17182, 
	17309, 17337, 17464, 17591, 17718, 17845, 17972, 18099, 
	18226, 18353, 18480, 18607, 18608, 18735, 18736, 18737, 
	18793, 18794, 18888, 18913, 18941, 19035, 19063, 19122, 
	19181, 19211, 19340, 19351, 19480, 19609, 19738, 19867, 
	19892, 19893, 19960, 19962, 19964, 20093, 20222, 20233, 
	20235, 20237, 20239, 20241, 20244, 20246, 20313, 20315, 
	20318, 20447, 20576, 20705, 20834, 20963, 21092, 21221, 
	21223, 21225, 21354, 21483, 21612, 21741, 21870, 21999, 
	22128, 22257, 22386, 22515, 22644, 22773, 22902, 23031, 
	23160, 23289, 23418, 23547, 23676, 23805, 23934, 24063, 
	24192, 24321, 24450, 24579, 24708, 24837, 24966, 25095, 
	25224, 25353, 25482, 25611, 25740, 25869, 25998, 26127, 
	26256, 26385, 26514, 26643, 26772, 26901, 27030, 27159, 
	27288, 27417, 27546, 27675, 27804, 27933, 28062, 28191, 
	28320, 28449, 28578, 28707, 28836, 28965, 29094, 29223, 
	29352, 29481, 29610, 29739, 29868, 29997, 30126, 30255, 
	30384, 30513, 30642, 30771, 30900, 31029, 31158, 31287, 
	31416, 31545, 31674, 31803, 31932, 31934, 32063, 32192, 
	32217, 32219, 32221, 32223, 32224, 32353, 32482, 32484, 
	32485, 32486, 32511, 32512, 32579, 32581, 32583, 32585, 
	32587, 32589, 32592, 32594, 32661, 32663, 32666, 32795, 
	32797, 32799, 32801, 32929, 33058, 33121, 33175, 33229, 
	33230, 33284, 33339, 33341, 33343, 33345, 33370, 33371, 
	33500, 33501, 33618, 33619, 33621, 33623, 33624, 33678, 
	33680, 33682, 33684, 33709, 33711, 33840, 33842, 33844, 
	33846, 33848, 33977, 34106, 34235, 34236, 34365, 34367, 
	34492, 34517, 34519, 34521, 34523, 34524, 34526, 34527, 
	34656, 34785, 34810, 34811, 34813, 34815, 34817, 34818, 
	34947, 35076, 35205, 35334, 35463, 35592, 35721, 35850, 
	35979, 36108, 36237, 36366, 36495, 36624, 36753, 36882, 
	37011, 37140, 37145, 37146, 37213, 37215, 37216, 37217, 
	37218, 37220, 37245, 37247, 37272, 37339, 37341, 37343, 
	37402, 37526, 37551, 37552, 37573, 37575, 37590, 37606, 
	37608, 37610, 37638, 37767, 37896, 37898, 37899, 37966, 
	37969, 37970, 37971, 37972, 37973, 37974, 38041, 38170, 
	38181, 38183, 38185, 38187, 38190, 38192, 38194, 38197, 
	38199, 38202, 38203, 38205, 38272, 38275, 38399, 38400, 
	38529, 38658, 38780, 38781, 38782, 38791, 38800, 38801, 
	38802, 38896, 38897, 38898, 38899, 38993, 38995, 38996, 
	38997, 38998, 39092, 39139, 39233, 39327, 39328, 39329, 
	39423, 39470, 39472, 39566, 39691, 39719, 39747, 39775, 
	39776, 39880, 39984, 40088, 40089, 40216, 40343, 40470, 
	40597, 40724, 40725, 40852, 40979, 40980, 41107, 41135, 
	41262, 41389, 41516, 41643, 41770, 41897, 42024, 42151, 
	42278, 42405, 42406, 42533, 42534, 42535, 42591, 42592, 
	42721, 42850, 42979, 42980, 42982, 42983, 43112, 43241, 
	43370, 43499, 43628, 43757, 43886, 44015, 44144, 44273, 
	44402, 44531, 44660, 44789, 44918, 45047, 45176, 45305, 
	45434, 45563, 45692, 45821, 45950, 46079, 46208, 46337, 
	46466, 46595, 46724, 46853, 46982, 47111, 47240, 47369, 
	47498, 47627, 47756, 47885, 48014, 48143, 48272, 48401, 
	48530, 48659, 48788, 48917, 49046, 49175, 49304, 49433, 
	49562, 49691, 49820, 49949, 50078, 50207, 50336, 50465, 
	50594, 50723, 50790, 50919, 51048, 51177, 51306, 51435, 
	51564, 51693, 51822, 51951, 52080, 52209, 52338, 52467, 
	52596, 52725, 52854, 52983, 53112, 53241, 53370, 53499, 
	53628, 53757, 53886, 54015, 54016, 54081, 54175, 54200, 
	54201, 54203, 54205, 54207, 54208, 54337, 54466, 54491, 
	54492, 54494, 54496, 54498, 54499, 54628, 54757, 54759, 
	54760, 54761, 54786, 54787, 54854, 54856, 54858, 54987, 
	55116, 55127, 55129, 55154, 55155, 55156, 55177, 55180, 
	55193, 55195, 55250, 55299, 55375, 55443, 55459, 55518, 
	55519, 55521, 55522, 55590, 55658, 55726, 55794, 55805, 
	55806, 55808, 55809, 55877, 55945, 56013, 56081, 56149, 
	56217, 56285, 56353, 56423, 56491, 56561, 56629, 56631, 
	56634, 56636, 56703, 56705, 56708, 56837, 56966, 56967, 
	57096, 57225, 57354, 57483, 57612, 57741, 57742, 57744, 
	57745, 57874, 58003, 58132, 58261, 58390, 58519, 58648, 
	58777, 58906, 59035, 59164, 59293, 59422, 59551, 59680, 
	59809, 59938, 60067, 60196, 60325, 60454, 60583, 60712, 
	60841, 60970, 61099, 61228, 61357, 61486, 61615, 61744, 
	61873, 62002, 62131, 62260, 62389, 62518, 62603, 62732, 
	62861, 62990, 63119, 63248, 63377, 63506, 63635, 63764, 
	63893, 64022, 64151, 64280, 64409, 64538, 64667, 64796, 
	64925, 65054, 65183, 65312, 65441, 65570, 65699, 65828, 
	65957, 66086, 66215, 66344, 66473, 66602, 66731, 66860, 
	66989, 67118, 67247, 67376, 67505, 67634, 67763, 67892, 
	68021, 68150, 68279, 68408, 68537, 68666, 68795, 68924, 
	69053, 69182, 69311, 69440, 69569, 69698, 69827, 69956, 
	70085, 70214, 70343, 70472, 70601, 70730, 70859, 70988, 
	70989, 71054, 71055, 71094, 71133, 71181, 71234, 71236, 
	71329, 71431, 71523
]

class << self
	attr_accessor :_lex_indicies
	private :_lex_indicies, :_lex_indicies=
end
self._lex_indicies = [
	1, 0, 2, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	9, 0, 10, 0, 0, 0, 10, 0, 
	0, 0, 0, 0, 11, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 10, 0, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 12, 14, 12, 14, 14, 12, 12, 
	14, 14, 14, 15, 14, 14, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	14, 14, 14, 14, 14, 14, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 14, 12, 12, 13, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 12, 12, 14, 12, 13, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 12, 12, 12, 12, 12, 12, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 14, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 12, 14, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 12, 12, 12, 12, 12, 12, 
	17, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 13, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 12, 
	13, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	13, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 13, 18, 19, 19, 19, 18, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 18, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 20, 
	19, 18, 21, 21, 21, 18, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 18, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 23, 21, 
	18, 21, 21, 21, 18, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 18, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 24, 21, 18, 
	25, 25, 25, 18, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 18, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 27, 25, 18, 28, 28, 
	28, 18, 28, 28, 28, 28, 28, 29, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 18, 
	28, 18, 28, 28, 28, 18, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 18, 28, 18, 19, 19, 
	19, 18, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 18, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 30, 19, 18, 31, 31, 31, 
	18, 31, 31, 31, 31, 31, 32, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 18, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 33, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	34, 31, 31, 31, 31, 31, 31, 35, 
	31, 18, 31, 31, 31, 18, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 18, 31, 36, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 37, 18, 37, 
	18, 18, 38, 38, 38, 18, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 18, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	39, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 40, 38, 18, 
	21, 21, 21, 18, 21, 21, 21, 21, 
	21, 22, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 18, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 24, 21, 18, 41, 
	41, 41, 18, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	18, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	42, 42, 42, 42, 42, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	42, 42, 42, 42, 42, 41, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 43, 45, 43, 45, 45, 43, 43, 
	45, 45, 45, 46, 45, 45, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	45, 45, 45, 45, 45, 45, 45, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 43, 45, 43, 43, 44, 45, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 43, 43, 43, 45, 43, 44, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 43, 43, 43, 43, 43, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 43, 43, 43, 43, 45, 43, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 43, 43, 43, 43, 43, 45, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 43, 43, 43, 43, 43, 43, 
	48, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 44, 
	43, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 43, 
	44, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 43, 
	43, 43, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 43, 43, 43, 43, 
	44, 43, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 43, 43, 43, 43, 
	43, 44, 49, 50, 50, 50, 49, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 49, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 51, 
	50, 49, 52, 52, 52, 49, 52, 52, 
	52, 52, 52, 53, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 49, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 54, 52, 
	49, 52, 52, 52, 49, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 49, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 55, 52, 49, 
	56, 56, 56, 49, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 49, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 57, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 58, 56, 49, 59, 59, 
	59, 49, 59, 59, 59, 59, 59, 60, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 49, 
	59, 49, 59, 59, 59, 49, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 49, 59, 49, 50, 50, 
	50, 49, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 49, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 61, 50, 49, 62, 62, 62, 
	49, 62, 62, 62, 62, 62, 63, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 49, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	65, 62, 62, 62, 62, 62, 62, 66, 
	62, 49, 62, 62, 62, 49, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 49, 62, 67, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 68, 49, 68, 
	49, 49, 69, 69, 69, 49, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 49, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	70, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 71, 69, 49, 
	52, 52, 52, 49, 52, 52, 52, 52, 
	52, 53, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 49, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 55, 52, 49, 72, 
	72, 72, 49, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	49, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	72, 72, 72, 72, 72, 72, 72, 73, 
	73, 73, 73, 73, 73, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 73, 
	73, 73, 73, 73, 73, 72, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	75, 76, 75, 76, 75, 75, 76, 76, 
	75, 75, 75, 77, 75, 75, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	75, 75, 75, 75, 75, 75, 75, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 76, 75, 76, 76, 74, 75, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 76, 76, 76, 75, 76, 74, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 76, 76, 76, 76, 76, 76, 76, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 76, 76, 76, 76, 75, 76, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 76, 76, 76, 76, 76, 75, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 76, 76, 76, 76, 76, 76, 
	80, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 76, 76, 76, 76, 79, 
	76, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 76, 76, 76, 76, 76, 
	79, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 76, 76, 76, 76, 76, 
	76, 76, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 76, 76, 76, 76, 
	81, 76, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 76, 76, 76, 76, 
	76, 81, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 82, 82, 82, 82, 
	82, 82, 82, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 82, 82, 82, 
	82, 83, 82, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 83, 83, 83, 
	83, 83, 83, 83, 83, 82, 82, 82, 
	82, 82, 83, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 86, 84, 84, 84, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 87, 84, 84, 
	84, 84, 86, 84, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 84, 84, 
	84, 84, 85, 84, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 84, 84, 
	84, 84, 84, 85, 87, 84, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 90, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	91, 88, 88, 88, 88, 90, 88, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 88, 88, 88, 88, 89, 88, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 88, 88, 88, 88, 88, 89, 91, 
	88, 93, 92, 94, 92, 95, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	97, 92, 97, 97, 97, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 97, 
	92, 92, 92, 92, 98, 99, 92, 100, 
	92, 101, 102, 103, 104, 105, 98, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 106, 92, 107, 103, 108, 109, 92, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 110, 111, 103, 112, 96, 92, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	113, 96, 96, 96, 96, 96, 96, 96, 
	96, 114, 96, 96, 115, 96, 116, 96, 
	96, 96, 117, 118, 92, 112, 92, 96, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 119, 92, 119, 119, 119, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	119, 92, 92, 92, 92, 120, 121, 92, 
	122, 92, 123, 124, 125, 126, 127, 120, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 128, 92, 129, 125, 130, 131, 
	92, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 132, 133, 125, 94, 89, 
	92, 89, 89, 89, 89, 89, 89, 89, 
	89, 134, 89, 89, 89, 89, 89, 89, 
	89, 89, 135, 89, 89, 136, 89, 137, 
	89, 89, 89, 138, 139, 92, 94, 92, 
	89, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 90, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 91, 92, 92, 92, 92, 
	90, 92, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 92, 92, 92, 92, 
	89, 92, 89, 89, 89, 89, 89, 140, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 92, 92, 92, 92, 
	92, 89, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 90, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 91, 92, 92, 92, 
	92, 90, 92, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 92, 92, 92, 
	92, 89, 92, 89, 89, 89, 89, 141, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 92, 92, 92, 
	92, 92, 89, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 90, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 91, 92, 92, 
	92, 92, 90, 92, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 92, 92, 
	92, 92, 89, 92, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 142, 89, 
	89, 89, 89, 89, 89, 89, 92, 92, 
	92, 92, 92, 89, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 90, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 91, 92, 
	92, 92, 92, 90, 92, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 92, 
	92, 92, 92, 89, 92, 89, 89, 143, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 92, 
	92, 92, 92, 92, 89, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 90, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 91, 
	92, 92, 92, 92, 90, 92, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	92, 92, 92, 92, 89, 92, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 144, 89, 89, 89, 89, 89, 
	92, 92, 92, 92, 92, 89, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 90, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	91, 92, 92, 92, 92, 90, 92, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 92, 92, 92, 92, 89, 92, 89, 
	89, 89, 89, 140, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 92, 92, 92, 92, 92, 89, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	90, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 91, 92, 92, 92, 92, 90, 92, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 92, 92, 92, 92, 89, 92, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 145, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 92, 92, 92, 92, 92, 89, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 90, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 91, 92, 92, 92, 92, 90, 
	92, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 92, 92, 92, 92, 89, 
	92, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 146, 89, 89, 89, 
	89, 89, 89, 89, 147, 89, 89, 89, 
	89, 89, 89, 92, 92, 92, 92, 92, 
	89, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 90, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 91, 92, 92, 92, 92, 
	90, 92, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 92, 92, 92, 92, 
	89, 92, 89, 89, 89, 89, 148, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 92, 92, 92, 92, 
	92, 89, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 90, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 91, 92, 92, 92, 
	92, 90, 92, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 92, 92, 92, 
	92, 89, 92, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 149, 89, 89, 
	89, 89, 89, 89, 89, 92, 92, 92, 
	92, 92, 89, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 90, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 91, 92, 92, 
	92, 92, 90, 92, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 92, 92, 
	92, 92, 89, 92, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 140, 89, 
	89, 89, 89, 89, 89, 89, 92, 92, 
	92, 92, 92, 89, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 90, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 91, 92, 
	92, 92, 92, 90, 92, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 92, 
	92, 92, 92, 89, 92, 89, 89, 89, 
	89, 89, 89, 89, 89, 150, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 92, 
	92, 92, 92, 92, 89, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 90, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 91, 
	92, 92, 92, 92, 90, 92, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	92, 92, 92, 92, 89, 92, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 140, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	92, 92, 92, 92, 92, 89, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 90, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	91, 92, 92, 92, 92, 90, 92, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 92, 92, 92, 92, 89, 92, 89, 
	89, 89, 89, 89, 89, 89, 151, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 92, 92, 92, 92, 92, 89, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	90, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 91, 92, 92, 92, 92, 90, 92, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 92, 92, 92, 92, 89, 92, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	152, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 92, 92, 92, 92, 92, 89, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 90, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 91, 92, 92, 92, 92, 90, 
	92, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 92, 92, 92, 92, 89, 
	92, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 144, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 92, 92, 92, 92, 92, 
	89, 154, 153, 155, 153, 156, 153, 125, 
	153, 157, 153, 153, 153, 153, 153, 153, 
	153, 158, 153, 159, 153, 160, 153, 125, 
	153, 161, 153, 125, 153, 162, 153, 156, 
	153, 164, 163, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 167, 165, 167, 167, 
	167, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 167, 165, 165, 165, 165, 
	165, 165, 165, 168, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 165, 169, 
	165, 165, 166, 165, 166, 166, 166, 170, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 165, 165, 
	165, 165, 165, 166, 171, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 173, 
	165, 173, 173, 173, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 173, 165, 
	165, 165, 165, 165, 165, 165, 174, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 165, 
	165, 165, 165, 165, 165, 165, 165, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 165, 175, 165, 165, 172, 165, 172, 
	172, 172, 176, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 165, 165, 165, 165, 165, 172, 177, 
	178, 180, 179, 181, 179, 182, 179, 183, 
	179, 184, 179, 185, 186, 186, 186, 185, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 185, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 186, 186, 
	186, 186, 186, 186, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 186, 188, 
	177, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 191, 191, 189, 191, 189, 191, 
	191, 189, 189, 191, 191, 191, 192, 191, 
	191, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 191, 191, 191, 191, 191, 
	191, 191, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 189, 191, 189, 189, 
	190, 191, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 189, 189, 189, 191, 
	189, 190, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 189, 189, 189, 189, 
	189, 189, 189, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 189, 189, 189, 
	189, 191, 189, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 191, 191, 191, 
	191, 191, 191, 191, 191, 189, 189, 189, 
	189, 189, 191, 194, 191, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 191, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 195, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 189, 189, 189, 189, 190, 189, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 189, 189, 189, 189, 189, 190, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 189, 189, 189, 189, 190, 189, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 189, 189, 189, 189, 189, 190, 
	194, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 197, 189, 189, 189, 
	189, 198, 189, 189, 189, 189, 189, 199, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 188, 
	189, 189, 189, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 189, 189, 189, 
	189, 196, 200, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 189, 189, 189, 
	189, 189, 196, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 203, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 202, 202, 202, 
	202, 202, 202, 202, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 202, 202, 
	202, 202, 201, 202, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 202, 202, 
	202, 202, 202, 201, 205, 204, 189, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 206, 197, 
	203, 202, 189, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 198, 
	198, 198, 198, 198, 198, 198, 198, 206, 
	198, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 197, 189, 189, 189, 189, 
	198, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 189, 189, 189, 189, 
	196, 200, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 189, 189, 189, 189, 
	189, 196, 189, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	200, 200, 200, 200, 200, 200, 200, 200, 
	206, 200, 207, 208, 208, 208, 207, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 207, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 209, 
	208, 207, 210, 210, 210, 207, 210, 210, 
	210, 210, 210, 211, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 207, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 212, 210, 
	207, 210, 210, 210, 207, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 207, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 213, 210, 207, 
	214, 214, 214, 207, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 207, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 215, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 216, 214, 207, 217, 217, 
	217, 207, 217, 217, 217, 217, 217, 218, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 207, 
	217, 207, 217, 217, 217, 207, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 217, 217, 217, 217, 217, 
	217, 217, 217, 207, 217, 207, 208, 208, 
	208, 207, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 207, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 219, 208, 207, 220, 220, 220, 
	207, 220, 220, 220, 220, 220, 221, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 207, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 222, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	223, 220, 220, 220, 220, 220, 220, 224, 
	220, 207, 220, 220, 220, 207, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 207, 220, 225, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 226, 207, 226, 
	207, 207, 227, 227, 227, 207, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 207, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	228, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 229, 227, 207, 
	210, 210, 210, 207, 210, 210, 210, 210, 
	210, 211, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 207, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 210, 210, 210, 210, 
	210, 210, 210, 210, 213, 210, 207, 230, 
	230, 230, 207, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	207, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 231, 231, 
	231, 231, 231, 231, 231, 231, 231, 231, 
	230, 230, 230, 230, 230, 230, 230, 231, 
	231, 231, 231, 231, 231, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 230, 
	230, 230, 230, 230, 230, 230, 230, 231, 
	231, 231, 231, 231, 231, 230, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 233, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	234, 177, 177, 235, 177, 236, 177, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 177, 177, 177, 177, 232, 177, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 177, 177, 177, 177, 177, 232, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	233, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 234, 189, 189, 235, 189, 236, 189, 
	232, 232, 232, 232, 232, 232, 237, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 189, 189, 189, 189, 232, 189, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 189, 189, 189, 189, 189, 232, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 233, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 234, 189, 189, 235, 189, 236, 
	189, 232, 232, 232, 232, 232, 232, 232, 
	232, 238, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 189, 189, 189, 189, 232, 
	189, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 189, 189, 189, 189, 189, 
	232, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 233, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 234, 189, 189, 235, 189, 
	236, 189, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 239, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 189, 189, 189, 189, 
	232, 189, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 189, 189, 189, 189, 
	189, 232, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 189, 233, 189, 189, 189, 189, 
	189, 189, 189, 189, 189, 189, 189, 189, 
	189, 189, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 234, 189, 189, 235, 
	189, 236, 189, 232, 232, 232, 239, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 189, 189, 189, 
	189, 232, 189, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 189, 189, 189, 
	189, 189, 232, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 240, 242, 240, 240, 240, 
	240, 240, 240, 240, 240, 240, 240, 240, 
	240, 240, 240, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 243, 240, 240, 
	240, 240, 242, 240, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 240, 240, 
	240, 240, 241, 240, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 240, 240, 
	240, 240, 240, 241, 243, 240, 240, 244, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 245, 245, 245, 245, 245, 245, 
	245, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 245, 245, 245, 245, 246, 
	245, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 245, 245, 245, 245, 245, 
	246, 248, 247, 248, 247, 247, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	247, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 247, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 250, 247, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 251, 253, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 251, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 245, 245, 245, 
	245, 245, 245, 245, 245, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 245, 
	245, 245, 245, 245, 245, 245, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	245, 245, 245, 245, 254, 245, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	245, 245, 245, 245, 245, 254, 255, 251, 
	256, 257, 256, 256, 256, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 256, 
	251, 251, 258, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 259, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 260, 251, 261, 262, 261, 
	261, 261, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 261, 251, 251, 263, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	264, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	265, 251, 267, 268, 267, 267, 267, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 267, 266, 266, 269, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 270, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 266, 266, 266, 
	266, 266, 266, 266, 266, 271, 266, 273, 
	274, 273, 273, 273, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 273, 272, 
	272, 275, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 276, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 277, 272, 273, 274, 273, 273, 
	273, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 273, 272, 272, 275, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 278, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 277, 
	272, 273, 279, 273, 273, 273, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	273, 272, 272, 275, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 276, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 277, 272, 280, 251, 
	257, 251, 282, 281, 282, 282, 282, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 281, 
	281, 282, 281, 281, 281, 281, 281, 281, 
	281, 281, 281, 281, 281, 281, 281, 283, 
	281, 281, 284, 284, 284, 281, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 281, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 281, 
	284, 286, 285, 285, 285, 286, 285, 285, 
	285, 285, 287, 288, 287, 287, 287, 285, 
	285, 285, 285, 285, 285, 285, 285, 285, 
	285, 285, 285, 286, 285, 285, 285, 285, 
	285, 287, 285, 285, 289, 285, 285, 285, 
	285, 285, 285, 285, 285, 285, 285, 285, 
	285, 285, 285, 285, 285, 285, 285, 285, 
	285, 285, 285, 285, 285, 285, 290, 285, 
	285, 285, 285, 285, 285, 285, 285, 285, 
	285, 285, 285, 285, 285, 285, 285, 285, 
	285, 285, 285, 285, 285, 285, 285, 285, 
	285, 285, 285, 285, 285, 291, 285, 285, 
	292, 285, 287, 293, 287, 287, 287, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 293, 293, 293, 293, 293, 293, 293, 
	293, 287, 293, 294, 295, 296, 297, 298, 
	300, 299, 302, 303, 302, 302, 302, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 301, 301, 301, 301, 301, 301, 301, 
	301, 302, 301, 288, 299, 304, 299, 306, 
	305, 305, 305, 306, 305, 305, 305, 305, 
	307, 308, 307, 307, 307, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 306, 305, 305, 305, 305, 305, 307, 
	305, 305, 309, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 305, 305, 305, 305, 305, 
	305, 305, 305, 310, 305, 307, 311, 307, 
	307, 307, 311, 311, 311, 311, 311, 311, 
	311, 311, 311, 311, 311, 311, 311, 311, 
	311, 311, 311, 311, 307, 311, 313, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 314, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 315, 312, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 316, 
	316, 316, 316, 316, 316, 316, 316, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 316, 316, 316, 316, 316, 316, 316, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 316, 316, 316, 316, 13, 316, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 316, 316, 316, 316, 316, 13, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	16, 16, 316, 319, 318, 318, 318, 319, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 319, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 320, 320, 320, 320, 320, 
	320, 320, 320, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 321, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	322, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 323, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	324, 318, 318, 325, 318, 326, 327, 329, 
	329, 329, 329, 329, 329, 329, 329, 328, 
	330, 330, 330, 330, 330, 330, 330, 330, 
	328, 328, 331, 331, 38, 38, 38, 331, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 331, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 39, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 332, 
	38, 333, 334, 335, 335, 38, 38, 38, 
	335, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 335, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 39, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	336, 38, 37, 335, 337, 338, 339, 339, 
	25, 25, 25, 339, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 339, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 340, 25, 335, 19, 19, 
	19, 335, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 335, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 341, 19, 331, 25, 25, 25, 
	331, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 331, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 26, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	27, 25, 331, 342, 342, 342, 331, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 331, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 343, 342, 
	344, 345, 345, 342, 342, 342, 345, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 345, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 342, 342, 
	342, 342, 342, 342, 342, 342, 346, 342, 
	345, 19, 19, 19, 345, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 345, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 341, 19, 347, 
	345, 345, 25, 25, 25, 345, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 345, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	26, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 27, 25, 348, 
	349, 349, 349, 348, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 348, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 350, 
	350, 350, 350, 350, 350, 350, 350, 350, 
	350, 349, 349, 349, 349, 349, 349, 349, 
	350, 350, 350, 350, 350, 350, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	350, 350, 350, 350, 350, 350, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 351, 349, 348, 352, 352, 352, 
	348, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 348, 352, 
	348, 353, 353, 353, 348, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 348, 353, 348, 354, 354, 354, 
	348, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 348, 354, 
	348, 348, 352, 352, 352, 348, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 348, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 355, 355, 355, 355, 355, 355, 355, 
	355, 355, 355, 352, 352, 352, 352, 352, 
	352, 352, 355, 355, 355, 355, 355, 355, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 352, 352, 352, 352, 352, 352, 
	352, 352, 355, 355, 355, 355, 355, 355, 
	352, 348, 353, 353, 353, 348, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 348, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 353, 353, 353, 353, 353, 
	353, 353, 356, 356, 356, 356, 356, 356, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 353, 353, 353, 353, 353, 353, 
	353, 353, 356, 356, 356, 356, 356, 356, 
	353, 348, 354, 354, 354, 348, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 348, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 357, 357, 357, 357, 357, 357, 357, 
	357, 357, 357, 354, 354, 354, 354, 354, 
	354, 354, 357, 357, 357, 357, 357, 357, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 357, 357, 357, 357, 357, 357, 
	354, 358, 361, 360, 360, 360, 361, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 361, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 362, 362, 362, 362, 362, 362, 
	362, 362, 362, 362, 360, 360, 360, 360, 
	360, 360, 360, 362, 362, 362, 362, 362, 
	362, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 362, 362, 362, 362, 362, 
	362, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 352, 
	360, 361, 363, 363, 363, 361, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 361, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 364, 364, 364, 364, 364, 364, 364, 
	364, 364, 364, 363, 363, 363, 363, 363, 
	363, 363, 364, 364, 364, 364, 364, 364, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 364, 364, 364, 364, 364, 364, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 365, 363, 
	361, 366, 366, 366, 361, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 361, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 366, 366, 366, 366, 366, 366, 
	366, 367, 367, 367, 367, 367, 367, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 367, 367, 367, 367, 367, 367, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 368, 366, 361, 
	369, 369, 369, 361, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 361, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 369, 369, 369, 369, 369, 369, 369, 
	370, 370, 370, 370, 370, 370, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	370, 370, 370, 370, 370, 370, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 361, 369, 361, 369, 
	369, 369, 361, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	361, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	369, 369, 369, 369, 369, 369, 369, 370, 
	370, 370, 370, 370, 370, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 370, 
	370, 370, 370, 370, 370, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 361, 369, 371, 361, 370, 
	370, 370, 361, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	361, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 371, 370, 361, 370, 370, 
	370, 361, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 361, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 359, 370, 359, 361, 367, 367, 
	367, 361, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 361, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 354, 367, 359, 354, 354, 354, 
	359, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 354, 354, 
	354, 354, 354, 354, 354, 354, 359, 354, 
	361, 363, 363, 363, 361, 363, 363, 363, 
	363, 372, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 361, 363, 363, 363, 363, 363, 
	372, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 363, 363, 363, 363, 363, 363, 
	363, 373, 373, 373, 373, 373, 373, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 373, 373, 373, 373, 373, 373, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 363, 363, 363, 363, 374, 363, 361, 
	369, 369, 369, 361, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 361, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 375, 
	375, 375, 375, 375, 375, 375, 375, 375, 
	375, 369, 369, 369, 369, 369, 369, 369, 
	375, 375, 375, 375, 375, 375, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	375, 375, 375, 375, 375, 375, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 361, 369, 361, 369, 
	369, 369, 361, 369, 369, 369, 369, 376, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	361, 369, 369, 369, 369, 369, 376, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	369, 369, 369, 369, 369, 369, 369, 377, 
	377, 377, 377, 377, 377, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 377, 
	377, 377, 377, 377, 377, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 378, 369, 361, 369, 369, 
	369, 361, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 361, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 375, 375, 375, 
	375, 375, 375, 375, 375, 375, 375, 369, 
	369, 369, 369, 369, 369, 369, 375, 375, 
	375, 375, 375, 375, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 375, 375, 
	375, 375, 375, 375, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 361, 369, 361, 369, 369, 369, 
	361, 369, 369, 369, 369, 376, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 361, 369, 
	369, 369, 369, 369, 376, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 379, 379, 379, 379, 
	379, 379, 379, 379, 379, 379, 369, 369, 
	369, 369, 369, 369, 369, 379, 379, 379, 
	379, 379, 379, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 379, 379, 379, 
	379, 379, 379, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 378, 369, 361, 369, 369, 369, 361, 
	369, 369, 369, 369, 376, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 361, 369, 369, 
	369, 369, 369, 376, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 380, 380, 380, 380, 380, 
	380, 380, 380, 380, 380, 369, 369, 369, 
	369, 369, 369, 369, 380, 380, 380, 380, 
	380, 380, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 380, 380, 380, 380, 
	380, 380, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	378, 369, 361, 369, 369, 369, 361, 369, 
	369, 369, 369, 376, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 361, 369, 369, 369, 
	369, 369, 376, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 381, 381, 381, 381, 381, 381, 
	381, 381, 381, 381, 369, 369, 369, 369, 
	369, 369, 369, 381, 381, 381, 381, 381, 
	381, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 381, 381, 381, 381, 381, 
	381, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 378, 
	369, 361, 369, 369, 369, 361, 369, 369, 
	369, 369, 376, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 361, 369, 369, 369, 369, 
	369, 376, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 382, 382, 382, 382, 382, 382, 382, 
	382, 382, 382, 369, 369, 369, 369, 369, 
	369, 369, 382, 382, 382, 382, 382, 382, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 382, 382, 382, 382, 382, 382, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 378, 369, 
	361, 369, 369, 369, 361, 369, 369, 369, 
	369, 376, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 361, 369, 369, 369, 369, 369, 
	376, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 383, 369, 369, 369, 369, 369, 369, 
	369, 383, 383, 383, 383, 383, 383, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 383, 383, 383, 383, 383, 383, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 378, 369, 361, 
	369, 369, 369, 361, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 361, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 383, 
	383, 383, 383, 383, 383, 383, 383, 383, 
	383, 369, 369, 369, 369, 369, 369, 369, 
	383, 383, 383, 383, 383, 383, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	383, 383, 383, 383, 383, 383, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 369, 369, 371, 369, 384, 361, 
	366, 366, 366, 361, 366, 366, 366, 366, 
	376, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 361, 366, 366, 366, 366, 366, 376, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 379, 
	379, 379, 379, 379, 379, 379, 379, 379, 
	379, 366, 366, 366, 366, 366, 366, 366, 
	379, 379, 379, 379, 379, 379, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	379, 379, 379, 379, 379, 379, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 366, 366, 366, 366, 
	366, 366, 366, 366, 378, 366, 385, 386, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 388, 387, 387, 387, 387, 387, 387, 
	387, 388, 388, 388, 388, 388, 388, 387, 
	387, 387, 387, 387, 387, 387, 387, 387, 
	387, 387, 387, 387, 387, 387, 387, 387, 
	387, 387, 387, 387, 387, 387, 387, 387, 
	387, 388, 388, 388, 388, 388, 388, 387, 
	387, 390, 389, 389, 389, 390, 389, 389, 
	389, 389, 389, 391, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 390, 389, 389, 389, 389, 
	389, 389, 389, 389, 392, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 389, 389, 389, 
	389, 389, 389, 389, 389, 393, 389, 395, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 396, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 394, 394, 
	394, 394, 394, 394, 394, 394, 397, 394, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 398, 398, 398, 398, 398, 398, 
	398, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 398, 398, 398, 398, 44, 
	398, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 398, 398, 398, 398, 398, 
	44, 47, 47, 47, 47, 47, 47, 47, 
	47, 47, 47, 398, 401, 400, 400, 400, 
	401, 400, 400, 400, 400, 400, 400, 400, 
	400, 400, 400, 400, 400, 400, 400, 400, 
	400, 400, 400, 400, 400, 400, 401, 400, 
	400, 400, 400, 400, 400, 400, 400, 400, 
	400, 400, 400, 400, 400, 400, 400, 400, 
	400, 400, 400, 400, 402, 402, 402, 402, 
	402, 402, 402, 402, 400, 400, 400, 400, 
	400, 400, 400, 400, 400, 400, 400, 403, 
	400, 400, 400, 400, 400, 400, 400, 400, 
	400, 404, 400, 400, 400, 400, 400, 400, 
	400, 400, 400, 400, 400, 400, 400, 400, 
	400, 400, 400, 400, 400, 400, 400, 405, 
	400, 400, 400, 400, 400, 400, 400, 400, 
	400, 400, 400, 400, 400, 400, 400, 400, 
	400, 406, 400, 400, 407, 400, 408, 409, 
	411, 411, 411, 411, 411, 411, 411, 411, 
	410, 412, 412, 412, 412, 412, 412, 412, 
	412, 410, 410, 413, 413, 69, 69, 69, 
	413, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 413, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 70, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	414, 69, 415, 416, 417, 417, 69, 69, 
	69, 417, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 417, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 70, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 418, 69, 68, 417, 419, 420, 421, 
	421, 56, 56, 56, 421, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 421, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 57, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 422, 56, 417, 50, 
	50, 50, 417, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	417, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 423, 50, 413, 56, 56, 
	56, 413, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 413, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 57, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 58, 56, 413, 424, 424, 424, 413, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 413, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 425, 
	424, 426, 427, 427, 424, 424, 424, 427, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 427, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 424, 
	424, 424, 424, 424, 424, 424, 424, 428, 
	424, 427, 50, 50, 50, 427, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 427, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 423, 50, 
	429, 427, 427, 56, 56, 56, 427, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 427, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 57, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 58, 56, 
	430, 431, 431, 431, 430, 431, 431, 431, 
	431, 431, 431, 431, 431, 431, 431, 431, 
	431, 431, 431, 431, 431, 431, 431, 431, 
	431, 431, 430, 431, 431, 431, 431, 431, 
	431, 431, 431, 431, 431, 431, 431, 431, 
	431, 431, 431, 431, 431, 431, 431, 431, 
	432, 432, 432, 432, 432, 432, 432, 432, 
	432, 432, 431, 431, 431, 431, 431, 431, 
	431, 432, 432, 432, 432, 432, 432, 431, 
	431, 431, 431, 431, 431, 431, 431, 431, 
	431, 431, 431, 431, 431, 431, 431, 431, 
	431, 431, 431, 431, 431, 431, 431, 431, 
	431, 432, 432, 432, 432, 432, 432, 431, 
	431, 431, 431, 431, 431, 431, 431, 431, 
	431, 431, 431, 431, 431, 431, 431, 431, 
	431, 431, 431, 433, 431, 430, 434, 434, 
	434, 430, 434, 434, 434, 434, 434, 434, 
	434, 434, 434, 434, 434, 434, 434, 434, 
	434, 434, 434, 434, 434, 434, 434, 430, 
	434, 430, 435, 435, 435, 430, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 430, 435, 430, 436, 436, 
	436, 430, 436, 436, 436, 436, 436, 436, 
	436, 436, 436, 436, 436, 436, 436, 436, 
	436, 436, 436, 436, 436, 436, 436, 430, 
	436, 430, 430, 434, 434, 434, 430, 434, 
	434, 434, 434, 434, 434, 434, 434, 434, 
	434, 434, 434, 434, 434, 434, 434, 434, 
	434, 434, 434, 434, 430, 434, 434, 434, 
	434, 434, 434, 434, 434, 434, 434, 434, 
	434, 434, 434, 434, 434, 434, 434, 434, 
	434, 434, 437, 437, 437, 437, 437, 437, 
	437, 437, 437, 437, 434, 434, 434, 434, 
	434, 434, 434, 437, 437, 437, 437, 437, 
	437, 434, 434, 434, 434, 434, 434, 434, 
	434, 434, 434, 434, 434, 434, 434, 434, 
	434, 434, 434, 434, 434, 434, 434, 434, 
	434, 434, 434, 437, 437, 437, 437, 437, 
	437, 434, 430, 435, 435, 435, 430, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 430, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 438, 438, 438, 438, 438, 438, 
	438, 438, 438, 438, 435, 435, 435, 435, 
	435, 435, 435, 438, 438, 438, 438, 438, 
	438, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 438, 438, 438, 438, 438, 
	438, 435, 430, 436, 436, 436, 430, 436, 
	436, 436, 436, 436, 436, 436, 436, 436, 
	436, 436, 436, 436, 436, 436, 436, 436, 
	436, 436, 436, 436, 430, 436, 436, 436, 
	436, 436, 436, 436, 436, 436, 436, 436, 
	436, 436, 436, 436, 436, 436, 436, 436, 
	436, 436, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 436, 436, 436, 436, 
	436, 436, 436, 439, 439, 439, 439, 439, 
	439, 436, 436, 436, 436, 436, 436, 436, 
	436, 436, 436, 436, 436, 436, 436, 436, 
	436, 436, 436, 436, 436, 436, 436, 436, 
	436, 436, 436, 439, 439, 439, 439, 439, 
	439, 436, 440, 443, 442, 442, 442, 443, 
	442, 442, 442, 442, 442, 442, 442, 442, 
	442, 442, 442, 442, 442, 442, 442, 442, 
	442, 442, 442, 442, 442, 443, 442, 442, 
	442, 442, 442, 442, 442, 442, 442, 442, 
	442, 442, 442, 442, 442, 442, 442, 442, 
	442, 442, 442, 444, 444, 444, 444, 444, 
	444, 444, 444, 444, 444, 442, 442, 442, 
	442, 442, 442, 442, 444, 444, 444, 444, 
	444, 444, 442, 442, 442, 442, 442, 442, 
	442, 442, 442, 442, 442, 442, 442, 442, 
	442, 442, 442, 442, 442, 442, 442, 442, 
	442, 442, 442, 442, 444, 444, 444, 444, 
	444, 444, 442, 442, 442, 442, 442, 442, 
	442, 442, 442, 442, 442, 442, 442, 442, 
	442, 442, 442, 442, 442, 442, 442, 442, 
	434, 442, 443, 445, 445, 445, 443, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 443, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 446, 446, 446, 446, 446, 446, 
	446, 446, 446, 446, 445, 445, 445, 445, 
	445, 445, 445, 446, 446, 446, 446, 446, 
	446, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 446, 446, 446, 446, 446, 
	446, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 447, 
	445, 443, 448, 448, 448, 443, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 443, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 448, 448, 448, 448, 448, 
	448, 448, 449, 449, 449, 449, 449, 449, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 449, 449, 449, 449, 449, 449, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 450, 448, 
	443, 451, 451, 451, 443, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 443, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 451, 451, 451, 451, 451, 451, 
	451, 452, 452, 452, 452, 452, 452, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 452, 452, 452, 452, 452, 452, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 443, 451, 443, 
	451, 451, 451, 443, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 443, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 451, 451, 451, 451, 451, 451, 451, 
	452, 452, 452, 452, 452, 452, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	452, 452, 452, 452, 452, 452, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 443, 451, 453, 443, 
	452, 452, 452, 443, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 443, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 453, 452, 443, 452, 
	452, 452, 443, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	443, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 441, 452, 441, 443, 449, 
	449, 449, 443, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	443, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 436, 449, 441, 436, 436, 
	436, 441, 436, 436, 436, 436, 436, 436, 
	436, 436, 436, 436, 436, 436, 436, 436, 
	436, 436, 436, 436, 436, 436, 436, 441, 
	436, 443, 445, 445, 445, 443, 445, 445, 
	445, 445, 454, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 443, 445, 445, 445, 445, 
	445, 454, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 445, 445, 445, 445, 445, 
	445, 445, 455, 455, 455, 455, 455, 455, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 455, 455, 455, 455, 455, 455, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 445, 445, 
	445, 445, 445, 445, 445, 445, 456, 445, 
	443, 451, 451, 451, 443, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 443, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	457, 457, 451, 451, 451, 451, 451, 451, 
	451, 457, 457, 457, 457, 457, 457, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 457, 457, 457, 457, 457, 457, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 443, 451, 443, 
	451, 451, 451, 443, 451, 451, 451, 451, 
	458, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 443, 451, 451, 451, 451, 451, 458, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 459, 
	459, 459, 459, 459, 459, 459, 459, 459, 
	459, 451, 451, 451, 451, 451, 451, 451, 
	459, 459, 459, 459, 459, 459, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	459, 459, 459, 459, 459, 459, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 460, 451, 443, 451, 
	451, 451, 443, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	443, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 457, 457, 
	457, 457, 457, 457, 457, 457, 457, 457, 
	451, 451, 451, 451, 451, 451, 451, 457, 
	457, 457, 457, 457, 457, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 457, 
	457, 457, 457, 457, 457, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 443, 451, 443, 451, 451, 
	451, 443, 451, 451, 451, 451, 458, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 443, 
	451, 451, 451, 451, 451, 458, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 461, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 451, 
	451, 451, 451, 451, 451, 451, 461, 461, 
	461, 461, 461, 461, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 461, 461, 
	461, 461, 461, 461, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 460, 451, 443, 451, 451, 451, 
	443, 451, 451, 451, 451, 458, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 443, 451, 
	451, 451, 451, 451, 458, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 462, 462, 462, 462, 
	462, 462, 462, 462, 462, 462, 451, 451, 
	451, 451, 451, 451, 451, 462, 462, 462, 
	462, 462, 462, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 462, 462, 462, 
	462, 462, 462, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 460, 451, 443, 451, 451, 451, 443, 
	451, 451, 451, 451, 458, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 443, 451, 451, 
	451, 451, 451, 458, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 463, 463, 463, 463, 463, 
	463, 463, 463, 463, 463, 451, 451, 451, 
	451, 451, 451, 451, 463, 463, 463, 463, 
	463, 463, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 463, 463, 463, 463, 
	463, 463, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	460, 451, 443, 451, 451, 451, 443, 451, 
	451, 451, 451, 458, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 443, 451, 451, 451, 
	451, 451, 458, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 464, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 451, 451, 451, 451, 
	451, 451, 451, 464, 464, 464, 464, 464, 
	464, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 464, 464, 464, 464, 464, 
	464, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 460, 
	451, 443, 451, 451, 451, 443, 451, 451, 
	451, 451, 458, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 443, 451, 451, 451, 451, 
	451, 458, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 465, 465, 465, 465, 465, 465, 465, 
	465, 465, 465, 451, 451, 451, 451, 451, 
	451, 451, 465, 465, 465, 465, 465, 465, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 465, 465, 465, 465, 465, 465, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 460, 451, 
	443, 451, 451, 451, 443, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 443, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	465, 465, 465, 465, 465, 465, 465, 465, 
	465, 465, 451, 451, 451, 451, 451, 451, 
	451, 465, 465, 465, 465, 465, 465, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 465, 465, 465, 465, 465, 465, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 451, 451, 451, 
	451, 451, 451, 451, 451, 453, 451, 466, 
	443, 448, 448, 448, 443, 448, 448, 448, 
	448, 458, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 443, 448, 448, 448, 448, 448, 
	458, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	461, 461, 448, 448, 448, 448, 448, 448, 
	448, 461, 461, 461, 461, 461, 461, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 461, 461, 461, 461, 461, 461, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 448, 448, 460, 448, 467, 
	468, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 469, 469, 469, 469, 469, 
	469, 469, 470, 470, 470, 470, 470, 470, 
	469, 469, 469, 469, 469, 469, 469, 469, 
	469, 469, 469, 469, 469, 469, 469, 469, 
	469, 469, 469, 469, 469, 469, 469, 469, 
	469, 469, 470, 470, 470, 470, 470, 470, 
	469, 469, 472, 471, 471, 471, 472, 471, 
	471, 471, 471, 473, 474, 473, 473, 473, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 472, 471, 471, 471, 
	471, 471, 473, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 471, 471, 471, 471, 471, 475, 471, 
	473, 476, 473, 473, 473, 476, 476, 476, 
	476, 476, 476, 476, 476, 476, 476, 476, 
	476, 476, 476, 476, 476, 476, 476, 473, 
	476, 477, 478, 478, 478, 477, 478, 478, 
	478, 478, 478, 478, 478, 478, 478, 478, 
	478, 478, 478, 478, 478, 478, 478, 478, 
	478, 478, 478, 477, 478, 480, 479, 479, 
	479, 480, 479, 479, 479, 479, 479, 481, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 480, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 482, 479, 483, 484, 484, 484, 483, 
	484, 484, 484, 484, 484, 485, 484, 484, 
	484, 484, 484, 484, 484, 484, 484, 484, 
	484, 484, 484, 484, 484, 483, 484, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 486, 486, 486, 486, 486, 486, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 486, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 488, 488, 488, 488, 
	488, 488, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 488, 489, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 490, 76, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 491, 491, 491, 
	491, 491, 491, 491, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 491, 491, 
	491, 491, 74, 491, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 491, 491, 
	491, 491, 491, 74, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 491, 492, 
	492, 492, 492, 492, 492, 492, 492, 492, 
	492, 492, 492, 492, 492, 492, 492, 492, 
	492, 492, 492, 492, 492, 492, 492, 492, 
	492, 492, 492, 492, 492, 492, 492, 492, 
	492, 492, 492, 492, 492, 492, 492, 492, 
	492, 492, 492, 492, 492, 492, 492, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 492, 492, 492, 492, 492, 492, 492, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 492, 492, 492, 492, 79, 492, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 492, 492, 492, 492, 492, 79, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	493, 493, 493, 493, 493, 493, 493, 493, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 493, 493, 493, 493, 493, 493, 
	493, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 493, 493, 493, 493, 81, 
	493, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 493, 493, 493, 493, 493, 
	81, 495, 496, 496, 496, 495, 496, 496, 
	496, 496, 497, 498, 497, 497, 497, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 495, 496, 496, 496, 496, 
	496, 497, 499, 496, 500, 501, 502, 503, 
	496, 496, 496, 504, 505, 496, 505, 496, 
	502, 496, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 506, 496, 507, 508, 509, 
	496, 496, 510, 511, 510, 510, 512, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 513, 514, 496, 502, 
	515, 502, 516, 517, 518, 519, 520, 521, 
	494, 494, 522, 494, 494, 494, 523, 524, 
	525, 494, 494, 526, 527, 528, 529, 494, 
	530, 494, 531, 494, 496, 532, 496, 505, 
	496, 494, 533, 533, 533, 533, 533, 533, 
	533, 533, 533, 533, 533, 533, 533, 533, 
	533, 533, 533, 533, 533, 533, 533, 533, 
	533, 533, 533, 533, 533, 533, 533, 533, 
	533, 533, 533, 534, 533, 533, 533, 533, 
	533, 533, 533, 533, 533, 533, 533, 533, 
	533, 533, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 533, 533, 533, 534, 
	533, 534, 533, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 533, 533, 533, 
	533, 494, 533, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 533, 533, 533, 
	533, 533, 494, 497, 535, 497, 497, 497, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 535, 535, 535, 535, 535, 535, 
	535, 535, 497, 535, 536, 502, 537, 537, 
	502, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 537, 537, 537, 537, 537, 
	537, 537, 537, 537, 537, 537, 502, 537, 
	538, 539, 540, 541, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 83, 83, 542, 
	83, 542, 83, 83, 542, 542, 83, 83, 
	83, 544, 83, 83, 545, 545, 545, 545, 
	545, 545, 545, 545, 545, 545, 83, 83, 
	83, 83, 83, 83, 83, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 542, 
	83, 542, 542, 543, 83, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 542, 
	542, 542, 83, 542, 543, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 546, 
	546, 546, 546, 546, 546, 546, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	546, 546, 546, 546, 543, 546, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	543, 543, 543, 543, 543, 543, 543, 543, 
	546, 546, 546, 546, 546, 543, 545, 545, 
	545, 545, 545, 545, 545, 545, 545, 545, 
	546, 502, 537, 502, 537, 502, 537, 548, 
	547, 502, 549, 537, 502, 537, 550, 502, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 542, 
	542, 542, 542, 542, 542, 542, 542, 502, 
	542, 502, 537, 502, 502, 537, 533, 533, 
	533, 533, 533, 533, 533, 533, 533, 533, 
	533, 533, 533, 533, 533, 533, 533, 533, 
	533, 533, 533, 533, 533, 533, 533, 533, 
	533, 533, 533, 533, 533, 533, 533, 534, 
	533, 533, 533, 533, 533, 533, 533, 533, 
	533, 533, 533, 533, 533, 533, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	533, 533, 533, 534, 533, 534, 533, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 533, 533, 533, 533, 510, 533, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 533, 533, 533, 533, 533, 510, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	534, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 551, 551, 551, 534, 551, 534, 551, 
	510, 510, 510, 510, 552, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 551, 551, 551, 551, 510, 551, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 551, 551, 551, 551, 551, 510, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 534, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 551, 551, 551, 534, 551, 534, 
	551, 510, 510, 510, 510, 510, 510, 553, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 551, 551, 551, 551, 510, 
	551, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 551, 551, 551, 551, 551, 
	510, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 534, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 551, 551, 551, 534, 551, 
	534, 551, 510, 510, 510, 510, 510, 510, 
	510, 510, 554, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 551, 551, 551, 551, 
	510, 551, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 551, 551, 551, 551, 
	551, 510, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 534, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 551, 551, 551, 534, 
	551, 534, 551, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	555, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 551, 551, 551, 
	551, 510, 551, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 551, 551, 551, 
	551, 551, 510, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 534, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 551, 551, 551, 
	534, 551, 534, 551, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 556, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 551, 551, 
	551, 551, 510, 551, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 551, 551, 
	551, 551, 551, 510, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 551, 534, 551, 551, 
	551, 551, 551, 551, 551, 551, 551, 551, 
	551, 551, 551, 551, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 551, 551, 
	551, 534, 551, 534, 551, 510, 510, 510, 
	555, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 551, 
	551, 551, 551, 510, 551, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 510, 
	510, 510, 510, 510, 510, 510, 510, 551, 
	551, 551, 551, 551, 510, 550, 542, 498, 
	542, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 534, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 534, 557, 
	534, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	558, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	557, 494, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 534, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 534, 
	557, 534, 557, 494, 494, 494, 494, 559, 
	560, 494, 494, 494, 494, 494, 561, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 494, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 557, 494, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 534, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	534, 557, 534, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 562, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 494, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 557, 494, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 534, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 534, 557, 534, 557, 494, 494, 563, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 494, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 557, 494, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 534, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 534, 557, 534, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 564, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 494, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 557, 494, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 534, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 534, 557, 534, 557, 494, 
	494, 494, 565, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 494, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 557, 494, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	534, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 534, 557, 534, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	566, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 494, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 557, 494, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 534, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 534, 557, 534, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 567, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 494, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 557, 
	494, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 534, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 534, 557, 
	534, 557, 494, 494, 494, 494, 494, 494, 
	568, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	494, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	557, 494, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 534, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 534, 
	557, 534, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 569, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 557, 494, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 534, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	534, 557, 534, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 570, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 557, 494, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 534, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 534, 557, 534, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 571, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 494, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 557, 494, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 534, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 534, 557, 534, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 572, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 494, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 557, 494, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 534, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 534, 557, 534, 557, 494, 
	494, 494, 494, 568, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 494, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 557, 494, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	534, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 534, 557, 534, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	573, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 494, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 557, 494, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 534, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 534, 557, 534, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 572, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 494, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 557, 
	494, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 534, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 534, 557, 
	534, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	494, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 574, 494, 575, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	557, 494, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 534, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 534, 
	557, 534, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 494, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 576, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 557, 494, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 534, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	534, 557, 534, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 494, 557, 577, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 557, 494, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 534, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 534, 557, 534, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 494, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 570, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 557, 494, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 534, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 534, 557, 534, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 494, 557, 494, 494, 
	494, 570, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 557, 494, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 534, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 534, 557, 534, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 494, 557, 494, 
	494, 494, 494, 578, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	579, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 557, 494, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	534, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 534, 557, 534, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 494, 557, 
	494, 494, 494, 494, 494, 494, 580, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 557, 494, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 534, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 534, 557, 534, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 494, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 581, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 557, 
	494, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 534, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 534, 557, 
	534, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	494, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 570, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	557, 494, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 534, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 534, 
	557, 534, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 494, 557, 494, 494, 494, 494, 582, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 557, 494, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 534, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	534, 557, 534, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 494, 557, 583, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 557, 494, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 534, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 534, 557, 534, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 494, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 570, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 557, 494, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 534, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 534, 557, 534, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 494, 557, 584, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 585, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 557, 494, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 534, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 534, 557, 534, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 494, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 586, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 557, 494, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	534, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 534, 557, 534, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 494, 557, 
	494, 494, 494, 494, 570, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 557, 494, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 534, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 534, 557, 534, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 494, 
	557, 587, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 557, 
	494, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 534, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 534, 557, 
	534, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	494, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 577, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	557, 494, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 534, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 534, 
	557, 534, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 494, 557, 494, 494, 494, 494, 588, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 570, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 557, 494, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 534, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	534, 557, 534, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 494, 557, 494, 494, 494, 494, 
	494, 589, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 557, 494, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 590, 534, 590, 590, 
	590, 590, 590, 590, 590, 590, 590, 590, 
	590, 590, 590, 590, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 590, 590, 
	590, 534, 590, 534, 590, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 590, 
	590, 590, 590, 494, 590, 494, 494, 494, 
	494, 494, 494, 494, 494, 591, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 590, 
	590, 590, 590, 590, 494, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 534, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 534, 557, 534, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 494, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 592, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 557, 494, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 534, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 534, 557, 534, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 494, 557, 494, 
	494, 494, 494, 593, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 557, 494, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	534, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 534, 557, 534, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 494, 557, 
	494, 494, 494, 594, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 557, 494, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 534, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 534, 557, 595, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 494, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 557, 
	494, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 534, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 534, 557, 
	534, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	494, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 596, 494, 597, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	557, 494, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 534, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 534, 
	557, 534, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 494, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 598, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 557, 494, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 534, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	534, 557, 534, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 494, 557, 494, 494, 494, 494, 
	570, 494, 494, 494, 599, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 557, 494, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 534, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 534, 557, 534, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 494, 557, 494, 494, 494, 
	494, 494, 570, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 557, 494, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 534, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 534, 557, 534, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 494, 557, 494, 494, 
	494, 570, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	600, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 557, 494, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 534, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 534, 557, 534, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 494, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 601, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 557, 494, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	534, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 534, 557, 534, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 494, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 586, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 557, 494, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 534, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 534, 557, 534, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 494, 
	557, 602, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 525, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 557, 
	494, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 534, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 534, 557, 
	534, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	494, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 584, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	557, 494, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 534, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 534, 
	557, 534, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 494, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 570, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 557, 494, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 534, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	534, 557, 534, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 494, 557, 494, 494, 494, 494, 
	494, 570, 494, 494, 494, 494, 494, 494, 
	494, 570, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 557, 494, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 534, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 534, 557, 534, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 494, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 603, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 557, 494, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 534, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 534, 557, 534, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 494, 557, 494, 494, 
	494, 604, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 557, 494, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 534, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 534, 557, 534, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 494, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 605, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 557, 494, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	534, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 534, 557, 534, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 494, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 586, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 557, 494, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 534, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 534, 557, 534, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 494, 
	557, 494, 494, 494, 494, 606, 494, 494, 
	494, 607, 494, 494, 494, 494, 494, 608, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 557, 
	494, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 534, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 534, 557, 
	534, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	494, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 608, 494, 494, 557, 557, 557, 557, 
	557, 494, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 534, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 534, 
	557, 534, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 494, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 570, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 557, 494, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 534, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	534, 557, 534, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 494, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 570, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 557, 494, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 534, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 534, 557, 534, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 494, 557, 494, 494, 494, 
	494, 609, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 557, 494, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 534, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 534, 557, 534, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 494, 557, 494, 494, 
	494, 610, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	611, 612, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 557, 494, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 534, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 534, 557, 534, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 494, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 570, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 557, 494, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	534, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 534, 557, 534, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 494, 557, 
	494, 494, 613, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 557, 494, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 534, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 534, 557, 534, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 494, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 586, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 557, 
	494, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 534, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 534, 557, 
	534, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	494, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 614, 494, 494, 615, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	557, 494, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 534, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 534, 
	557, 534, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 494, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 570, 494, 557, 557, 557, 
	557, 557, 494, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 534, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	534, 557, 534, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 494, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 581, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 557, 494, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 534, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 534, 557, 534, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 494, 557, 494, 494, 494, 
	494, 616, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 617, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 557, 494, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 534, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 534, 557, 534, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 494, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 599, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 557, 494, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 534, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 534, 557, 534, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 494, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 618, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 557, 494, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	534, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 534, 557, 534, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 494, 557, 
	494, 494, 494, 494, 525, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 557, 494, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 534, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 534, 557, 534, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 494, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	619, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 613, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 557, 
	494, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 534, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 534, 557, 
	534, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	494, 557, 494, 494, 494, 494, 581, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	557, 494, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 534, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 534, 
	557, 534, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 494, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	620, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 557, 494, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 534, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	534, 557, 534, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 494, 557, 494, 494, 494, 621, 
	494, 494, 494, 494, 494, 494, 494, 622, 
	494, 494, 494, 494, 494, 494, 494, 623, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 557, 494, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 534, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 534, 557, 534, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 494, 557, 494, 494, 494, 
	494, 599, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 557, 557, 494, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 534, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 557, 
	557, 557, 534, 557, 534, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 494, 557, 494, 494, 
	494, 494, 587, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 557, 557, 494, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 534, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	557, 557, 557, 534, 557, 534, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 494, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 607, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 557, 557, 494, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	534, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 557, 557, 557, 534, 557, 534, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 494, 557, 
	494, 494, 494, 494, 494, 494, 494, 624, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 557, 557, 494, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 534, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 557, 557, 557, 534, 557, 534, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 494, 
	557, 494, 494, 494, 494, 581, 494, 494, 
	494, 605, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 557, 557, 
	494, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 534, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 557, 557, 557, 534, 557, 
	534, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	494, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 625, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 557, 
	557, 494, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 534, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 557, 557, 557, 534, 
	557, 534, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 494, 557, 494, 494, 494, 494, 626, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	557, 557, 494, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 557, 534, 557, 557, 557, 
	557, 557, 557, 557, 557, 557, 557, 557, 
	557, 557, 557, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 557, 557, 557, 
	534, 557, 534, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 494, 557, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 494, 575, 
	494, 494, 494, 494, 494, 494, 494, 494, 
	494, 494, 494, 494, 494, 494, 557, 557, 
	557, 557, 557, 494, 502, 537, 628, 629, 
	629, 629, 628, 629, 629, 629, 629, 630, 
	629, 630, 630, 630, 629, 629, 629, 629, 
	629, 629, 629, 629, 629, 629, 629, 629, 
	628, 629, 629, 629, 629, 629, 630, 629, 
	629, 631, 629, 629, 629, 629, 629, 629, 
	629, 629, 629, 629, 629, 629, 629, 629, 
	629, 629, 629, 629, 629, 629, 629, 629, 
	629, 629, 629, 629, 629, 629, 629, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 629, 632, 629, 629, 627, 629, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 627, 627, 627, 627, 627, 627, 627, 
	627, 629, 629, 629, 629, 629, 627, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 633, 
	86, 633, 633, 633, 633, 633, 633, 633, 
	633, 633, 633, 633, 633, 633, 633, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 87, 633, 633, 633, 633, 86, 633, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 633, 633, 633, 633, 85, 633, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 633, 633, 633, 633, 633, 85, 
	630, 634, 630, 630, 630, 634, 634, 634, 
	634, 634, 634, 634, 634, 634, 634, 634, 
	634, 634, 634, 634, 634, 634, 634, 630, 
	634, 635, 636, 637, 638, 639, 633, 640, 
	642, 643, 643, 643, 642, 643, 643, 643, 
	643, 644, 645, 644, 644, 644, 643, 643, 
	643, 643, 643, 643, 643, 643, 643, 643, 
	643, 643, 642, 643, 643, 643, 643, 643, 
	644, 646, 643, 647, 643, 648, 649, 643, 
	643, 643, 650, 651, 643, 651, 643, 648, 
	643, 643, 643, 643, 643, 643, 643, 643, 
	643, 643, 643, 643, 652, 653, 654, 643, 
	643, 655, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 656, 657, 643, 648, 641, 
	648, 641, 641, 641, 641, 641, 641, 641, 
	641, 641, 641, 641, 641, 641, 641, 641, 
	641, 641, 641, 641, 641, 641, 641, 641, 
	641, 641, 641, 643, 658, 643, 651, 643, 
	641, 659, 659, 659, 659, 659, 659, 659, 
	659, 659, 659, 659, 659, 659, 659, 659, 
	659, 659, 659, 659, 659, 659, 659, 659, 
	659, 659, 659, 659, 659, 659, 659, 659, 
	659, 659, 660, 659, 659, 659, 659, 659, 
	659, 659, 659, 659, 659, 659, 659, 659, 
	659, 641, 641, 641, 641, 641, 641, 641, 
	641, 641, 641, 659, 659, 659, 659, 659, 
	661, 659, 641, 641, 641, 641, 641, 641, 
	641, 641, 641, 641, 641, 641, 641, 641, 
	641, 641, 641, 641, 641, 641, 641, 641, 
	641, 641, 641, 641, 659, 659, 659, 659, 
	641, 659, 641, 641, 641, 641, 641, 641, 
	641, 641, 641, 641, 641, 641, 641, 641, 
	641, 641, 641, 641, 641, 641, 641, 641, 
	641, 641, 641, 641, 659, 659, 659, 659, 
	659, 641, 663, 662, 664, 662, 644, 665, 
	644, 644, 644, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 665, 665, 665, 
	665, 665, 665, 665, 665, 644, 665, 666, 
	648, 667, 667, 648, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 667, 667, 667, 667, 667, 667, 667, 
	667, 648, 667, 668, 669, 670, 671, 648, 
	667, 648, 667, 648, 667, 648, 672, 667, 
	648, 667, 674, 648, 673, 673, 673, 673, 
	673, 673, 673, 673, 673, 673, 673, 673, 
	673, 673, 673, 673, 673, 673, 673, 673, 
	673, 673, 673, 673, 673, 673, 673, 673, 
	673, 673, 673, 673, 673, 673, 673, 673, 
	673, 673, 673, 673, 673, 673, 673, 673, 
	673, 673, 673, 673, 673, 673, 673, 673, 
	673, 673, 673, 673, 673, 673, 673, 673, 
	673, 673, 673, 648, 673, 648, 667, 648, 
	648, 667, 675, 675, 675, 675, 675, 675, 
	675, 675, 675, 675, 675, 675, 675, 675, 
	675, 675, 675, 675, 675, 675, 675, 675, 
	675, 675, 675, 675, 675, 675, 675, 675, 
	675, 675, 675, 660, 675, 675, 675, 675, 
	675, 675, 675, 675, 675, 675, 675, 675, 
	675, 675, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 675, 675, 675, 675, 
	675, 661, 675, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 675, 675, 675, 
	675, 655, 675, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 655, 655, 655, 
	655, 655, 655, 655, 655, 675, 675, 675, 
	675, 675, 655, 674, 673, 645, 673, 648, 
	667, 677, 676, 676, 676, 677, 676, 676, 
	676, 676, 678, 679, 678, 678, 678, 676, 
	676, 676, 676, 676, 676, 676, 676, 676, 
	676, 676, 676, 677, 676, 676, 676, 676, 
	676, 678, 676, 676, 680, 676, 94, 681, 
	676, 682, 676, 683, 94, 125, 684, 127, 
	94, 676, 676, 676, 676, 676, 676, 676, 
	676, 676, 676, 685, 676, 686, 125, 687, 
	688, 676, 676, 676, 676, 676, 676, 676, 
	676, 676, 676, 676, 676, 676, 676, 676, 
	676, 676, 676, 676, 676, 676, 676, 676, 
	676, 676, 676, 676, 125, 689, 125, 94, 
	676, 676, 676, 676, 676, 676, 676, 676, 
	676, 676, 690, 676, 676, 676, 676, 676, 
	676, 676, 676, 691, 676, 676, 692, 676, 
	693, 676, 676, 676, 138, 139, 676, 94, 
	676, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 678, 694, 678, 678, 678, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 694, 694, 694, 694, 694, 
	694, 678, 694, 694, 694, 694, 120, 121, 
	694, 122, 694, 123, 124, 125, 126, 127, 
	120, 694, 694, 694, 694, 694, 694, 694, 
	694, 694, 694, 128, 694, 129, 125, 130, 
	131, 694, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 132, 133, 125, 94, 
	89, 694, 89, 89, 89, 89, 89, 89, 
	89, 89, 134, 89, 89, 89, 89, 89, 
	89, 89, 89, 135, 89, 89, 136, 89, 
	137, 89, 89, 89, 138, 139, 694, 94, 
	694, 89, 695, 696, 696, 696, 695, 696, 
	696, 696, 696, 125, 697, 125, 125, 125, 
	696, 696, 696, 696, 696, 696, 696, 696, 
	696, 696, 696, 696, 695, 696, 696, 696, 
	696, 696, 125, 696, 696, 696, 696, 696, 
	696, 696, 696, 696, 696, 696, 696, 696, 
	696, 696, 696, 696, 696, 696, 696, 696, 
	696, 696, 696, 696, 696, 696, 696, 125, 
	696, 125, 697, 125, 125, 125, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	125, 88, 88, 88, 88, 88, 94, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 125, 88, 125, 
	697, 125, 125, 125, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 125, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 125, 88, 698, 125, 697, 
	125, 125, 125, 699, 699, 699, 699, 699, 
	699, 699, 699, 699, 699, 699, 699, 699, 
	699, 699, 699, 699, 699, 125, 699, 699, 
	699, 699, 699, 699, 699, 699, 699, 700, 
	699, 699, 699, 699, 699, 699, 699, 699, 
	699, 699, 699, 699, 699, 699, 699, 699, 
	699, 699, 125, 699, 125, 697, 125, 125, 
	125, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 125, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	125, 125, 88, 701, 695, 125, 695, 703, 
	702, 705, 706, 705, 705, 705, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	705, 704, 707, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 90, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 91, 695, 695, 
	695, 695, 90, 695, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 695, 695, 
	695, 695, 89, 695, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 695, 695, 
	695, 695, 695, 89, 708, 125, 697, 125, 
	125, 125, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 125, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	695, 125, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	94, 695, 709, 710, 711, 712, 713, 714, 
	125, 697, 125, 125, 125, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 125, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	695, 94, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 695, 695, 695, 695, 
	695, 695, 695, 695, 125, 695, 125, 702, 
	94, 715, 94, 715, 716, 717, 716, 716, 
	716, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 704, 704, 704, 704, 704, 
	704, 704, 704, 716, 704, 718, 715, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	97, 719, 97, 97, 97, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 719, 719, 719, 719, 719, 719, 97, 
	719, 719, 719, 719, 98, 99, 719, 100, 
	719, 101, 102, 103, 104, 105, 98, 719, 
	719, 719, 719, 719, 719, 719, 719, 719, 
	719, 106, 719, 107, 103, 108, 109, 719, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	96, 96, 110, 111, 103, 112, 96, 719, 
	96, 96, 96, 96, 96, 96, 96, 96, 
	113, 96, 96, 96, 96, 96, 96, 96, 
	96, 114, 96, 96, 115, 96, 116, 96, 
	96, 96, 117, 118, 719, 112, 719, 96, 
	125, 715, 720, 715, 721, 715, 722, 715, 
	723, 164, 164, 164, 723, 164, 164, 164, 
	164, 724, 164, 724, 724, 724, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 723, 164, 164, 164, 164, 164, 
	724, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 164, 164, 164, 164, 164, 164, 164, 
	164, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 164, 725, 164, 164, 166, 
	164, 166, 166, 166, 170, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 164, 164, 164, 164, 164, 
	166, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 163, 726, 163, 163, 163, 163, 163, 
	163, 163, 163, 163, 163, 163, 163, 163, 
	163, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 164, 163, 163, 163, 163, 
	726, 163, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 163, 163, 163, 163, 
	166, 163, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 163, 163, 163, 163, 
	163, 166, 727, 727, 727, 727, 727, 727, 
	727, 727, 727, 167, 727, 167, 167, 167, 
	727, 727, 727, 727, 727, 727, 727, 727, 
	727, 727, 727, 727, 727, 727, 727, 727, 
	727, 727, 167, 727, 727, 727, 727, 727, 
	727, 727, 168, 727, 727, 727, 727, 727, 
	727, 727, 727, 727, 727, 727, 727, 727, 
	727, 727, 727, 727, 727, 727, 727, 727, 
	727, 727, 727, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 727, 169, 727, 
	727, 166, 727, 166, 166, 166, 170, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 727, 727, 727, 
	727, 727, 166, 728, 727, 727, 727, 727, 
	727, 727, 727, 727, 727, 727, 727, 727, 
	727, 727, 727, 727, 727, 727, 727, 727, 
	727, 727, 727, 727, 727, 727, 727, 727, 
	727, 727, 727, 727, 727, 726, 727, 727, 
	727, 727, 727, 727, 727, 727, 727, 727, 
	727, 727, 727, 727, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 164, 727, 
	727, 727, 727, 726, 727, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 727, 
	727, 727, 727, 166, 727, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 166, 
	166, 166, 166, 729, 166, 166, 166, 166, 
	166, 166, 166, 166, 166, 166, 166, 727, 
	727, 727, 727, 727, 166, 171, 727, 731, 
	730, 730, 730, 731, 730, 730, 730, 730, 
	732, 730, 732, 732, 732, 730, 730, 730, 
	730, 730, 730, 730, 730, 730, 730, 730, 
	730, 731, 730, 730, 730, 730, 730, 732, 
	730, 730, 733, 730, 730, 730, 730, 730, 
	730, 730, 730, 730, 730, 730, 730, 730, 
	730, 730, 730, 730, 730, 730, 730, 730, 
	730, 730, 730, 730, 730, 730, 730, 730, 
	730, 730, 730, 730, 730, 730, 730, 730, 
	730, 730, 730, 730, 730, 730, 730, 730, 
	730, 730, 730, 730, 730, 730, 730, 730, 
	730, 730, 730, 734, 730, 730, 730, 730, 
	730, 730, 730, 735, 730, 730, 730, 730, 
	730, 730, 730, 730, 730, 730, 730, 730, 
	730, 730, 730, 730, 730, 730, 730, 730, 
	730, 730, 736, 730, 732, 737, 732, 732, 
	732, 737, 737, 737, 737, 737, 737, 737, 
	737, 737, 737, 737, 737, 737, 737, 737, 
	737, 737, 737, 732, 737, 738, 739, 740, 
	741, 743, 742, 744, 745, 742, 746, 748, 
	749, 749, 749, 748, 749, 749, 749, 749, 
	750, 751, 750, 750, 750, 749, 749, 749, 
	749, 749, 749, 749, 749, 749, 749, 749, 
	749, 748, 749, 749, 749, 749, 749, 750, 
	749, 749, 752, 749, 749, 749, 749, 749, 
	749, 749, 749, 749, 749, 749, 749, 749, 
	749, 749, 749, 749, 749, 749, 749, 749, 
	749, 749, 749, 749, 749, 749, 749, 749, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 749, 753, 749, 749, 747, 749, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	754, 747, 747, 747, 747, 747, 747, 747, 
	747, 755, 747, 747, 756, 747, 757, 747, 
	747, 747, 749, 749, 749, 749, 749, 747, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	758, 758, 758, 758, 758, 758, 758, 758, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 758, 758, 758, 758, 758, 758, 
	758, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 758, 758, 758, 758, 747, 
	758, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 758, 758, 758, 758, 758, 
	747, 750, 759, 750, 750, 750, 759, 759, 
	759, 759, 759, 759, 759, 759, 759, 759, 
	759, 759, 759, 759, 759, 759, 759, 759, 
	750, 759, 760, 761, 762, 763, 764, 766, 
	765, 767, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 768, 768, 768, 768, 
	768, 768, 768, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 768, 768, 768, 
	768, 747, 768, 747, 747, 747, 747, 747, 
	769, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 768, 768, 768, 
	768, 768, 747, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 768, 768, 768, 
	768, 768, 768, 768, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 768, 768, 
	768, 768, 747, 768, 747, 747, 747, 747, 
	770, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 768, 768, 
	768, 768, 768, 747, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 768, 768, 
	768, 768, 768, 768, 768, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 768, 
	768, 768, 768, 747, 768, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 771, 
	747, 747, 747, 747, 747, 747, 747, 768, 
	768, 768, 768, 768, 747, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 768, 
	768, 768, 768, 768, 768, 768, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	768, 768, 768, 768, 747, 768, 747, 747, 
	772, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	768, 768, 768, 768, 768, 747, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	768, 768, 768, 768, 768, 768, 768, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 768, 768, 768, 768, 747, 768, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 773, 747, 747, 747, 747, 
	747, 768, 768, 768, 768, 768, 747, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 768, 768, 768, 768, 768, 768, 768, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 768, 768, 768, 768, 747, 768, 
	747, 747, 747, 747, 769, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 768, 768, 768, 768, 768, 747, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 768, 768, 768, 768, 768, 768, 
	768, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 768, 768, 768, 768, 747, 
	768, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 774, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 768, 768, 768, 768, 768, 
	747, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 768, 768, 768, 768, 768, 
	768, 768, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 768, 768, 768, 768, 
	747, 768, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 775, 747, 747, 
	747, 747, 747, 747, 747, 776, 747, 747, 
	747, 747, 747, 747, 768, 768, 768, 768, 
	768, 747, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 768, 768, 768, 768, 
	768, 768, 768, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 768, 768, 768, 
	768, 747, 768, 747, 747, 747, 747, 777, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 768, 768, 768, 
	768, 768, 747, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 768, 768, 768, 
	768, 768, 768, 768, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 768, 768, 
	768, 768, 747, 768, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 778, 747, 
	747, 747, 747, 747, 747, 747, 768, 768, 
	768, 768, 768, 747, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 768, 768, 
	768, 768, 768, 768, 768, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 768, 
	768, 768, 768, 747, 768, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 769, 
	747, 747, 747, 747, 747, 747, 747, 768, 
	768, 768, 768, 768, 747, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 768, 
	768, 768, 768, 768, 768, 768, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	768, 768, 768, 768, 747, 768, 747, 747, 
	747, 747, 747, 747, 747, 747, 779, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	768, 768, 768, 768, 768, 747, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	768, 768, 768, 768, 768, 768, 768, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 768, 768, 768, 768, 747, 768, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 769, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 768, 768, 768, 768, 768, 747, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 768, 768, 768, 768, 768, 768, 768, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 768, 768, 768, 768, 747, 768, 
	747, 747, 747, 747, 747, 747, 747, 780, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 768, 768, 768, 768, 768, 747, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 768, 768, 768, 768, 768, 768, 
	768, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 768, 768, 768, 768, 747, 
	768, 747, 747, 747, 747, 747, 747, 747, 
	747, 781, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 768, 768, 768, 768, 768, 
	747, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 768, 768, 768, 768, 768, 768, 768, 
	768, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 768, 768, 768, 768, 768, 
	768, 768, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 768, 768, 768, 768, 
	747, 768, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 747, 773, 747, 747, 
	747, 747, 747, 747, 747, 747, 747, 747, 
	747, 747, 747, 747, 768, 768, 768, 768, 
	768, 747, 783, 188, 188, 188, 783, 188, 
	188, 188, 188, 784, 785, 784, 784, 784, 
	188, 188, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 783, 188, 188, 188, 
	188, 188, 784, 786, 188, 787, 188, 788, 
	789, 188, 790, 188, 791, 792, 188, 793, 
	794, 795, 188, 188, 188, 188, 188, 188, 
	188, 188, 188, 188, 796, 188, 797, 798, 
	799, 800, 188, 801, 802, 801, 801, 803, 
	801, 801, 801, 801, 801, 801, 801, 801, 
	801, 801, 801, 801, 801, 801, 801, 801, 
	801, 801, 801, 801, 801, 804, 805, 188, 
	806, 807, 188, 808, 809, 810, 811, 812, 
	813, 782, 782, 814, 782, 782, 782, 815, 
	816, 817, 782, 782, 818, 819, 820, 821, 
	782, 822, 782, 823, 782, 824, 825, 188, 
	806, 188, 782, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 233, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 234, 177, 177, 
	235, 177, 236, 177, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 177, 177, 
	177, 177, 782, 177, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 177, 177, 
	177, 177, 177, 782, 827, 826, 826, 828, 
	826, 829, 831, 832, 830, 830, 830, 830, 
	830, 830, 830, 830, 830, 830, 830, 830, 
	830, 830, 830, 830, 830, 830, 830, 830, 
	830, 830, 830, 830, 830, 830, 830, 830, 
	830, 830, 830, 830, 830, 830, 830, 830, 
	830, 830, 830, 830, 830, 830, 830, 830, 
	830, 830, 830, 830, 830, 830, 830, 830, 
	830, 830, 830, 830, 830, 830, 830, 830, 
	830, 830, 830, 833, 830, 835, 834, 836, 
	837, 838, 827, 826, 784, 839, 784, 784, 
	784, 839, 839, 839, 839, 839, 839, 839, 
	839, 839, 839, 839, 839, 839, 839, 839, 
	839, 839, 839, 784, 839, 841, 840, 843, 
	844, 843, 843, 843, 842, 842, 842, 842, 
	842, 842, 842, 842, 842, 842, 842, 842, 
	842, 842, 842, 842, 842, 842, 843, 842, 
	188, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 188, 845, 846, 847, 848, 849, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 851, 851, 851, 851, 851, 851, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 851, 853, 186, 186, 186, 853, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 853, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 186, 186, 186, 186, 186, 
	186, 186, 186, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 186, 186, 186, 
	186, 186, 186, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 187, 187, 187, 
	187, 187, 187, 187, 187, 186, 855, 854, 
	854, 854, 854, 854, 854, 854, 854, 854, 
	854, 854, 854, 854, 854, 854, 854, 854, 
	854, 854, 854, 854, 854, 188, 854, 856, 
	858, 857, 857, 857, 857, 857, 857, 857, 
	857, 857, 857, 857, 857, 857, 857, 857, 
	857, 857, 857, 188, 857, 188, 177, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	859, 854, 854, 854, 188, 854, 859, 859, 
	859, 859, 859, 859, 859, 859, 859, 859, 
	854, 854, 854, 188, 188, 854, 860, 845, 
	188, 845, 845, 861, 861, 861, 845, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 861, 861, 861, 861, 
	861, 861, 861, 861, 845, 861, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 863, 
	864, 845, 865, 191, 866, 864, 845, 845, 
	867, 868, 845, 868, 845, 191, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	869, 845, 870, 871, 872, 845, 873, 862, 
	862, 862, 862, 862, 862, 862, 862, 862, 
	862, 862, 862, 862, 862, 862, 862, 862, 
	862, 862, 862, 862, 862, 862, 862, 862, 
	862, 874, 845, 845, 191, 862, 191, 862, 
	862, 862, 862, 862, 862, 862, 862, 862, 
	862, 862, 862, 862, 862, 862, 862, 862, 
	862, 862, 862, 862, 862, 862, 862, 862, 
	862, 845, 875, 845, 868, 845, 862, 876, 
	876, 876, 876, 876, 876, 876, 876, 876, 
	876, 876, 876, 876, 876, 876, 876, 876, 
	876, 876, 876, 876, 876, 876, 876, 876, 
	876, 876, 876, 876, 876, 876, 876, 876, 
	877, 876, 876, 876, 876, 876, 876, 876, 
	876, 876, 876, 876, 876, 876, 876, 862, 
	862, 862, 862, 862, 862, 862, 862, 862, 
	862, 876, 876, 876, 878, 876, 879, 876, 
	862, 862, 862, 862, 862, 862, 862, 862, 
	862, 862, 862, 862, 862, 862, 862, 862, 
	862, 862, 862, 862, 862, 862, 862, 862, 
	862, 862, 876, 876, 876, 876, 862, 876, 
	862, 862, 862, 862, 862, 862, 862, 862, 
	862, 862, 862, 862, 862, 862, 862, 862, 
	862, 862, 862, 862, 862, 862, 862, 862, 
	862, 862, 876, 876, 876, 876, 876, 862, 
	881, 880, 882, 884, 885, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 883, 883, 883, 883, 
	883, 883, 883, 883, 886, 883, 888, 889, 
	887, 890, 891, 892, 893, 880, 191, 876, 
	876, 191, 876, 876, 876, 876, 876, 876, 
	876, 876, 876, 876, 876, 876, 876, 876, 
	876, 876, 876, 876, 876, 876, 876, 876, 
	876, 876, 876, 876, 876, 876, 876, 876, 
	876, 876, 876, 876, 876, 876, 876, 876, 
	876, 876, 876, 876, 876, 876, 876, 876, 
	876, 876, 876, 876, 876, 876, 876, 876, 
	876, 876, 876, 876, 876, 876, 876, 191, 
	876, 876, 876, 876, 876, 876, 876, 876, 
	876, 876, 876, 876, 876, 876, 876, 876, 
	876, 876, 876, 876, 876, 876, 876, 876, 
	876, 876, 876, 876, 876, 876, 876, 876, 
	876, 876, 876, 876, 876, 876, 876, 876, 
	876, 876, 876, 876, 876, 876, 876, 876, 
	876, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 876, 876, 876, 876, 876, 
	876, 876, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 876, 876, 876, 876, 
	190, 876, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 190, 876, 876, 876, 876, 
	876, 190, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 876, 191, 876, 191, 
	876, 191, 876, 191, 894, 876, 191, 876, 
	191, 876, 191, 191, 876, 191, 876, 895, 
	896, 845, 897, 188, 845, 806, 188, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 188, 845, 
	188, 855, 845, 900, 899, 899, 899, 900, 
	899, 899, 899, 899, 901, 902, 901, 901, 
	901, 899, 899, 899, 899, 899, 899, 899, 
	899, 899, 899, 899, 899, 900, 899, 899, 
	899, 899, 899, 901, 899, 899, 899, 899, 
	899, 899, 899, 899, 899, 899, 899, 899, 
	899, 899, 899, 899, 899, 899, 899, 899, 
	899, 899, 899, 899, 899, 899, 899, 899, 
	899, 899, 899, 899, 903, 903, 903, 903, 
	903, 903, 903, 903, 903, 903, 903, 903, 
	903, 903, 903, 903, 903, 903, 903, 903, 
	903, 903, 903, 903, 903, 903, 899, 904, 
	899, 899, 903, 899, 903, 903, 903, 903, 
	903, 903, 903, 903, 903, 903, 903, 903, 
	903, 903, 903, 903, 903, 903, 903, 903, 
	903, 903, 903, 903, 903, 903, 899, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 905, 905, 905, 905, 905, 905, 905, 
	905, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 905, 905, 905, 905, 906, 
	905, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 906, 906, 906, 906, 906, 
	906, 906, 906, 905, 905, 905, 905, 905, 
	906, 907, 907, 907, 907, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 907, 907, 
	907, 907, 907, 907, 907, 907, 907, 907, 
	907, 908, 908, 908, 908, 908, 908, 908, 
	908, 908, 908, 907, 907, 907, 907, 907, 
	907, 907, 908, 908, 908, 908, 908, 908, 
	908, 908, 908, 908, 908, 908, 908, 908, 
	908, 908, 908, 908, 908, 908, 908, 908, 
	908, 908, 908, 908, 907, 907, 907, 907, 
	908, 907, 908, 908, 908, 908, 908, 908, 
	908, 908, 908, 908, 908, 908, 908, 908, 
	908, 908, 908, 908, 908, 908, 908, 908, 
	908, 908, 908, 908, 907, 907, 907, 907, 
	907, 908, 911, 910, 910, 910, 911, 910, 
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 910, 910, 911, 910, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 912, 912, 912, 912, 912, 912, 
	912, 912, 910, 910, 910, 910, 910, 910, 
	910, 910, 910, 910, 910, 913, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 914, 
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 910, 910, 910, 915, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 916, 
	910, 910, 917, 910, 918, 919, 921, 921, 
	921, 921, 921, 921, 921, 921, 920, 922, 
	922, 922, 922, 922, 922, 922, 922, 920, 
	920, 923, 923, 227, 227, 227, 923, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 923, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 228, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 924, 227, 
	925, 926, 927, 927, 227, 227, 227, 927, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 927, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 228, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 227, 
	227, 227, 227, 227, 227, 227, 227, 928, 
	227, 226, 927, 929, 930, 931, 931, 214, 
	214, 214, 931, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	931, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 215, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 932, 214, 927, 208, 208, 208, 
	927, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 927, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 933, 208, 923, 214, 214, 214, 923, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 923, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 215, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 216, 
	214, 923, 934, 934, 934, 923, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 923, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 935, 934, 936, 
	937, 937, 934, 934, 934, 937, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 937, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 934, 934, 934, 
	934, 934, 934, 934, 934, 938, 934, 937, 
	208, 208, 208, 937, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 937, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 933, 208, 939, 937, 
	937, 214, 214, 214, 937, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 937, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 215, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 216, 214, 940, 941, 
	941, 941, 940, 941, 941, 941, 941, 941, 
	941, 941, 941, 941, 941, 941, 941, 941, 
	941, 941, 941, 941, 941, 941, 941, 941, 
	940, 941, 941, 941, 941, 941, 941, 941, 
	941, 941, 941, 941, 941, 941, 941, 941, 
	941, 941, 941, 941, 941, 941, 942, 942, 
	942, 942, 942, 942, 942, 942, 942, 942, 
	941, 941, 941, 941, 941, 941, 941, 942, 
	942, 942, 942, 942, 942, 941, 941, 941, 
	941, 941, 941, 941, 941, 941, 941, 941, 
	941, 941, 941, 941, 941, 941, 941, 941, 
	941, 941, 941, 941, 941, 941, 941, 942, 
	942, 942, 942, 942, 942, 941, 941, 941, 
	941, 941, 941, 941, 941, 941, 941, 941, 
	941, 941, 941, 941, 941, 941, 941, 941, 
	941, 943, 941, 940, 944, 944, 944, 940, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 940, 944, 940, 
	945, 945, 945, 940, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 940, 945, 940, 946, 946, 946, 940, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 946, 946, 940, 946, 940, 
	940, 944, 944, 944, 940, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 940, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 944, 944, 944, 944, 944, 944, 
	944, 947, 947, 947, 947, 947, 947, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 944, 944, 944, 944, 944, 944, 944, 
	944, 947, 947, 947, 947, 947, 947, 944, 
	940, 945, 945, 945, 940, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 940, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	948, 948, 948, 948, 948, 948, 948, 948, 
	948, 948, 945, 945, 945, 945, 945, 945, 
	945, 948, 948, 948, 948, 948, 948, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 945, 945, 945, 945, 945, 945, 945, 
	945, 948, 948, 948, 948, 948, 948, 945, 
	940, 946, 946, 946, 940, 946, 946, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 940, 946, 946, 946, 946, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	949, 949, 949, 949, 949, 949, 949, 949, 
	949, 949, 946, 946, 946, 946, 946, 946, 
	946, 949, 949, 949, 949, 949, 949, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 949, 949, 949, 949, 949, 949, 946, 
	950, 953, 952, 952, 952, 953, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 953, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 952, 952, 952, 952, 952, 
	952, 952, 954, 954, 954, 954, 954, 954, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 954, 954, 954, 954, 954, 954, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 944, 952, 
	953, 955, 955, 955, 953, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 953, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	956, 956, 956, 956, 956, 956, 956, 956, 
	956, 956, 955, 955, 955, 955, 955, 955, 
	955, 956, 956, 956, 956, 956, 956, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 956, 956, 956, 956, 956, 956, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 957, 955, 953, 
	958, 958, 958, 953, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 953, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 958, 958, 958, 958, 958, 958, 958, 
	959, 959, 959, 959, 959, 959, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	959, 959, 959, 959, 959, 959, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 960, 958, 953, 961, 
	961, 961, 953, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	953, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	961, 961, 961, 961, 961, 961, 961, 962, 
	962, 962, 962, 962, 962, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 962, 
	962, 962, 962, 962, 962, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 953, 961, 953, 961, 961, 
	961, 953, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 953, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 961, 
	961, 961, 961, 961, 961, 961, 962, 962, 
	962, 962, 962, 962, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 962, 962, 
	962, 962, 962, 962, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 953, 961, 963, 953, 962, 962, 
	962, 953, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 953, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 963, 962, 953, 962, 962, 962, 
	953, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 953, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 962, 962, 
	962, 951, 962, 951, 953, 959, 959, 959, 
	953, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 953, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 946, 959, 951, 946, 946, 946, 951, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 946, 946, 946, 946, 946, 
	946, 946, 946, 946, 946, 951, 946, 953, 
	955, 955, 955, 953, 955, 955, 955, 955, 
	964, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 953, 955, 955, 955, 955, 955, 964, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 955, 955, 955, 955, 955, 955, 955, 
	965, 965, 965, 965, 965, 965, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	965, 965, 965, 965, 965, 965, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 966, 955, 953, 961, 
	961, 961, 953, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	953, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 967, 967, 
	967, 967, 967, 967, 967, 967, 967, 967, 
	961, 961, 961, 961, 961, 961, 961, 967, 
	967, 967, 967, 967, 967, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 967, 
	967, 967, 967, 967, 967, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 953, 961, 953, 961, 961, 
	961, 953, 961, 961, 961, 961, 968, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 953, 
	961, 961, 961, 961, 961, 968, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 969, 961, 
	961, 961, 961, 961, 961, 961, 969, 969, 
	969, 969, 969, 969, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 969, 969, 
	969, 969, 969, 969, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 970, 961, 953, 961, 961, 961, 
	953, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 953, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 967, 967, 967, 967, 
	967, 967, 967, 967, 967, 967, 961, 961, 
	961, 961, 961, 961, 961, 967, 967, 967, 
	967, 967, 967, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 967, 967, 967, 
	967, 967, 967, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 953, 961, 953, 961, 961, 961, 953, 
	961, 961, 961, 961, 968, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 953, 961, 961, 
	961, 961, 961, 968, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 961, 961, 961, 
	961, 961, 961, 961, 971, 971, 971, 971, 
	971, 971, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 971, 971, 971, 971, 
	971, 971, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	970, 961, 953, 961, 961, 961, 953, 961, 
	961, 961, 961, 968, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 953, 961, 961, 961, 
	961, 961, 968, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 961, 961, 961, 961, 
	961, 961, 961, 972, 972, 972, 972, 972, 
	972, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 972, 972, 972, 972, 972, 
	972, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 970, 
	961, 953, 961, 961, 961, 953, 961, 961, 
	961, 961, 968, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 953, 961, 961, 961, 961, 
	961, 968, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 973, 973, 973, 973, 973, 973, 973, 
	973, 973, 973, 961, 961, 961, 961, 961, 
	961, 961, 973, 973, 973, 973, 973, 973, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 973, 973, 973, 973, 973, 973, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 970, 961, 
	953, 961, 961, 961, 953, 961, 961, 961, 
	961, 968, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 953, 961, 961, 961, 961, 961, 
	968, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 961, 961, 961, 961, 961, 961, 
	961, 974, 974, 974, 974, 974, 974, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 974, 974, 974, 974, 974, 974, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 970, 961, 953, 
	961, 961, 961, 953, 961, 961, 961, 961, 
	968, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 953, 961, 961, 961, 961, 961, 968, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 961, 961, 961, 961, 961, 961, 961, 
	975, 975, 975, 975, 975, 975, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	975, 975, 975, 975, 975, 975, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 970, 961, 953, 961, 
	961, 961, 953, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	953, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	961, 961, 961, 961, 961, 961, 961, 975, 
	975, 975, 975, 975, 975, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 975, 
	975, 975, 975, 975, 975, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 961, 961, 
	961, 961, 961, 963, 961, 976, 953, 958, 
	958, 958, 953, 958, 958, 958, 958, 968, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	953, 958, 958, 958, 958, 958, 968, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	958, 958, 958, 958, 958, 958, 958, 971, 
	971, 971, 971, 971, 971, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 971, 
	971, 971, 971, 971, 971, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 970, 958, 977, 978, 980, 
	980, 980, 980, 980, 980, 980, 980, 980, 
	980, 979, 979, 979, 979, 979, 979, 979, 
	980, 980, 980, 980, 980, 980, 979, 979, 
	979, 979, 979, 979, 979, 979, 979, 979, 
	979, 979, 979, 979, 979, 979, 979, 979, 
	979, 979, 979, 979, 979, 979, 979, 979, 
	980, 980, 980, 980, 980, 980, 979, 979, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	177, 233, 177, 177, 177, 177, 177, 177, 
	177, 177, 177, 177, 177, 177, 177, 177, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 234, 177, 177, 235, 177, 236, 
	177, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 177, 177, 177, 177, 232, 
	177, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 177, 177, 177, 177, 177, 
	232, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 233, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 234, 845, 845, 235, 845, 
	236, 845, 232, 232, 232, 232, 981, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 845, 845, 845, 845, 
	232, 845, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 845, 845, 845, 845, 
	845, 232, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 233, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 234, 845, 845, 235, 
	845, 236, 845, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	982, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 845, 845, 845, 
	845, 232, 845, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 232, 232, 232, 
	232, 232, 232, 232, 232, 845, 845, 845, 
	845, 845, 232, 983, 984, 845, 840, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	233, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 234, 985, 985, 235, 985, 236, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 986, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 985, 782, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 233, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 234, 985, 985, 235, 985, 236, 
	985, 782, 782, 782, 782, 987, 988, 782, 
	782, 782, 782, 782, 989, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 782, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 985, 
	782, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 233, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 234, 985, 985, 235, 985, 
	236, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 990, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	782, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	985, 782, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 233, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 234, 985, 985, 235, 
	985, 236, 985, 782, 782, 991, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 782, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 985, 782, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 233, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 234, 985, 985, 
	235, 985, 236, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 992, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 782, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 985, 782, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 233, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 234, 985, 
	985, 235, 985, 236, 985, 782, 782, 782, 
	993, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 782, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 985, 782, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 233, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 234, 
	985, 985, 235, 985, 236, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 994, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 782, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 985, 782, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 233, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	234, 985, 985, 235, 985, 236, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 995, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 782, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 985, 782, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	233, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 234, 985, 985, 235, 985, 236, 985, 
	782, 782, 782, 782, 782, 782, 996, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 782, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 985, 782, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 233, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 234, 985, 985, 235, 985, 236, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 997, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 985, 
	782, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 233, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 234, 985, 985, 235, 985, 
	236, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	998, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	985, 782, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 233, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 234, 985, 985, 235, 
	985, 236, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 999, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 782, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 985, 782, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 233, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 234, 985, 985, 
	235, 985, 236, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 1000, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 782, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 985, 782, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 233, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 234, 985, 
	985, 235, 985, 236, 985, 782, 782, 782, 
	782, 996, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 782, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 985, 782, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 233, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 234, 
	985, 985, 235, 985, 236, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 1001, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 782, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 985, 782, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 233, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	234, 985, 985, 235, 985, 236, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 1000, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 782, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 985, 782, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	233, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 234, 985, 985, 235, 985, 236, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 782, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 1002, 782, 1003, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 985, 782, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 233, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 234, 985, 985, 235, 985, 236, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 782, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 1004, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 985, 
	782, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 233, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 234, 985, 985, 235, 985, 
	236, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	782, 985, 1005, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	985, 782, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 233, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 234, 985, 985, 235, 
	985, 236, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 782, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 998, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 985, 782, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 233, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 234, 985, 985, 
	235, 985, 236, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 782, 985, 782, 782, 782, 998, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 985, 782, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 233, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 234, 985, 
	985, 235, 985, 236, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 782, 985, 782, 782, 782, 
	782, 1006, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 1007, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 985, 782, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 233, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 234, 
	985, 985, 235, 985, 236, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 782, 985, 782, 782, 
	782, 782, 782, 782, 1008, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 985, 782, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 233, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	234, 985, 985, 235, 985, 236, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 782, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 1009, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 985, 782, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	233, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 234, 985, 985, 235, 985, 236, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 782, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 998, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 985, 782, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 233, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 234, 985, 985, 235, 985, 236, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 782, 
	985, 782, 782, 782, 782, 1010, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 985, 
	782, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 233, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 234, 985, 985, 235, 985, 
	236, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	782, 985, 1011, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	985, 782, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 233, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 234, 985, 985, 235, 
	985, 236, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 782, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 998, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 985, 782, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 233, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 234, 985, 985, 
	235, 985, 236, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 782, 985, 1012, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 1013, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 985, 782, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 233, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 234, 985, 
	985, 235, 985, 236, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 782, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 1014, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 985, 782, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 233, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 234, 
	985, 985, 235, 985, 236, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 782, 985, 782, 782, 
	782, 782, 998, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 985, 782, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 233, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	234, 985, 985, 235, 985, 236, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 782, 985, 1015, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 985, 782, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	233, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 234, 985, 985, 235, 985, 236, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 782, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 1005, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 985, 782, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 233, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 234, 985, 985, 235, 985, 236, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 782, 
	985, 782, 782, 782, 782, 1016, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 998, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 985, 
	782, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 233, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 234, 985, 985, 235, 985, 
	236, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	782, 985, 782, 782, 782, 782, 782, 998, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	985, 782, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 233, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 234, 985, 985, 235, 
	985, 236, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 782, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 1017, 782, 
	1018, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 985, 782, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 233, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 234, 985, 985, 
	235, 985, 236, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 782, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 1019, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 985, 782, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 233, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 234, 985, 
	985, 235, 985, 236, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 782, 985, 782, 782, 782, 
	782, 998, 782, 782, 782, 1016, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 985, 782, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 233, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 234, 
	985, 985, 235, 985, 236, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 782, 985, 782, 782, 
	782, 998, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	1020, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 985, 782, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 233, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	234, 985, 985, 235, 985, 236, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 782, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 1021, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 985, 782, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	233, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 234, 985, 985, 235, 985, 236, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 782, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 1014, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 985, 782, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 233, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 234, 985, 985, 235, 985, 236, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 782, 
	985, 1022, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 817, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 985, 
	782, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 233, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 234, 985, 985, 235, 985, 
	236, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	782, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 1012, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	985, 782, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 233, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 234, 985, 985, 235, 
	985, 236, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 782, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 998, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 985, 782, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 233, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 234, 985, 985, 
	235, 985, 236, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 782, 985, 782, 782, 782, 782, 
	782, 1023, 782, 782, 782, 782, 782, 782, 
	782, 998, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 985, 782, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 233, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 234, 985, 
	985, 235, 985, 236, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 782, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 1024, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 985, 782, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 233, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 234, 
	985, 985, 235, 985, 236, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 782, 985, 782, 782, 
	782, 1025, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 985, 782, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 233, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	234, 985, 985, 235, 985, 236, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 782, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 1026, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 985, 782, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	233, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 234, 985, 985, 235, 985, 236, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 782, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 1014, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 985, 782, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 233, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 234, 985, 985, 235, 985, 236, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 782, 
	985, 782, 782, 782, 782, 1027, 782, 782, 
	782, 1028, 782, 782, 782, 782, 782, 1029, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 985, 
	782, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 233, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 234, 985, 985, 235, 985, 
	236, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	782, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 1029, 782, 782, 985, 985, 985, 985, 
	985, 782, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 233, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 234, 985, 985, 235, 
	985, 236, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 782, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 998, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 985, 782, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 233, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 234, 985, 985, 
	235, 985, 236, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 782, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 998, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 985, 782, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 233, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 234, 985, 
	985, 235, 985, 236, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 782, 985, 782, 782, 782, 
	782, 1030, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 985, 782, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 233, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 234, 
	985, 985, 235, 985, 236, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 782, 985, 782, 782, 
	782, 1031, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	1032, 1033, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 985, 782, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 233, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	234, 985, 985, 235, 985, 236, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 782, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 998, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 985, 782, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	233, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 234, 985, 985, 235, 985, 236, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 782, 985, 
	782, 782, 1034, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 985, 782, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 233, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 234, 985, 985, 235, 985, 236, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 782, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 1035, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 985, 
	782, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 233, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 234, 985, 985, 235, 985, 
	236, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	782, 985, 782, 782, 782, 782, 1036, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	985, 782, 1037, 1037, 1037, 1037, 1037, 1037, 
	1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 
	1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 
	1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 
	1037, 1037, 1037, 1039, 1037, 1037, 1037, 1037, 
	1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 
	1037, 1037, 1038, 1038, 1038, 1038, 1038, 1038, 
	1038, 1038, 1038, 1038, 1040, 1037, 1037, 1041, 
	1037, 1042, 1037, 1038, 1038, 1038, 1038, 1038, 
	1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 
	1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 
	1038, 1038, 1038, 1038, 1038, 1037, 1037, 1037, 
	1037, 1038, 1037, 1038, 1038, 1038, 1038, 1038, 
	1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 
	1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 
	1038, 1038, 1038, 1038, 1038, 1037, 1037, 1037, 
	1037, 1037, 1038, 831, 1043, 830, 830, 830, 
	830, 830, 830, 830, 830, 830, 830, 830, 
	830, 830, 830, 830, 830, 830, 830, 830, 
	830, 830, 830, 830, 830, 830, 830, 830, 
	830, 830, 830, 830, 830, 830, 830, 830, 
	830, 830, 830, 830, 830, 830, 830, 830, 
	830, 830, 830, 830, 830, 830, 830, 830, 
	830, 830, 830, 830, 830, 830, 830, 830, 
	830, 830, 830, 830, 833, 830, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 233, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	234, 985, 985, 235, 985, 236, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 782, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	1044, 782, 782, 1045, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 985, 782, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	233, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 234, 985, 985, 235, 985, 236, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 782, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	998, 782, 985, 985, 985, 985, 985, 782, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 233, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 234, 985, 985, 235, 985, 236, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 782, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 1009, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 985, 
	782, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 233, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 234, 985, 985, 235, 985, 
	236, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	782, 985, 782, 782, 782, 782, 1046, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 1047, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	985, 782, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 233, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 234, 985, 985, 235, 
	985, 236, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 782, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 1016, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 985, 782, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 233, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 234, 985, 985, 
	235, 985, 236, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 782, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 1048, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 985, 782, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 233, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 234, 985, 
	985, 235, 985, 236, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 782, 985, 782, 782, 782, 
	782, 817, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 985, 782, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 233, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 234, 
	985, 985, 235, 985, 236, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 782, 985, 782, 782, 
	782, 782, 782, 782, 782, 1049, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 1050, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 985, 782, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 233, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	234, 985, 985, 235, 985, 236, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 782, 985, 782, 
	782, 782, 782, 1009, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 985, 782, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	233, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 234, 985, 985, 235, 985, 236, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 782, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 1014, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 985, 782, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 233, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 234, 985, 985, 235, 985, 236, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 782, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 1051, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 985, 
	782, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 233, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 234, 985, 985, 235, 985, 
	236, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	782, 985, 782, 782, 782, 1052, 782, 782, 
	782, 782, 782, 782, 782, 1053, 782, 782, 
	782, 782, 782, 782, 782, 1054, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	985, 782, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 233, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 234, 985, 985, 235, 
	985, 236, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 782, 985, 782, 782, 782, 782, 1016, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 985, 782, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 233, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 234, 985, 985, 
	235, 985, 236, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 782, 985, 782, 782, 782, 782, 
	1055, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 985, 782, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 233, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 234, 985, 
	985, 235, 985, 236, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 782, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 1056, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 985, 782, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 233, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 234, 
	985, 985, 235, 985, 236, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 782, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	1023, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 985, 782, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 233, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	234, 985, 985, 235, 985, 236, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 782, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 1057, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 985, 782, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	233, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 234, 985, 985, 235, 985, 236, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 782, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 1023, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 985, 985, 985, 985, 985, 782, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 233, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 234, 985, 985, 235, 985, 236, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 782, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	1058, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 985, 985, 985, 985, 985, 
	782, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 233, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 234, 985, 985, 235, 985, 
	236, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	782, 985, 782, 782, 782, 782, 1009, 782, 
	782, 782, 1059, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 985, 985, 985, 985, 
	985, 782, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 233, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 234, 985, 985, 235, 
	985, 236, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 782, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 1060, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 985, 985, 985, 
	985, 985, 782, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 233, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 234, 985, 985, 
	235, 985, 236, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 782, 985, 782, 782, 782, 782, 
	1023, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 985, 985, 
	985, 985, 985, 782, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 233, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 234, 985, 
	985, 235, 985, 236, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 782, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 1061, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 985, 
	985, 985, 985, 985, 782, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 233, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 234, 
	985, 985, 235, 985, 236, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 782, 985, 782, 782, 
	782, 782, 1062, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	985, 985, 985, 985, 985, 782, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 233, 
	985, 985, 985, 985, 985, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	234, 985, 985, 235, 985, 236, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 782, 985, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 1003, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 985, 985, 985, 985, 985, 782, 1063, 
	188, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 845, 
	845, 845, 845, 845, 845, 845, 845, 855, 
	845, 1065, 1064, 1064, 1064, 1065, 1064, 1064, 
	1064, 1064, 1066, 1067, 1066, 1066, 1066, 1064, 
	1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 
	1064, 1064, 1064, 1065, 1064, 1064, 1064, 1064, 
	1064, 1066, 1064, 1064, 1068, 1064, 1064, 1064, 
	1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 
	1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 
	1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 
	1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 
	1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 
	1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 
	1064, 1064, 1064, 1064, 1064, 1069, 1064, 1066, 
	1070, 1066, 1066, 1066, 1070, 1070, 1070, 1070, 
	1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 
	1070, 1070, 1070, 1070, 1070, 1070, 1066, 1070, 
	1071, 1072, 1073, 1074, 1075, 1077, 1076, 1078, 
	1080, 1081, 1081, 1081, 1080, 1081, 1081, 1081, 
	1081, 1082, 1083, 1082, 1082, 1082, 1081, 1081, 
	1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 
	1081, 1081, 1080, 1081, 1081, 1081, 1081, 1081, 
	1082, 1081, 1081, 1084, 1081, 1081, 1081, 1081, 
	1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 
	1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 
	1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 
	1081, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 
	1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 
	1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 
	1079, 1079, 1079, 1081, 1085, 1081, 1081, 1079, 
	1081, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 
	1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 
	1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 
	1079, 1079, 1079, 1081, 1081, 1081, 1081, 1081, 
	1079, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 
	1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 
	1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 
	1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 
	1086, 1086, 242, 1086, 1086, 1086, 1086, 1086, 
	1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 
	1086, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 243, 1086, 1086, 1086, 1086, 
	242, 1086, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 1086, 1086, 1086, 1086, 
	241, 1086, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 241, 241, 241, 241, 
	241, 241, 241, 241, 1086, 1086, 1086, 1086, 
	1086, 241, 1082, 1087, 1082, 1082, 1082, 1087, 
	1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 
	1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 
	1087, 1082, 1087, 1088, 1089, 1090, 1091, 1092, 
	1093, 1086, 1094, 1096, 1097, 1097, 1097, 1096, 
	1097, 1097, 1097, 1097, 1098, 1099, 1098, 1098, 
	1098, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 
	1097, 1097, 1097, 1097, 1097, 1096, 1097, 1097, 
	1097, 1097, 1097, 1098, 1100, 1101, 1102, 1103, 
	1104, 1105, 1101, 1106, 1107, 1108, 1104, 1109, 
	1110, 1111, 1104, 1112, 1113, 1113, 1113, 1113, 
	1113, 1113, 1113, 1113, 1113, 1114, 1115, 1116, 
	1117, 1118, 1119, 1120, 1121, 1122, 1121, 1121, 
	1123, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1124, 1125, 
	1126, 1104, 1127, 1101, 1128, 1129, 1130, 1131, 
	1132, 1133, 1095, 1095, 1134, 1095, 1095, 1095, 
	1135, 1136, 1137, 1095, 1095, 1138, 1139, 1140, 
	1141, 1095, 1142, 1095, 1143, 1095, 1144, 1145, 
	1146, 1104, 1097, 1095, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 1147, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 251, 251, 
	251, 251, 251, 1148, 251, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 251, 
	251, 251, 251, 1095, 251, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 251, 
	251, 251, 251, 251, 1095, 1150, 1149, 1151, 
	1152, 1098, 1153, 1098, 1098, 1098, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 
	1098, 1153, 1154, 1156, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1156, 1155, 1157, 1158, 
	1159, 1160, 1161, 1161, 1161, 1161, 1161, 1161, 
	1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 
	1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 
	1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 
	1161, 1161, 1161, 246, 246, 1161, 246, 1161, 
	246, 246, 1161, 1161, 246, 246, 246, 1162, 
	246, 246, 1163, 1163, 1163, 1163, 1163, 1163, 
	1163, 1163, 1163, 1163, 246, 246, 246, 246, 
	246, 246, 246, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 1161, 246, 1161, 
	1161, 254, 246, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 1161, 1161, 1161, 
	246, 1161, 254, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 
	1164, 1164, 1164, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 1164, 1164, 1164, 
	1164, 1164, 1164, 1164, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 1164, 1164, 
	1164, 1164, 254, 1164, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 1164, 1164, 
	1164, 1164, 1164, 254, 1163, 1163, 1163, 1163, 
	1163, 1163, 1163, 1163, 1163, 1163, 1164, 1165, 
	1155, 1104, 1155, 1155, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 
	1165, 1155, 1166, 1167, 1104, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1165, 
	1155, 1165, 1168, 1155, 1170, 1169, 250, 250, 
	250, 250, 250, 250, 250, 250, 250, 250, 
	1169, 1109, 1171, 250, 250, 250, 250, 250, 
	250, 250, 250, 250, 250, 1172, 1172, 1172, 
	1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 
	1173, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 
	1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 
	1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 
	1172, 1172, 1174, 1172, 1172, 1172, 1172, 1172, 
	1173, 1172, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 1172, 1172, 1172, 1172, 
	1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 
	1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 
	1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 
	1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 
	1172, 248, 1172, 1176, 1175, 1177, 1177, 1177, 
	1177, 1177, 1177, 1177, 1177, 1177, 1177, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1178, 
	1175, 1179, 1180, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1181, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1182, 1175, 1175, 
	1175, 1175, 1175, 1175, 1183, 1175, 1175, 1178, 
	1175, 1179, 1180, 1175, 1175, 1175, 1184, 1175, 
	1175, 1175, 1175, 1175, 1181, 1175, 1175, 1185, 
	1175, 1175, 1175, 1175, 1175, 1182, 1175, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 
	1186, 1186, 1186, 1186, 1187, 1186, 1186, 1186, 
	1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 
	1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 
	1186, 1186, 1186, 1186, 1186, 1186, 1188, 1186, 
	1186, 1186, 1186, 1186, 1187, 1186, 1186, 1186, 
	1189, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 
	1186, 1190, 1186, 1191, 251, 1191, 251, 251, 
	253, 253, 253, 253, 253, 253, 253, 253, 
	253, 253, 251, 253, 253, 253, 253, 253, 
	253, 253, 253, 253, 253, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1191, 1192, 1192, 1192, 1192, 1192, 
	1192, 1192, 1192, 1192, 1193, 1192, 1194, 1196, 
	1195, 1197, 1177, 1177, 1177, 1177, 1177, 1177, 
	1177, 1177, 1177, 1177, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1183, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1184, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1185, 1175, 1198, 1198, 
	1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1199, 1175, 1175, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1184, 
	1175, 1175, 1175, 1175, 1175, 1175, 1175, 1175, 
	1185, 1175, 1201, 1201, 1201, 1201, 1201, 1201, 
	1201, 1201, 1201, 1201, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1202, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1203, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1204, 1200, 1201, 1201, 
	1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1205, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1203, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1204, 1200, 1203, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1204, 1200, 1206, 1208, 1207, 
	1209, 1211, 1211, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1212, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1213, 1210, 1210, 1210, 1210, 1210, 
	1210, 1210, 1210, 1214, 1210, 1215, 1215, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1216, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1203, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1204, 
	1200, 1215, 1215, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1205, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1203, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1204, 1200, 1218, 1218, 1218, 
	1218, 1218, 1218, 1218, 1218, 1218, 1218, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1219, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1220, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1221, 
	1217, 1223, 1223, 1223, 1223, 1223, 1223, 1223, 
	1223, 1223, 1223, 1222, 1222, 1222, 1222, 1222, 
	1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 
	1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 
	1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 
	1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 
	1224, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 
	1222, 1222, 1225, 1222, 1222, 1222, 1222, 1222, 
	1222, 1222, 1222, 1226, 1222, 1228, 1228, 1228, 
	1228, 1228, 1228, 1228, 1228, 1228, 1228, 1227, 
	1227, 1227, 1227, 1227, 1227, 1227, 1228, 1228, 
	1228, 1228, 1228, 1228, 1227, 1227, 1227, 1227, 
	1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 
	1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227, 
	1227, 1227, 1227, 1227, 1229, 1227, 1228, 1228, 
	1228, 1228, 1228, 1228, 1227, 1227, 1230, 1227, 
	1227, 1227, 1227, 1227, 1227, 1227, 1227, 1231, 
	1227, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 
	1232, 1232, 1232, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1232, 1232, 1232, 1232, 1232, 1232, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1233, 1200, 1232, 1232, 1232, 1232, 1232, 1232, 
	1200, 1200, 1203, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1204, 1200, 1232, 1232, 1232, 
	1232, 1232, 1232, 1232, 1232, 1232, 1232, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1232, 1232, 
	1232, 1232, 1232, 1232, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1205, 1200, 1232, 1232, 
	1232, 1232, 1232, 1232, 1200, 1200, 1203, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1204, 
	1200, 1235, 1234, 1236, 1236, 1236, 1236, 1236, 
	1236, 1236, 1236, 1236, 1236, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1237, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1238, 1234, 1234, 1234, 1234, 1234, 
	1237, 1234, 1234, 1234, 1239, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1240, 1234, 1241, 
	1241, 1241, 1241, 1241, 1241, 1241, 1241, 1241, 
	1241, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1242, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1239, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 
	1234, 1240, 1234, 1243, 1200, 1244, 1244, 1244, 
	1244, 1244, 1244, 1244, 1244, 1244, 1244, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1245, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1246, 1200, 1200, 1200, 
	1200, 1200, 1245, 1200, 1200, 1200, 1203, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1204, 
	1200, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 
	1244, 1244, 1244, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1205, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1203, 1200, 1200, 1200, 1200, 1200, 
	1200, 1200, 1200, 1204, 1200, 1247, 1171, 1104, 
	1248, 1155, 1156, 1155, 1249, 1156, 1171, 1171, 
	1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 
	1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 
	1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 
	1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 
	1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 
	1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 
	1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 
	1171, 1171, 1171, 1171, 1171, 1156, 1171, 1156, 
	1155, 1156, 1104, 1155, 1161, 1161, 1161, 1161, 
	1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 
	1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 
	1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 
	1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 
	1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 
	1161, 1161, 1161, 1161, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 1161, 1161, 
	1161, 1161, 1161, 1161, 1250, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 1161, 
	1161, 1161, 1161, 254, 1161, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 254, 
	254, 254, 254, 254, 254, 254, 254, 1161, 
	1161, 1161, 1161, 1161, 254, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 1147, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1251, 
	251, 251, 251, 251, 1148, 251, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	251, 251, 251, 251, 1121, 251, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	251, 251, 251, 251, 251, 1121, 1252, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1147, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1251, 1253, 1253, 1253, 1253, 1148, 1253, 
	1121, 1121, 1121, 1121, 1254, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1253, 1253, 1253, 1253, 1121, 1253, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1253, 1253, 1253, 1253, 1253, 1121, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1147, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1251, 1253, 1253, 1253, 1253, 1148, 
	1253, 1121, 1121, 1121, 1121, 1121, 1121, 1255, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1253, 1253, 1253, 1253, 1121, 
	1253, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1253, 1253, 1253, 1253, 1253, 
	1121, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1147, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1251, 1253, 1253, 1253, 1253, 
	1148, 1253, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1256, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1253, 1253, 1253, 1253, 
	1121, 1253, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1253, 1253, 1253, 1253, 
	1253, 1121, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1147, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1251, 1253, 1253, 1253, 
	1253, 1148, 1253, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1257, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1253, 1253, 1253, 
	1253, 1121, 1253, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1253, 1253, 1253, 
	1253, 1253, 1121, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1147, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1251, 1253, 1253, 
	1253, 1253, 1148, 1253, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1258, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1253, 1253, 
	1253, 1253, 1121, 1253, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1253, 1253, 
	1253, 1253, 1253, 1121, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1147, 1253, 1253, 
	1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 
	1253, 1253, 1253, 1253, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1251, 1253, 
	1253, 1253, 1253, 1148, 1253, 1121, 1121, 1121, 
	1257, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1253, 
	1253, 1253, 1253, 1121, 1253, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 
	1121, 1121, 1121, 1121, 1121, 1121, 1121, 1253, 
	1253, 1253, 1253, 1253, 1121, 1259, 1261, 1260, 
	1262, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1147, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1148, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1264, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1095, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1147, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1148, 1263, 1095, 1095, 1095, 1095, 1265, 
	1266, 1095, 1095, 1095, 1095, 1095, 1267, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1095, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1095, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1147, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1148, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1268, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1095, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1095, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1147, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1148, 1263, 1095, 1095, 1269, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1095, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1095, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1147, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1148, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1270, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1095, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1095, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1147, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1148, 1263, 1095, 
	1095, 1095, 1271, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1095, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1095, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1147, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1148, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1272, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1095, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1095, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1147, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1148, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1273, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1095, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1095, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1147, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1148, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1274, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1095, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1095, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1147, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1148, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1275, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1095, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1147, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1148, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1276, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1095, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1147, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1148, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1277, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1095, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1095, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1147, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1148, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1278, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1095, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1095, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1147, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1148, 1263, 1095, 
	1095, 1095, 1095, 1279, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1095, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1095, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1147, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1148, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1280, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1095, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1147, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1148, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1281, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1095, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1147, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1148, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1282, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1095, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1095, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1147, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1148, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1278, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1095, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1095, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1147, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1148, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1095, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1283, 
	1095, 1284, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1095, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1147, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1148, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1095, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1285, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1095, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1147, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1148, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1095, 1263, 1286, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1095, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1147, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1148, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1095, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1287, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1095, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1147, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1148, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1095, 1263, 
	1095, 1095, 1095, 1288, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1095, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1147, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1148, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1095, 
	1263, 1095, 1095, 1095, 1095, 1289, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1290, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1095, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1147, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1148, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1095, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1291, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1095, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1147, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1148, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1095, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1292, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1095, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1147, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1148, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1095, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1288, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1095, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1147, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1148, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1095, 1263, 1095, 1095, 1095, 
	1095, 1293, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1095, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1147, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1148, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1095, 1263, 1294, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1095, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1147, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1148, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1095, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1295, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1095, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1147, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1148, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1095, 1263, 
	1296, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1297, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1095, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1147, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1148, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1095, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1298, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1095, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1147, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1148, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1095, 1263, 1095, 1095, 1095, 1095, 1288, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1095, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1147, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1148, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1095, 1263, 1299, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1095, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1147, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1148, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1095, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1300, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1095, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1147, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1148, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1095, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1301, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1095, 1302, 1302, 1302, 
	1302, 1302, 1302, 1302, 1302, 1302, 256, 257, 
	256, 256, 256, 1302, 1302, 1302, 1302, 1302, 
	1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 
	1302, 1302, 1302, 1302, 1302, 256, 1147, 1302, 
	258, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 
	1302, 1302, 1302, 1302, 1302, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1302, 
	1302, 259, 1302, 1302, 1148, 1302, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1302, 260, 1302, 1302, 1095, 1302, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1302, 1302, 1302, 1302, 1302, 1095, 273, 274, 
	273, 273, 273, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 273, 272, 272, 
	275, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 278, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 277, 272, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1147, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1148, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1095, 1263, 1095, 1095, 1095, 1095, 
	1304, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1305, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1095, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1147, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1148, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1095, 1263, 1095, 1095, 1095, 
	1095, 1095, 1306, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1095, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1147, 1307, 
	1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307, 
	1307, 1307, 1307, 1307, 1307, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1307, 
	1307, 1307, 1307, 1307, 1148, 1307, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1307, 1307, 1307, 1307, 1095, 1307, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1308, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1307, 1307, 1307, 1307, 1307, 1095, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1147, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1148, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1095, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1309, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1095, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1147, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1148, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1095, 1263, 
	1095, 1095, 1095, 1095, 1310, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1095, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1147, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1148, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1095, 
	1263, 1095, 1095, 1095, 1311, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1095, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1147, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1312, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1095, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1095, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1147, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1148, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1095, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1313, 1095, 
	1314, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1095, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1147, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1148, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1095, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1315, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1095, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1147, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1148, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1095, 1263, 1095, 1095, 1095, 
	1095, 1288, 1095, 1095, 1095, 1316, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1095, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1147, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1148, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1095, 1263, 1095, 1095, 
	1095, 1095, 1095, 1288, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1095, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1147, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1148, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1095, 1263, 1095, 
	1095, 1095, 1281, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1317, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1095, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1147, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1148, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1095, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1318, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1095, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1147, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1148, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1095, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1298, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1095, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1147, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1148, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1095, 1263, 1319, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1137, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1095, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1147, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1148, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1095, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1320, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1095, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1147, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1148, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1095, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1321, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1095, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1147, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1148, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1095, 1263, 1095, 1095, 1095, 
	1095, 1281, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1095, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1147, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1148, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1095, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1288, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1095, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1147, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1148, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1095, 1263, 1095, 
	1095, 1095, 1095, 1095, 1322, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1288, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1095, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1147, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1148, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1095, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1323, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1095, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1147, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1148, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1095, 
	1263, 1095, 1095, 1095, 1324, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1095, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1147, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1148, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1095, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1325, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1095, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1147, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1148, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1095, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1298, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1095, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1147, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1148, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1095, 1263, 1095, 1095, 1095, 1095, 
	1326, 1095, 1095, 1095, 1327, 1095, 1095, 1095, 
	1095, 1095, 1328, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1095, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1147, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1148, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1095, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1329, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1095, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1147, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1148, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1095, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1295, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1095, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1147, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1148, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1095, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1281, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1095, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1147, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1148, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1095, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1330, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1095, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1147, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1148, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1095, 
	1263, 1095, 1095, 1095, 1095, 1331, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1095, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1147, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1148, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1095, 1263, 1095, 1095, 1095, 1332, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1333, 1334, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1095, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1147, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1148, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1095, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1281, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1095, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1147, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1148, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1095, 1263, 1095, 1095, 1335, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1095, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1147, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1148, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1095, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1336, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1095, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1147, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1148, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1095, 1263, 1095, 1095, 
	1095, 1095, 1322, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1095, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1147, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1148, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1095, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1337, 1095, 1095, 1338, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1095, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1147, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1148, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1095, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1281, 1095, 1263, 1263, 1263, 1263, 1263, 1095, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1147, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1148, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1095, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1339, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1095, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1147, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1148, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1095, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1295, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1095, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1147, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1148, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1095, 1263, 1095, 1095, 1095, 1095, 1340, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1341, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1095, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1147, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1148, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1095, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1342, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1095, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1147, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1148, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1095, 1263, 1095, 1095, 1095, 
	1095, 1095, 1281, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1095, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1147, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1148, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1095, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1343, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1095, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1147, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1148, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1095, 1263, 1095, 
	1095, 1095, 1095, 1344, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1095, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1147, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1148, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1095, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1330, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1095, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1147, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1148, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1095, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1345, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1346, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1095, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1147, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1148, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1095, 1263, 1095, 1095, 1095, 1095, 1292, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1095, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1147, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1148, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1095, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1321, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1095, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1147, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1148, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1095, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1347, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1095, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1147, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1148, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1095, 1263, 1095, 1095, 1095, 
	1348, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1349, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1350, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1095, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1147, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1148, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1095, 1263, 1095, 1095, 
	1095, 1095, 1351, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1095, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1147, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1148, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1095, 1263, 1095, 
	1095, 1095, 1095, 1095, 1287, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1095, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1147, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1148, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1095, 1263, 
	1095, 1095, 1095, 1095, 1352, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1095, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1147, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1148, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1095, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1353, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1095, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1147, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1148, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1095, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1322, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1095, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1147, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1148, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1095, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1354, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1095, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1147, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1148, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1095, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1322, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1095, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1147, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1148, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1095, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1355, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1095, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1147, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1263, 
	1263, 1263, 1263, 1263, 1148, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1095, 1263, 1095, 1095, 
	1095, 1095, 1292, 1095, 1095, 1095, 1356, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1095, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1147, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1263, 1263, 1263, 1263, 1263, 1148, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1095, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1357, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1095, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1147, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1263, 1263, 1263, 1263, 1263, 1148, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1095, 1263, 
	1095, 1095, 1095, 1095, 1322, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1095, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1147, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1263, 1263, 1263, 1263, 1263, 1148, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1095, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1358, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1095, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1147, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1263, 1263, 1263, 1263, 1263, 
	1148, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1095, 1263, 1095, 1095, 1095, 1095, 1359, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1095, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1147, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1263, 1263, 1263, 1263, 
	1263, 1148, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1095, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1360, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1095, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1147, 1263, 1263, 1263, 
	1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 
	1263, 1263, 1263, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1263, 1263, 1263, 
	1263, 1263, 1148, 1263, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1095, 1263, 1095, 1095, 1095, 1330, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1263, 1263, 
	1263, 1263, 1263, 1095, 1361, 1165, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1155, 1155, 1155, 1155, 
	1155, 1155, 1155, 1155, 1104, 1155, 1362, 1364, 
	1363, 1364, 1364, 1364, 1363, 1363, 1363, 1363, 
	1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 
	1363, 1363, 1363, 1363, 1363, 1363, 1364, 1363, 
	1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 
	1363, 1363, 1363, 1363, 1365, 1363, 282, 1366, 
	282, 282, 282, 1366, 1366, 1366, 1366, 1366, 
	1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 
	1366, 1366, 1366, 1366, 1366, 282, 1366, 1366, 
	1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 
	1366, 1366, 1366, 283, 1366, 1366, 284, 284, 
	284, 1366, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 1366, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 284, 284, 284, 284, 284, 
	284, 284, 284, 1366, 284, 1368, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1369, 1367, 1368, 1367, 1368, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1371, 
	1367, 1368, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1372, 1367, 1368, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367, 
	1367, 1373, 1367, 1375, 1373, 0
]

class << self
	attr_accessor :_lex_trans_targs
	private :_lex_trans_targs, :_lex_trans_targs=
end
self._lex_trans_targs = [
	155, 2, 3, 4, 161, 6, 7, 8, 
	9, 10, 155, 155, 164, 167, 164, 12, 
	168, 14, 164, 175, 176, 179, 180, 186, 
	181, 182, 183, 19, 184, 185, 188, 190, 
	191, 192, 193, 194, 25, 18, 177, 178, 
	27, 228, 229, 231, 233, 231, 30, 234, 
	32, 231, 241, 242, 245, 246, 252, 247, 
	248, 249, 37, 250, 251, 254, 256, 257, 
	258, 259, 260, 43, 36, 243, 244, 45, 
	294, 295, 305, 304, 0, 48, 306, 307, 
	50, 308, 309, 309, 421, 52, 53, 421, 
	450, 54, 55, 450, 450, 454, 454, 59, 
	54, 60, 452, 453, 455, 456, 454, 450, 
	457, 458, 460, 56, 57, 461, 462, 58, 
	454, 61, 62, 67, 74, 464, 465, 60, 
	452, 453, 455, 456, 454, 450, 457, 458, 
	460, 56, 57, 461, 462, 58, 61, 62, 
	67, 74, 464, 465, 463, 63, 64, 65, 
	66, 68, 69, 72, 70, 71, 73, 75, 
	76, 450, 78, 79, 80, 82, 85, 83, 
	84, 86, 88, 481, 481, 481, 482, 90, 
	484, 91, 485, 92, 482, 90, 484, 91, 
	485, 519, 519, 519, 95, 96, 97, 98, 
	531, 519, 519, 536, 519, 519, 558, 519, 
	102, 559, 565, 105, 108, 110, 112, 113, 
	114, 108, 109, 569, 109, 569, 111, 519, 
	583, 584, 587, 588, 594, 589, 590, 591, 
	119, 592, 593, 596, 598, 599, 600, 601, 
	602, 125, 118, 585, 586, 127, 636, 637, 
	129, 521, 93, 523, 528, 131, 132, 639, 
	740, 134, 135, 136, 740, 748, 748, 748, 
	139, 770, 769, 748, 772, 774, 759, 806, 
	145, 146, 147, 151, 152, 145, 146, 147, 
	151, 152, 148, 148, 146, 147, 149, 150, 
	148, 148, 146, 147, 149, 150, 853, 146, 
	748, 922, 153, 154, 922, 155, 155, 156, 
	157, 158, 160, 162, 163, 155, 155, 155, 
	159, 155, 159, 155, 1, 155, 155, 155, 
	5, 164, 164, 165, 164, 166, 169, 164, 
	164, 11, 13, 164, 164, 164, 170, 171, 
	172, 15, 21, 26, 195, 28, 164, 164, 
	164, 173, 174, 164, 16, 164, 164, 164, 
	17, 164, 164, 164, 20, 187, 189, 22, 
	164, 164, 23, 24, 164, 196, 200, 204, 
	197, 198, 199, 201, 202, 203, 164, 164, 
	205, 209, 215, 206, 213, 214, 207, 211, 
	212, 208, 210, 164, 216, 226, 227, 217, 
	218, 219, 225, 220, 221, 222, 223, 224, 
	164, 164, 164, 164, 230, 231, 231, 231, 
	232, 235, 231, 29, 31, 231, 231, 231, 
	236, 237, 238, 33, 39, 44, 261, 46, 
	231, 231, 231, 239, 240, 231, 34, 231, 
	231, 231, 35, 231, 231, 231, 38, 253, 
	255, 40, 231, 231, 41, 42, 231, 262, 
	266, 270, 263, 264, 265, 267, 268, 269, 
	231, 231, 271, 275, 281, 272, 279, 280, 
	273, 277, 278, 274, 276, 231, 282, 292, 
	293, 283, 284, 285, 291, 286, 287, 288, 
	289, 290, 231, 231, 231, 231, 296, 297, 
	297, 298, 297, 299, 297, 297, 297, 300, 
	300, 300, 301, 300, 300, 300, 302, 303, 
	302, 47, 49, 304, 304, 304, 310, 309, 
	309, 311, 312, 313, 314, 316, 309, 319, 
	320, 321, 322, 323, 325, 327, 328, 329, 
	333, 335, 336, 337, 353, 358, 365, 370, 
	377, 384, 387, 388, 392, 386, 396, 404, 
	408, 410, 415, 417, 420, 309, 309, 309, 
	309, 309, 309, 315, 309, 315, 309, 317, 
	51, 318, 309, 309, 309, 324, 326, 309, 
	330, 331, 332, 328, 334, 309, 338, 339, 
	348, 351, 340, 341, 342, 343, 344, 345, 
	346, 347, 310, 349, 350, 352, 354, 357, 
	355, 356, 359, 362, 360, 361, 363, 364, 
	366, 368, 367, 369, 371, 372, 309, 373, 
	374, 375, 376, 309, 378, 381, 379, 380, 
	382, 383, 385, 389, 390, 391, 393, 395, 
	394, 397, 398, 399, 401, 400, 402, 403, 
	405, 406, 407, 409, 411, 412, 413, 414, 
	416, 418, 419, 422, 421, 421, 423, 424, 
	426, 421, 421, 421, 425, 421, 425, 427, 
	421, 429, 428, 428, 433, 434, 435, 436, 
	428, 438, 439, 440, 441, 443, 445, 446, 
	447, 448, 449, 428, 430, 432, 428, 431, 
	428, 428, 428, 428, 428, 437, 428, 437, 
	442, 428, 444, 428, 450, 450, 451, 466, 
	467, 453, 469, 470, 457, 471, 472, 473, 
	474, 475, 477, 478, 479, 480, 450, 450, 
	450, 450, 450, 450, 454, 459, 450, 450, 
	450, 450, 450, 450, 450, 450, 450, 468, 
	450, 468, 450, 450, 450, 450, 476, 450, 
	77, 81, 87, 481, 483, 486, 89, 481, 
	481, 482, 487, 487, 488, 489, 491, 493, 
	494, 487, 487, 490, 487, 490, 487, 492, 
	487, 487, 487, 496, 495, 495, 497, 498, 
	499, 501, 503, 504, 509, 516, 495, 495, 
	495, 495, 500, 495, 500, 495, 502, 495, 
	495, 496, 505, 506, 507, 508, 510, 511, 
	514, 512, 513, 515, 517, 518, 520, 519, 
	529, 530, 532, 533, 535, 537, 538, 539, 
	541, 542, 543, 545, 546, 568, 571, 572, 
	573, 639, 640, 641, 642, 643, 540, 645, 
	661, 666, 673, 678, 680, 686, 689, 690, 
	694, 688, 698, 709, 713, 716, 724, 728, 
	731, 732, 519, 93, 522, 519, 519, 524, 
	526, 527, 519, 525, 519, 519, 519, 519, 
	519, 94, 519, 519, 519, 519, 519, 534, 
	519, 534, 519, 519, 99, 519, 519, 100, 
	519, 519, 540, 519, 544, 519, 547, 557, 
	519, 101, 560, 561, 562, 519, 563, 103, 
	566, 104, 106, 567, 519, 548, 550, 556, 
	519, 549, 519, 519, 551, 554, 555, 519, 
	552, 553, 519, 519, 519, 519, 564, 107, 
	570, 519, 519, 574, 519, 519, 519, 575, 
	577, 519, 576, 519, 576, 519, 578, 579, 
	580, 115, 121, 126, 603, 128, 519, 519, 
	519, 581, 582, 519, 116, 519, 519, 519, 
	117, 519, 519, 519, 120, 595, 597, 122, 
	519, 519, 123, 124, 519, 604, 608, 612, 
	605, 606, 607, 609, 610, 611, 519, 519, 
	613, 617, 623, 614, 621, 622, 615, 619, 
	620, 616, 618, 519, 624, 634, 635, 625, 
	626, 627, 633, 628, 629, 630, 631, 632, 
	519, 519, 519, 519, 638, 130, 133, 519, 
	644, 519, 646, 647, 656, 659, 648, 649, 
	650, 651, 652, 653, 654, 655, 520, 657, 
	658, 660, 662, 665, 663, 664, 667, 670, 
	668, 669, 671, 672, 674, 676, 675, 677, 
	679, 681, 683, 682, 684, 685, 687, 520, 
	691, 692, 693, 695, 697, 696, 699, 700, 
	701, 706, 702, 703, 704, 519, 520, 521, 
	93, 705, 528, 526, 707, 708, 710, 711, 
	712, 714, 715, 717, 718, 719, 722, 720, 
	721, 723, 725, 726, 727, 729, 730, 519, 
	733, 733, 734, 735, 736, 738, 733, 733, 
	733, 737, 733, 737, 733, 739, 733, 741, 
	740, 740, 742, 743, 744, 746, 740, 740, 
	740, 740, 745, 740, 745, 747, 740, 749, 
	748, 748, 753, 754, 755, 748, 756, 758, 
	761, 762, 763, 764, 765, 748, 766, 767, 
	771, 794, 798, 748, 799, 801, 803, 748, 
	804, 805, 807, 811, 813, 814, 748, 816, 
	834, 839, 846, 854, 861, 868, 873, 874, 
	878, 872, 883, 893, 899, 902, 911, 915, 
	919, 920, 921, 750, 752, 748, 751, 748, 
	748, 748, 748, 748, 748, 748, 757, 748, 
	757, 748, 137, 760, 748, 748, 748, 748, 
	748, 748, 768, 748, 748, 138, 140, 748, 
	141, 778, 786, 789, 773, 790, 791, 779, 
	783, 784, 748, 773, 141, 775, 776, 142, 
	748, 775, 748, 748, 777, 748, 780, 782, 
	748, 780, 781, 783, 784, 782, 748, 748, 
	785, 748, 748, 787, 782, 783, 784, 787, 
	788, 748, 780, 782, 783, 784, 748, 780, 
	782, 783, 784, 748, 792, 782, 783, 784, 
	792, 793, 748, 141, 794, 773, 795, 783, 
	784, 796, 782, 141, 796, 773, 797, 748, 
	800, 802, 143, 144, 748, 748, 808, 809, 
	810, 805, 812, 748, 748, 815, 748, 748, 
	817, 818, 827, 832, 819, 820, 821, 822, 
	823, 824, 825, 826, 749, 828, 829, 830, 
	831, 749, 833, 835, 838, 836, 837, 749, 
	749, 840, 843, 841, 842, 844, 845, 749, 
	847, 849, 848, 850, 851, 852, 748, 748, 
	855, 749, 856, 748, 857, 858, 859, 860, 
	752, 862, 865, 863, 864, 866, 867, 869, 
	870, 871, 749, 875, 876, 877, 879, 881, 
	882, 880, 749, 884, 885, 886, 889, 887, 
	888, 890, 891, 892, 894, 896, 895, 897, 
	898, 900, 901, 903, 904, 906, 909, 905, 
	907, 908, 910, 912, 913, 914, 916, 917, 
	918, 748, 748, 922, 923, 924, 922, 926, 
	925, 927, 925, 928, 929, 930, 925, 925
]

class << self
	attr_accessor :_lex_trans_actions
	private :_lex_trans_actions, :_lex_trans_actions=
end
self._lex_trans_actions = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 3, 4, 0, 5, 0, 
	0, 0, 6, 0, 7, 0, 8, 0, 
	7, 0, 0, 0, 0, 8, 7, 0, 
	8, 0, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 9, 0, 10, 0, 0, 
	0, 11, 0, 7, 0, 8, 0, 7, 
	0, 0, 0, 0, 8, 7, 0, 8, 
	0, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 0, 12, 0, 0, 0, 0, 
	0, 0, 13, 14, 15, 0, 0, 16, 
	17, 0, 0, 18, 19, 20, 21, 22, 
	23, 23, 24, 25, 23, 26, 25, 27, 
	25, 23, 23, 24, 23, 28, 23, 23, 
	29, 23, 23, 23, 23, 23, 23, 0, 
	30, 31, 0, 32, 31, 33, 31, 0, 
	0, 30, 0, 34, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 35, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 36, 37, 38, 39, 0, 
	0, 0, 39, 22, 40, 23, 23, 23, 
	40, 41, 42, 43, 0, 0, 0, 0, 
	0, 44, 45, 0, 46, 47, 0, 48, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 49, 49, 50, 0, 22, 0, 51, 
	0, 7, 0, 8, 0, 7, 0, 0, 
	0, 0, 8, 7, 0, 8, 0, 7, 
	7, 0, 0, 0, 0, 0, 0, 0, 
	0, 52, 0, 0, 52, 0, 0, 52, 
	53, 0, 0, 0, 54, 55, 56, 57, 
	0, 7, 7, 58, 59, 59, 0, 0, 
	0, 22, 0, 0, 0, 23, 60, 23, 
	23, 23, 61, 62, 63, 62, 62, 62, 
	0, 64, 65, 64, 64, 64, 66, 67, 
	68, 69, 0, 0, 70, 73, 74, 0, 
	22, 0, 7, 0, 7, 75, 76, 77, 
	61, 78, 0, 79, 0, 80, 81, 82, 
	0, 83, 84, 0, 85, 7, 7, 86, 
	87, 0, 0, 88, 89, 90, 91, 91, 
	91, 91, 91, 91, 91, 91, 92, 93, 
	94, 0, 0, 95, 0, 96, 97, 98, 
	0, 99, 100, 101, 0, 7, 0, 0, 
	102, 103, 0, 22, 104, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 105, 106, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 107, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	108, 109, 110, 111, 0, 112, 113, 114, 
	7, 7, 115, 0, 0, 116, 117, 118, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	119, 120, 121, 0, 0, 122, 0, 123, 
	124, 125, 0, 126, 127, 128, 0, 7, 
	0, 0, 129, 130, 0, 22, 131, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	132, 133, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 134, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 135, 136, 137, 138, 0, 139, 
	140, 0, 141, 0, 142, 143, 144, 145, 
	146, 147, 0, 148, 149, 150, 151, 0, 
	152, 0, 0, 153, 154, 155, 156, 157, 
	158, 0, 22, 0, 0, 7, 159, 0, 
	0, 0, 0, 0, 0, 0, 160, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 161, 162, 163, 
	164, 165, 166, 61, 167, 0, 168, 0, 
	0, 0, 169, 170, 171, 0, 0, 172, 
	0, 0, 0, 173, 0, 174, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 173, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 175, 0, 
	0, 0, 0, 176, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 7, 177, 178, 0, 0, 
	0, 179, 180, 181, 61, 182, 0, 22, 
	183, 0, 184, 185, 0, 22, 0, 0, 
	186, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 187, 0, 0, 188, 0, 
	189, 190, 191, 192, 193, 61, 194, 0, 
	0, 195, 0, 196, 197, 198, 199, 22, 
	0, 21, 0, 0, 21, 0, 0, 0, 
	0, 0, 0, 7, 7, 7, 200, 201, 
	202, 203, 204, 205, 206, 0, 207, 208, 
	209, 210, 211, 212, 213, 214, 215, 61, 
	216, 0, 217, 218, 219, 220, 221, 222, 
	0, 0, 0, 223, 7, 7, 0, 224, 
	225, 226, 227, 228, 0, 0, 0, 0, 
	0, 229, 230, 61, 231, 0, 232, 22, 
	233, 234, 235, 236, 237, 238, 0, 22, 
	0, 0, 0, 0, 0, 0, 239, 240, 
	241, 242, 61, 243, 0, 244, 22, 245, 
	246, 247, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 248, 249, 
	0, 8, 0, 0, 7, 250, 0, 0, 
	0, 0, 0, 0, 7, 7, 0, 251, 
	0, 251, 251, 251, 0, 0, 251, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	0, 251, 252, 253, 0, 254, 255, 0, 
	52, 0, 256, 0, 257, 258, 259, 260, 
	261, 23, 262, 263, 264, 265, 266, 61, 
	267, 0, 268, 269, 0, 270, 271, 0, 
	272, 273, 250, 274, 0, 275, 0, 0, 
	276, 0, 0, 0, 0, 277, 0, 0, 
	0, 0, 0, 0, 278, 0, 0, 0, 
	279, 0, 280, 281, 0, 0, 0, 282, 
	0, 0, 283, 284, 285, 286, 0, 0, 
	0, 287, 288, 0, 289, 290, 291, 0, 
	7, 292, 293, 294, 0, 295, 91, 91, 
	91, 91, 91, 91, 91, 91, 296, 297, 
	298, 0, 0, 299, 0, 300, 301, 302, 
	0, 303, 304, 305, 0, 7, 0, 0, 
	306, 307, 0, 22, 308, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 309, 310, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 311, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	312, 313, 314, 315, 0, 0, 0, 316, 
	22, 317, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 52, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 318, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 319, 320, 321, 322, 
	323, 323, 322, 319, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 324, 
	325, 326, 0, 22, 0, 0, 327, 328, 
	329, 61, 330, 0, 331, 22, 332, 7, 
	333, 334, 0, 22, 0, 0, 335, 336, 
	337, 338, 61, 339, 0, 22, 340, 341, 
	342, 343, 0, 22, 0, 344, 0, 7, 
	0, 0, 0, 0, 0, 345, 0, 0, 
	346, 346, 0, 347, 0, 0, 0, 348, 
	7, 349, 349, 349, 0, 0, 350, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 351, 352, 0, 353, 
	354, 355, 356, 357, 358, 359, 61, 360, 
	0, 361, 0, 0, 362, 363, 364, 365, 
	366, 367, 0, 368, 369, 0, 0, 370, 
	371, 372, 0, 0, 373, 0, 0, 372, 
	374, 374, 375, 376, 0, 377, 377, 0, 
	378, 379, 380, 381, 0, 382, 372, 372, 
	383, 0, 0, 384, 384, 0, 385, 386, 
	0, 387, 388, 389, 389, 390, 390, 0, 
	0, 391, 392, 392, 393, 393, 394, 395, 
	395, 396, 396, 397, 398, 398, 399, 399, 
	0, 0, 400, 401, 402, 403, 404, 405, 
	405, 402, 404, 406, 346, 407, 0, 408, 
	0, 0, 0, 0, 409, 410, 349, 349, 
	349, 411, 349, 412, 413, 22, 414, 415, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 416, 0, 0, 0, 
	0, 411, 0, 0, 0, 0, 0, 417, 
	418, 0, 0, 0, 0, 0, 0, 419, 
	0, 0, 0, 0, 0, 418, 420, 421, 
	0, 422, 0, 423, 0, 0, 0, 0, 
	424, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 425, 0, 0, 0, 0, 0, 
	0, 0, 424, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 426, 427, 428, 7, 0, 429, 0, 
	430, 0, 431, 0, 0, 0, 432, 433
]

class << self
	attr_accessor :_lex_to_state_actions
	private :_lex_to_state_actions, :_lex_to_state_actions=
end
self._lex_to_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 71, 0, 0, 0, 0, 
	0, 0, 0, 0, 71, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 71, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 71, 0, 0, 71, 0, 71, 0, 
	71, 0, 0, 0, 0, 71, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 71, 0, 0, 
	0, 0, 0, 0, 71, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 71, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 71, 0, 0, 0, 0, 0, 71, 
	0, 0, 0, 0, 0, 0, 0, 71, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 71, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 71, 0, 0, 
	0, 0, 0, 0, 71, 0, 0, 0, 
	0, 0, 0, 0, 71, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 71, 0, 0, 71, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_lex_from_state_actions
	private :_lex_from_state_actions, :_lex_from_state_actions=
end
self._lex_from_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 72, 0, 0, 0, 0, 
	0, 0, 0, 0, 72, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 72, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 72, 0, 0, 72, 0, 72, 0, 
	72, 0, 0, 0, 0, 72, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 72, 0, 0, 
	0, 0, 0, 0, 72, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 72, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 72, 0, 0, 0, 0, 0, 72, 
	0, 0, 0, 0, 0, 0, 0, 72, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 72, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 72, 0, 0, 
	0, 0, 0, 0, 72, 0, 0, 0, 
	0, 0, 0, 0, 72, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 72, 0, 0, 72, 0, 0, 
	0, 0, 0
]

class << self
	attr_accessor :_lex_eof_trans
	private :_lex_eof_trans, :_lex_eof_trans=
end
self._lex_eof_trans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 44, 44, 44, 
	44, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 0, 
	0, 0, 0, 83, 85, 85, 89, 89, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 154, 154, 154, 
	154, 154, 154, 154, 154, 154, 154, 154, 
	154, 164, 166, 166, 166, 178, 180, 180, 
	180, 180, 180, 186, 178, 190, 190, 190, 
	190, 190, 190, 190, 190, 190, 190, 190, 
	190, 190, 190, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 178, 190, 190, 190, 190, 241, 241, 
	241, 246, 248, 248, 248, 252, 252, 246, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 282, 282, 0, 294, 295, 296, 298, 
	300, 302, 300, 300, 0, 312, 313, 317, 
	317, 318, 327, 328, 329, 329, 329, 332, 
	332, 334, 335, 336, 336, 336, 338, 339, 
	340, 340, 336, 332, 332, 345, 346, 346, 
	346, 346, 346, 349, 349, 349, 349, 349, 
	349, 349, 349, 359, 360, 360, 360, 360, 
	372, 372, 372, 360, 360, 360, 360, 372, 
	360, 372, 372, 372, 372, 372, 372, 372, 
	372, 385, 372, 386, 387, 388, 388, 0, 
	395, 399, 399, 400, 409, 410, 411, 411, 
	411, 414, 414, 416, 417, 418, 418, 418, 
	420, 421, 422, 422, 418, 414, 414, 427, 
	428, 428, 428, 428, 428, 431, 431, 431, 
	431, 431, 431, 431, 431, 441, 442, 442, 
	442, 442, 454, 454, 454, 442, 442, 442, 
	442, 454, 442, 454, 454, 454, 454, 454, 
	454, 454, 454, 467, 454, 468, 469, 470, 
	470, 0, 477, 478, 0, 484, 0, 489, 
	0, 492, 492, 493, 494, 0, 534, 536, 
	537, 538, 539, 541, 543, 547, 547, 538, 
	538, 538, 548, 538, 538, 543, 538, 538, 
	534, 552, 552, 552, 552, 552, 552, 543, 
	543, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 591, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 538, 0, 634, 635, 
	636, 638, 634, 641, 0, 660, 663, 665, 
	663, 666, 667, 668, 669, 671, 668, 668, 
	668, 668, 668, 674, 668, 668, 676, 674, 
	674, 668, 0, 695, 696, 89, 89, 699, 
	700, 89, 696, 696, 703, 705, 708, 696, 
	709, 696, 710, 711, 713, 715, 696, 703, 
	716, 716, 705, 716, 720, 716, 716, 716, 
	716, 0, 164, 728, 729, 728, 728, 0, 
	738, 739, 741, 743, 745, 743, 747, 0, 
	759, 760, 761, 762, 764, 766, 768, 769, 
	769, 769, 769, 769, 769, 769, 769, 769, 
	769, 769, 769, 769, 769, 769, 769, 0, 
	178, 827, 830, 831, 835, 837, 838, 839, 
	827, 840, 841, 843, 846, 847, 849, 851, 
	854, 855, 857, 858, 178, 855, 855, 846, 
	846, 846, 846, 877, 881, 883, 884, 888, 
	891, 892, 893, 894, 881, 877, 877, 877, 
	877, 877, 877, 877, 877, 877, 877, 877, 
	846, 898, 846, 846, 846, 899, 906, 906, 
	908, 910, 919, 920, 921, 921, 921, 924, 
	924, 926, 927, 928, 928, 928, 930, 931, 
	932, 932, 928, 924, 924, 937, 938, 938, 
	938, 938, 938, 941, 941, 941, 941, 941, 
	941, 941, 941, 951, 952, 952, 952, 952, 
	964, 964, 964, 952, 952, 952, 952, 964, 
	952, 964, 964, 964, 964, 964, 964, 964, 
	964, 977, 964, 978, 979, 980, 980, 178, 
	846, 846, 984, 846, 841, 986, 986, 986, 
	986, 986, 986, 986, 986, 986, 986, 986, 
	986, 986, 986, 986, 986, 986, 986, 986, 
	986, 986, 986, 986, 986, 986, 986, 986, 
	986, 986, 986, 986, 986, 986, 986, 986, 
	986, 986, 986, 986, 986, 986, 986, 986, 
	986, 986, 986, 986, 986, 986, 986, 986, 
	986, 986, 986, 986, 986, 986, 986, 986, 
	1038, 831, 986, 986, 986, 986, 986, 986, 
	986, 986, 986, 986, 986, 986, 986, 986, 
	986, 986, 986, 986, 986, 986, 986, 986, 
	986, 986, 986, 1064, 846, 0, 1071, 1072, 
	1073, 1075, 1077, 1079, 0, 1087, 1088, 1089, 
	1090, 1092, 1087, 1095, 0, 252, 1150, 1152, 
	1153, 1154, 1155, 1156, 1158, 1160, 1162, 1165, 
	1165, 1156, 1156, 1167, 1168, 1156, 1156, 1170, 
	1172, 1173, 1173, 1176, 1187, 252, 1193, 1195, 
	1196, 1198, 1176, 1176, 1201, 1201, 1201, 1207, 
	1208, 1210, 1211, 1201, 1201, 1218, 1223, 1228, 
	1201, 1201, 1235, 1235, 1201, 1201, 1172, 1156, 
	1156, 1172, 1156, 1156, 1162, 252, 1253, 1254, 
	1254, 1254, 1254, 1254, 1254, 1260, 1162, 1263, 
	1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 
	1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 
	1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 
	1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 
	1264, 1264, 1264, 1264, 1303, 1304, 1264, 1264, 
	1308, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 
	1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 
	1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 
	1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 
	1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 
	1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 
	1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 
	1264, 1264, 1264, 1264, 1264, 1264, 1264, 1362, 
	1156, 1363, 0, 1367, 1367, 0, 1371, 1371, 
	1371, 1371, 1375
]

class << self
	attr_accessor :lex_start
end
self.lex_start = 155;
class << self
	attr_accessor :lex_error
end
self.lex_error = 0;

class << self
	attr_accessor :lex_en_interp_words
end
self.lex_en_interp_words = 164;
class << self
	attr_accessor :lex_en_interp_string
end
self.lex_en_interp_string = 231;
class << self
	attr_accessor :lex_en_plain_words
end
self.lex_en_plain_words = 297;
class << self
	attr_accessor :lex_en_plain_string
end
self.lex_en_plain_string = 300;
class << self
	attr_accessor :lex_en_regexp_modifiers
end
self.lex_en_regexp_modifiers = 302;
class << self
	attr_accessor :lex_en_expr_variable
end
self.lex_en_expr_variable = 304;
class << self
	attr_accessor :lex_en_expr_fname
end
self.lex_en_expr_fname = 309;
class << self
	attr_accessor :lex_en_expr_endfn
end
self.lex_en_expr_endfn = 421;
class << self
	attr_accessor :lex_en_expr_dot
end
self.lex_en_expr_dot = 428;
class << self
	attr_accessor :lex_en_expr_arg
end
self.lex_en_expr_arg = 450;
class << self
	attr_accessor :lex_en_expr_cmdarg
end
self.lex_en_expr_cmdarg = 481;
class << self
	attr_accessor :lex_en_expr_endarg
end
self.lex_en_expr_endarg = 487;
class << self
	attr_accessor :lex_en_expr_mid
end
self.lex_en_expr_mid = 495;
class << self
	attr_accessor :lex_en_expr_beg
end
self.lex_en_expr_beg = 519;
class << self
	attr_accessor :lex_en_expr_labelarg
end
self.lex_en_expr_labelarg = 733;
class << self
	attr_accessor :lex_en_expr_value
end
self.lex_en_expr_value = 740;
class << self
	attr_accessor :lex_en_expr_end
end
self.lex_en_expr_end = 748;
class << self
	attr_accessor :lex_en_leading_dot
end
self.lex_en_leading_dot = 922;
class << self
	attr_accessor :lex_en_line_comment
end
self.lex_en_line_comment = 925;
class << self
	attr_accessor :lex_en_line_begin
end
self.lex_en_line_begin = 155;


# line 82 "lib/parser/lexer.rl"
  # %

  ESCAPES = {
    'a' => "\a", 'b'  => "\b", 'e'  => "\e", 'f' => "\f",
    'n' => "\n", 'r'  => "\r", 's'  => "\s", 't' => "\t",
    'v' => "\v", '\\' => "\\"
  }

  attr_reader   :source_buffer
  attr_reader   :encoding

  attr_accessor :diagnostics
  attr_accessor :static_env
  attr_accessor :force_utf32

  attr_accessor :cond, :cmdarg, :in_kwarg

  attr_accessor :tokens, :comments

  def initialize(version)
    @version    = version
    @static_env = nil

    @tokens     = nil
    @comments   = nil

    reset
  end

  def reset(reset_state=true)
    # Ragel state:
    if reset_state
      # Unit tests set state prior to resetting lexer.
      @cs     = self.class.lex_en_line_begin

      @cond   = StackState.new('cond')
      @cmdarg = StackState.new('cmdarg')
      @cond_stack   = []
      @cmdarg_stack = []
    end

    @force_utf32   = false # Set to true by some tests

    @source        = nil # source string
    @source_pts    = nil # @source as a codepoint array
    @encoding      = nil # target encoding for output strings

    @p             = 0   # stream position (saved manually in #advance)
    @ts            = nil # token start
    @te            = nil # token end
    @act           = 0   # next action

    @stack         = []  # state stack
    @top           = 0   # state stack top pointer

    # Lexer state:
    @token_queue   = []
    @literal_stack = []

    @eq_begin_s    = nil # location of last encountered =begin
    @sharp_s       = nil # location of last encountered #

    @newline_s     = nil # location of last encountered newline

    @num_base      = nil # last numeric base
    @num_digits_s  = nil # starting position of numeric digits
    @num_suffix_s  = nil # starting position of numeric suffix
    @num_xfrm      = nil # numeric suffix-induced transformation

    @escape_s      = nil # starting position of current sequence
    @escape        = nil # last escaped sequence, as string

    # See below the section on parsing heredocs.
    @heredoc_e     = nil
    @herebody_s    = nil

    # Ruby 1.9 ->() lambdas emit a distinct token if do/{ is
    # encountered after a matching closing parenthesis.
    @paren_nest    = 0
    @lambda_stack  = []

    # If the lexer is in `command state' (aka expr_value)
    # at the entry to #advance, it will transition to expr_cmdarg
    # instead of expr_arg at certain points.
    @command_state = false

    # True at the end of "def foo a:"
    @in_kwarg      = false
  end

  def source_buffer=(source_buffer)
    @source_buffer = source_buffer

    if @source_buffer
      @source = @source_buffer.source

      if defined?(Encoding)
        @encoding   = @source.encoding

        # This is a workaround for 1.9.2, which (without force_encoding)
        # would convert the result to UTF-8 (source encoding of lexer.rl).
        @source    += "\0".force_encoding(@encoding)
      else
        @source    += "\0"
      end

      if defined?(Encoding) && @source.encoding == Encoding::UTF_8
        @source_pts = @source.unpack('U*')
      else
        @source_pts = @source.unpack('C*')
      end

      if (@source_pts.size > 1_000_000 && @source.respond_to?(:encode)) ||
         @force_utf32
        # A heuristic: if the buffer is larger than 1M, then
        # store it in UTF-32 and convert the tokens as they're
        # going out. If it's smaller, the conversion overhead
        # dominates runtime and this stops being beneficial.
        #
        # This is not really a good heuristic, as the result
        # heavily depends on token/character ratio. If it's low,
        # say the gem consists mostly of long identifiers and
        # symbols, then storing the source in UTF-8 would be faster.
        #
        # Patches accepted.
        @source = @source.encode(Encoding::UTF_32LE)
      end

      if @source_pts[0] == 0xfeff
        # Skip byte order mark.
        @p = 1
      end
    else
      @source     = nil
      @source_pts = nil
    end
  end

  LEX_STATES = {
    :line_begin    => lex_en_line_begin,
    :expr_dot      => lex_en_expr_dot,
    :expr_fname    => lex_en_expr_fname,
    :expr_value    => lex_en_expr_value,
    :expr_beg      => lex_en_expr_beg,
    :expr_mid      => lex_en_expr_mid,
    :expr_arg      => lex_en_expr_arg,
    :expr_cmdarg   => lex_en_expr_cmdarg,
    :expr_end      => lex_en_expr_end,
    :expr_endarg   => lex_en_expr_endarg,
    :expr_endfn    => lex_en_expr_endfn,
    :expr_labelarg => lex_en_expr_labelarg,

    :interp_string => lex_en_interp_string,
    :interp_words  => lex_en_interp_words,
    :plain_string  => lex_en_plain_string,
    :plain_words   => lex_en_plain_string,
  }

  def state
    LEX_STATES.invert.fetch(@cs, @cs)
  end

  def state=(state)
    @cs = LEX_STATES.fetch(state)
  end

  def push_cmdarg
    @cmdarg_stack.push(@cmdarg)
    @cmdarg = StackState.new("cmdarg.#{@cmdarg_stack.count}")
  end

  def pop_cmdarg
    @cmdarg = @cmdarg_stack.pop
  end

  def push_cond
    @cond_stack.push(@cond)
    @cond = StackState.new("cond.#{@cond_stack.count}")
  end

  def pop_cond
    @cond = @cond_stack.pop
  end

  # Return next token: [type, value].
  def advance
    if @token_queue.any?
      return @token_queue.shift
    end

    # Ugly, but dependent on Ragel output. Consider refactoring it somehow.
    _lex_trans_keys         = self.class.send :_lex_trans_keys
    _lex_key_spans          = self.class.send :_lex_key_spans
    _lex_index_offsets      = self.class.send :_lex_index_offsets
    _lex_indicies           = self.class.send :_lex_indicies
    _lex_trans_targs        = self.class.send :_lex_trans_targs
    _lex_trans_actions      = self.class.send :_lex_trans_actions
    _lex_to_state_actions   = self.class.send :_lex_to_state_actions
    _lex_from_state_actions = self.class.send :_lex_from_state_actions
    _lex_eof_trans          = self.class.send :_lex_eof_trans

    p, pe, eof = @p, @source.length + 1, @source.length + 1

    @command_state = (@cs == self.class.lex_en_expr_value ||
                      @cs == self.class.lex_en_line_begin)

    
# line 10668 "lib/parser/lexer.rb"
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if  @cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	case _lex_from_state_actions[ @cs] 
	when 72 then
# line 1 "NONE"
		begin
 @ts = p
		end
# line 10696 "lib/parser/lexer.rb"
	end
	_keys =  @cs << 1
	_inds = _lex_index_offsets[ @cs]
	_slen = _lex_key_spans[ @cs]
	_wide = ( (@source_pts[p] || 0))
	_trans = if (   _slen > 0 && 
			_lex_trans_keys[_keys] <= _wide && 
			_wide <= _lex_trans_keys[_keys + 1] 
		    ) then
			_lex_indicies[ _inds + _wide - _lex_trans_keys[_keys] ] 
		 else 
			_lex_indicies[ _inds + _slen ]
		 end
	end
	if _goto_level <= _eof_trans
	 @cs = _lex_trans_targs[_trans]
	if _lex_trans_actions[_trans] != 0
	case _lex_trans_actions[_trans]
	when 22 then
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 91 then
# line 780 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 23 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
	when 61 then
# line 1119 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
	when 64 then
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 253 then
# line 1163 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 30 then
# line 1421 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 32 then
# line 1437 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 34 then
# line 1465 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 49 then
# line 1649 "lib/parser/lexer.rl"
		begin
 @heredoc_e     = p 		end
	when 293 then
# line 1697 "lib/parser/lexer.rl"
		begin
 @escape = nil 		end
	when 323 then
# line 1766 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 398 then
# line 1980 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
	when 392 then
# line 1981 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
	when 395 then
# line 1982 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
	when 389 then
# line 1983 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
	when 404 then
# line 1984 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
	when 372 then
# line 1985 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
	when 384 then
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 379 then
# line 2043 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 377 then
# line 2044 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 7 then
# line 1 "NONE"
		begin
 @te = p+1
		end
	when 88 then
# line 1031 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    literal.flush_string
    literal.extend_content

    emit(:tSTRING_DBEG, '#{')

    if literal.heredoc?
      literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 740
		_goto_level = _again
		next
	end

   end
		end
	when 5 then
# line 979 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    literal.flush_string
    literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 304
		_goto_level = _again
		next
	end

   end
		end
	when 84 then
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
	when 83 then
# line 829 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if lookahead.respond_to?(:encode)
    end

    if !literal.heredoc? && (token = literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 733;
      else
         @cs = (pop_literal);
      end
       	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 89 then
# line 979 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.flush_string
    literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 304
		_goto_level = _again
		next
	end

   end
		end
	when 86 then
# line 966 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 87 then
# line 829 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if lookahead.respond_to?(:encode)
    end

    if !literal.heredoc? && (token = literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 733;
      else
         @cs = (pop_literal);
      end
       	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 6 then
# line 853 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 4 then
# line 829 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if lookahead.respond_to?(:encode)
    end

    if !literal.heredoc? && (token = literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 733;
      else
         @cs = (pop_literal);
      end
       	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 116 then
# line 1031 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    literal.flush_string
    literal.extend_content

    emit(:tSTRING_DBEG, '#{')

    if literal.heredoc?
      literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 740
		_goto_level = _again
		next
	end

   end
		end
	when 10 then
# line 979 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    literal.flush_string
    literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 304
		_goto_level = _again
		next
	end

   end
		end
	when 113 then
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
	when 112 then
# line 829 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if lookahead.respond_to?(:encode)
    end

    if !literal.heredoc? && (token = literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 733;
      else
         @cs = (pop_literal);
      end
       	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 117 then
# line 979 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.flush_string
    literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 304
		_goto_level = _again
		next
	end

   end
		end
	when 115 then
# line 829 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if lookahead.respond_to?(:encode)
    end

    if !literal.heredoc? && (token = literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 733;
      else
         @cs = (pop_literal);
      end
       	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 11 then
# line 853 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 9 then
# line 829 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if lookahead.respond_to?(:encode)
    end

    if !literal.heredoc? && (token = literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 733;
      else
         @cs = (pop_literal);
      end
       	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 140 then
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
	when 139 then
# line 829 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if lookahead.respond_to?(:encode)
    end

    if !literal.heredoc? && (token = literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 733;
      else
         @cs = (pop_literal);
      end
       	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 142 then
# line 966 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 143 then
# line 829 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if lookahead.respond_to?(:encode)
    end

    if !literal.heredoc? && (token = literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 733;
      else
         @cs = (pop_literal);
      end
       	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 146 then
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
	when 145 then
# line 829 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if lookahead.respond_to?(:encode)
    end

    if !literal.heredoc? && (token = literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 733;
      else
         @cs = (pop_literal);
      end
       	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 148 then
# line 829 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = @source[@ts...@te]
    string = string.encode(@encoding) if string.respond_to?(:encode)

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if lookahead.respond_to?(:encode)
    end

    if !literal.heredoc? && (token = literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 733;
      else
         @cs = (pop_literal);
      end
       	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 151 then
# line 1094 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tREGEXP_OPT, tok(@ts, @te - 1), @ts, @te - 1)
        p = p - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end

       end
		end
	when 152 then
# line 1082 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        unknown_options = tok.scan(/[^imxouesn]/)
        if unknown_options.any?
          diagnostic :error, :regexp_options,
                     { :options => unknown_options.join }
        end

        emit(:tREGEXP_OPT)
         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 12 then
# line 1222 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 153 then
# line 1222 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 155 then
# line 1235 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@@[0-9]/
          diagnostic :error, :cvar_name, { :name => tok }
        end

        emit(:tCVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 154 then
# line 1245 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@[0-9]/
          diagnostic :error, :ivar_name, { :name => tok }
        end

        emit(:tIVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 176 then
# line 1266 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(KEYWORDS_BEGIN[tok]);
            @cs = 421; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 162 then
# line 1274 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tIDENTIFIER)
            @cs = 421; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 14 then
# line 1278 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
            @cs = 748; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 304
		_goto_level = _again
		next
	end
  end
		end
	when 159 then
# line 1287 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 421; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 171 then
# line 1291 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 158 then
# line 1299 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 157 then
# line 514 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 175 then
# line 1266 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(KEYWORDS_BEGIN[tok]);
            @cs = 421; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 172 then
# line 1270 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = 421; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 174 then
# line 1274 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = 421; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 169 then
# line 1278 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
            @cs = 748; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 304
		_goto_level = _again
		next
	end
  end
		end
	when 165 then
# line 1287 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 421; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 170 then
# line 1294 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 163 then
# line 1296 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 168 then
# line 1299 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 13 then
# line 1299 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 161 then
# line 1 "NONE"
		begin
	case  @act
	when 25 then
	begin begin p = (( @te))-1; end
 emit(KEYWORDS_BEGIN[tok]);
            @cs = 421; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 26 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = 421; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 27 then
	begin begin p = (( @te))-1; end
 emit(:tIDENTIFIER)
            @cs = 421; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
end 
			end
	when 16 then
# line 1311 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tLABEL, tok(@ts, @te - 1))
            @cs = 733; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 178 then
# line 1317 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 177 then
# line 514 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 180 then
# line 1314 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 179 then
# line 1317 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 15 then
# line 1317 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 186 then
# line 1343 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 450; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 185 then
# line 1349 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 184 then
# line 514 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 196 then
# line 1328 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 187 then
# line 1332 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 192 then
# line 1343 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 450; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 190 then
# line 1346 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 195 then
# line 1349 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 219 then
# line 1407 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        # Unlike expr_beg as invoked in the next rule, do not warn
        p = @ts - 1
        	begin
		 @cs = 748
		_goto_level = _again
		next
	end

       end
		end
	when 202 then
# line 1425 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if tok(tm, tm + 1) == '/'
          # Ambiguous regexp literal.
          diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
        end

        p = tm - 1
        	begin
		 @cs = 519
		_goto_level = _again
		next
	end

       end
		end
	when 208 then
# line 1449 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 18 then
# line 1457 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 210 then
# line 1466 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 33 then
# line 1475 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 748
		_goto_level = _again
		next
	end

       end
		end
	when 197 then
# line 1489 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 198 then
# line 514 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 209 then
# line 1416 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 205 then
# line 1438 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 519
		_goto_level = _again
		next
	end

       end
		end
	when 207 then
# line 1454 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 201 then
# line 1475 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 748
		_goto_level = _again
		next
	end

       end
		end
	when 200 then
# line 1480 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 218 then
# line 1489 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 19 then
# line 1480 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 35 then
# line 1489 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 17 then
# line 1 "NONE"
		begin
	case  @act
	when 52 then
	begin begin p = (( @te))-1; end

        if tok(tm, tm + 1) == '/'
          # Ambiguous regexp literal.
          diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
        end

        p = tm - 1
        	begin
		 @cs = 519
		_goto_level = _again
		next
	end

      end
	when 53 then
	begin begin p = (( @te))-1; end

        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 519
		_goto_level = _again
		next
	end

      end
	when 58 then
	begin begin p = (( @te))-1; end

        p = @ts - 1
        	begin
		 @cs = 748
		_goto_level = _again
		next
	end

      end
	else
	begin begin p = (( @te))-1; end
end
end 
			end
	when 37 then
# line 1525 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 450
		_goto_level = _again
		next
	end
  end
		end
	when 223 then
# line 514 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 224 then
# line 1525 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 450
		_goto_level = _again
		next
	end
  end
		end
	when 38 then
# line 1525 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1
           	begin
		 @cs = 450
		_goto_level = _again
		next
	end
  end
		end
	when 36 then
# line 1 "NONE"
		begin
	case  @act
	when 65 then
	begin begin p = (( @te))-1; end

        if @cond.active?
          emit(:kDO_COND, 'do', @te - 2, @te)
        else
          emit(:kDO, 'do', @te - 2, @te)
        end
         @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 66 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 450
		_goto_level = _again
		next
	end
 end
end 
			end
	when 234 then
# line 1552 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_do(true)
            @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 227 then
# line 1558 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 228 then
# line 514 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 229 then
# line 1555 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 232 then
# line 1558 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 238 then
# line 1582 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 237 then
# line 514 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 246 then
# line 1574 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 240 then
# line 1576 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 244 then
# line 1582 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 239 then
# line 1 "NONE"
		begin
	case  @act
	when 73 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 74 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
 end
end 
			end
	when 274 then
# line 1599 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = p - 1;
        if tok.start_with? '-'
          emit(:tUMINUS_NUM, '-', @ts, @ts + 1)
           @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 275 then
# line 1619 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type = delimiter = tok[0].chr
        p = p - 1; 	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 269 then
# line 1626 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok[0].chr, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 45 then
# line 1633 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok[0..-2], tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 276 then
# line 1673 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 48 then
# line 1687 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 290 then
# line 1715 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[tok[1]]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 748
		_goto_level = _again
		next
	end

       end
		end
	when 289 then
# line 1725 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 277 then
# line 1761 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 42 then
# line 1781 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = p - 1;

        if version?(18)
          ident = tok(@ts, @te - 2)

          emit((tok[0] =~ /[A-Z]/) ? :tCONSTANT : :tIDENTIFIER,
               ident, @ts, @te - 2)
          p = p - 1; # continue as a symbol

          if !@static_env.nil? && @static_env.declared?(ident)
             @cs = 748;
          else
             @cs = (arg_or_cmdarg);
          end
        else
          emit(:tLABEL, tok(@ts, @te - 2), @ts, @te - 1)
           @cs = 733;
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 263 then
# line 1827 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 155
		_goto_level = _again
		next
	end
  end
		end
	when 46 then
# line 1840 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 249 then
# line 514 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 273 then
# line 1609 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tSTAR)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 270 then
# line 1633 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        type, delimiter = tok[0..-2], tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 268 then
# line 1639 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 278 then
# line 1687 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 288 then
# line 1725 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 294 then
# line 1731 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 748
		_goto_level = _again
		next
	end

       end
		end
	when 271 then
# line 1761 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 317 then
# line 1207 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 260 then
# line 1824 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 262 then
# line 1827 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 155
		_goto_level = _again
		next
	end
  end
		end
	when 265 then
# line 1840 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 44 then
# line 1639 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 51 then
# line 1699 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 43 then
# line 1824 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 47 then
# line 1840 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 41 then
# line 1 "NONE"
		begin
	case  @act
	when 95 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 96 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN, @ts, tm)
           p = tm - 1
            @cs = 495; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 97 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
            @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 99 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 748
		_goto_level = _again
		next
	end
 end
	when 100 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 103 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
 end
end 
			end
	when 325 then
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 326 then
# line 514 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 327 then
# line 1848 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 331 then
# line 1860 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 54 then
# line 1870 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 334 then
# line 1879 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 333 then
# line 514 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 336 then
# line 1873 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 335 then
# line 1879 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 53 then
# line 1879 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 519
		_goto_level = _again
		next
	end
  end
		end
	when 366 then
# line 1890 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_table(PUNCTUATION, @ts, @ts + 2)

        @lambda_stack.push @paren_nest
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 68 then
# line 1927 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:kCLASS, 'class', @ts, @ts + 5)
           emit(:tLSHFT, '<<',    @te - 2, @te)
            @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 344 then
# line 2064 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 56 then
# line 2082 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 304
		_goto_level = _again
		next
	end
  end
		end
	when 408 then
# line 2089 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 358 then
# line 2116 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 350 then
# line 2120 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if %w"} ]".include?(tok)
           @cs = 487;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 363 then
# line 2134 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tOP_ASGN, tok(@ts, @te - 1))
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 348 then
# line 2138 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 345 then
# line 2146 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 347 then
# line 2159 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 413 then
# line 2162 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :error, :bare_backslash, nil, range(@ts, @ts + 1)
        p = p - 1;
       end
		end
	when 343 then
# line 2168 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 342 then
# line 514 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 423 then
# line 1923 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS)
            @cs = 309; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 421 then
# line 1927 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:kCLASS, 'class', @ts, @ts + 5)
           emit(:tLSHFT, '<<',    @te - 2, @te)
            @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 420 then
# line 1938 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS)
            @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 369 then
# line 2014 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 410 then
# line 2074 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 362 then
# line 2082 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 304
		_goto_level = _again
		next
	end
  end
		end
	when 367 then
# line 2089 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 428; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 415 then
# line 1207 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 357 then
# line 2116 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 368 then
# line 2146 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 355 then
# line 2153 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 361 then
# line 2168 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 57 then
# line 2014 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 55 then
# line 2168 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 58 then
# line 1 "NONE"
		begin
	case  @act
	when 115 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'
            emit(:tLAMBEG)
          else # 'do'
            emit(:kDO_LAMBDA)
          end
        else
          if tok == '{'
            emit_table(PUNCTUATION)
          else # 'do'
            emit_do
          end
        end

         @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 116 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 309; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 117 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class', @ts, @ts + 5)
           emit(:tLSHFT, '<<',    @te - 2, @te)
            @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 118 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 119 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 120 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 495; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 121 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'
           @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 450; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 122 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          if !@static_env.nil? && @static_env.declared?(tok)
             @cs = 748;
          else
             @cs = (arg_or_cmdarg);
          end
        else
          emit_table(KEYWORDS)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 123 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 124 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 126 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 127 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 128 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 130 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 134 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 135 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 450; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
end 
			end
	when 70 then
# line 2180 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1;
           	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 428 then
# line 2184 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 155; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 429 then
# line 2184 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 155; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 69 then
# line 2184 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 155; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 432 then
# line 2194 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = 155
		_goto_level = _again
		next
	end

       end
		end
	when 431 then
# line 2202 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :embedded_document, nil,
                   range(@eq_begin_s, @eq_begin_s + '=begin'.length)
       end
		end
	when 81 then
# line 2212 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 925
		_goto_level = _again
		next
	end
  end
		end
	when 2 then
# line 2216 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 73 then
# line 2219 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 740
		_goto_level = _again
		next
	end
  end
		end
	when 74 then
# line 514 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 75 then
# line 2209 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 80 then
# line 2212 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  @eq_begin_s = @ts
           	begin
		 @cs = 925
		_goto_level = _again
		next
	end
  end
		end
	when 79 then
# line 2219 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 740
		_goto_level = _again
		next
	end
  end
		end
	when 1 then
# line 2219 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 740
		_goto_level = _again
		next
	end
  end
		end
	when 67 then
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 85 then
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
	when 114 then
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
	when 141 then
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
	when 147 then
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
	when 220 then
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1407 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        # Unlike expr_beg as invoked in the next rule, do not warn
        p = @ts - 1
        	begin
		 @cs = 748
		_goto_level = _again
		next
	end

       end
		end
	when 211 then
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1466 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 203 then
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1475 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 748
		_goto_level = _again
		next
	end

       end
		end
	when 291 then
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1715 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[tok[1]]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 748
		_goto_level = _again
		next
	end

       end
		end
	when 264 then
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1827 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 155
		_goto_level = _again
		next
	end
  end
		end
	when 433 then
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2194 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = 155
		_goto_level = _again
		next
	end

       end
		end
	when 430 then
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2199 "lib/parser/lexer.rl"
		begin
 @te = p+1
		end
	when 82 then
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2212 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 925
		_goto_level = _again
		next
	end
  end
		end
	when 3 then
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2216 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 386 then
# line 622 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tRATIONAL,  Rational(chars)) } 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 385 then
# line 623 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tIMAGINARY, Complex(0, chars)) } 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 387 then
# line 624 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 380 then
# line 628 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Float(chars))) } 		end
# line 2046 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 381 then
# line 632 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tRATIONAL,  Rational(chars)) } 		end
# line 2046 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 382 then
# line 633 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 2046 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 108 then
# line 648 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        @escape = lambda do
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
        end

        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 135 then
# line 648 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        @escape = lambda do
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
        end

        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 312 then
# line 648 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        @escape = lambda do
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
        end

        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 92 then
# line 671 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 119 then
# line 671 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 296 then
# line 671 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 95 then
# line 676 "lib/parser/lexer.rl"
		begin

    @escape = lambda do
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 122 then
# line 676 "lib/parser/lexer.rl"
		begin

    @escape = lambda do
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 299 then
# line 676 "lib/parser/lexer.rl"
		begin

    @escape = lambda do
      diagnostic :fatal, :invalid_escape
    end
  		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 97 then
# line 697 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 124 then
# line 697 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 301 then
# line 697 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 94 then
# line 704 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 121 then
# line 704 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 298 then
# line 704 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 111 then
# line 708 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 138 then
# line 708 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 315 then
# line 708 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 105 then
# line 711 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 132 then
# line 711 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 309 then
# line 711 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 110 then
# line 716 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_hex_escape, nil,
                     range(@escape_s - 1, p + 2)
        end
      		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 137 then
# line 716 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_hex_escape, nil,
                     range(@escape_s - 1, p + 2)
        end
      		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 314 then
# line 716 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_hex_escape, nil,
                     range(@escape_s - 1, p + 2)
        end
      		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 104 then
# line 731 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 131 then
# line 731 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 308 then
# line 731 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 107 then
# line 745 "lib/parser/lexer.rl"
		begin

          @escape = lambda do
            diagnostic :fatal, :unterminated_unicode, nil,
                       range(p - 1, p)
          end
        		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 134 then
# line 745 "lib/parser/lexer.rl"
		begin

          @escape = lambda do
            diagnostic :fatal, :unterminated_unicode, nil,
                       range(p - 1, p)
          end
        		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 311 then
# line 745 "lib/parser/lexer.rl"
		begin

          @escape = lambda do
            diagnostic :fatal, :unterminated_unicode, nil,
                       range(p - 1, p)
          end
        		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 93 then
# line 774 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 120 then
# line 774 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 297 then
# line 774 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 144 then
# line 780 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 149 then
# line 780 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 60 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 24 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1421 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 26 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1437 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 28 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1465 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 164 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1296 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 183 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1314 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 191 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1346 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 27 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1475 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 748
		_goto_level = _again
		next
	end

       end
		end
	when 222 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1480 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 214 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1486 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 233 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1555 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 245 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1576 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 241 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1579 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 261 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1824 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 332 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1848 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 328 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1851 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
      if @in_kwarg
        p = p - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end

      else
        	begin
		 @cs = 155
		_goto_level = _again
		next
	end

      end
     end
		end
	when 340 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1873 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 337 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1876 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 155
		_goto_level = _again
		next
	end
  end
		end
	when 414 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2153 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 356 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2156 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 922
		_goto_level = _again
		next
	end
  end
		end
	when 76 then
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2209 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 213 then
# line 1003 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    if literal
      literal.start_interp_brace
    end
  		end
# line 1390 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          p = @ts - 1
          	begin
		 @cs = 748
		_goto_level = _again
		next
	end

        else
          emit(:tLCURLY, '{', @te - 1, @te)
           @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 235 then
# line 1003 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    if literal
      literal.start_interp_brace
    end
  		end
# line 1548 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACE_ARG)
            @cs = 740;  end
		end
	when 324 then
# line 1003 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    if literal
      literal.start_interp_brace
    end
  		end
# line 1742 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop
          emit(:tLAMBEG)
        else
          emit_table(PUNCTUATION_BEGIN)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 426 then
# line 1003 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    if literal
      literal.start_interp_brace
    end
  		end
# line 1898 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'
            emit(:tLAMBEG)
          else # 'do'
            emit(:kDO_LAMBDA)
          end
        else
          if tok == '{'
            emit_table(PUNCTUATION)
          else # 'do'
            emit_do
          end
        end

         @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 427 then
# line 1011 "lib/parser/lexer.rl"
		begin

    if literal
      if literal.end_interp_brace_and_try_closing
        if version?(18, 19)
          emit(:tRCURLY, '}', p - 1, p)
        else
          emit(:tSTRING_DEND, '}', p - 1, p)
        end

        if literal.saved_herebody_s
          @herebody_s = literal.saved_herebody_s
        end

        p = p - 1;
         @cs = (stack_pop);
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
    end
  		end
# line 2120 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if %w"} ]".include?(tok)
           @cs = 487;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 62 then
# line 1119 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 65 then
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 167 then
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1296 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 182 then
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1314 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 194 then
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1346 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 216 then
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1483 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 231 then
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1555 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 243 then
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1576 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 267 then
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1824 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 330 then
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1848 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 339 then
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1873 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 360 then
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2153 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 78 then
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2209 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 188 then
# line 1163 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1336 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 279 then
# line 1163 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1679 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 252 then
# line 1163 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1812 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 352 then
# line 1163 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2096 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 450; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 354 then
# line 1163 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1 "NONE"
		begin
	case  @act
	when 115 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'
            emit(:tLAMBEG)
          else # 'do'
            emit(:kDO_LAMBDA)
          end
        else
          if tok == '{'
            emit_table(PUNCTUATION)
          else # 'do'
            emit_do
          end
        end

         @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 116 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 309; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 117 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class', @ts, @ts + 5)
           emit(:tLSHFT, '<<',    @te - 2, @te)
            @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 118 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 119 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 120 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 495; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 121 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'
           @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 450; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 122 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          if !@static_env.nil? && @static_env.declared?(tok)
             @cs = 748;
          else
             @cs = (arg_or_cmdarg);
          end
        else
          emit_table(KEYWORDS)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 123 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 124 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 126 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 127 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 128 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 130 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 134 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 135 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 450; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
end 
			end
	when 189 then
# line 1164 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1336 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 280 then
# line 1164 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1679 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 254 then
# line 1164 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1812 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 353 then
# line 1164 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2096 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 450; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 281 then
# line 1169 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1679 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 255 then
# line 1169 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1812 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 282 then
# line 1170 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1679 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 256 then
# line 1170 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1812 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 286 then
# line 1171 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1679 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 259 then
# line 1171 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1812 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 285 then
# line 1172 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1679 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 258 then
# line 1172 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1 "NONE"
		begin
	case  @act
	when 95 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 96 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN, @ts, tm)
           p = tm - 1
            @cs = 495; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 97 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
            @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 99 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 748
		_goto_level = _again
		next
	end
 end
	when 100 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 103 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 748
		_goto_level = _again
		next
	end
 end
end 
			end
	when 283 then
# line 1173 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 1679 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 257 then
# line 1173 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 1812 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 284 then
# line 1178 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1679 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 409 then
# line 1183 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2078 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT, tok(@ts, tm), @ts, tm)
           p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 212 then
# line 1189 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 1384 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK, '[', @te - 1, @te)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 316 then
# line 1189 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 1756 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 412 then
# line 1189 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 2142 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 204 then
# line 1196 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1365 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if version?(18)
          emit(:tLPAREN2, '(', @te - 1, @te)
           @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
          emit(:tLPAREN_ARG, '(', @te - 1, @te)
           @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 217 then
# line 1196 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1378 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLPAREN2)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 225 then
# line 1196 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1502 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tLPAREN_ARG, '(', @te - 1, @te)
        if version?(18)
           @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 272 then
# line 1196 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1756 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 364 then
# line 1196 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 2116 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 519; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 365 then
# line 1202 "lib/parser/lexer.rl"
		begin

    @paren_nest -= 1
  		end
# line 2120 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if %w"} ]".include?(tok)
           @cs = 487;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 50 then
# line 1649 "lib/parser/lexer.rl"
		begin
 @heredoc_e     = p 		end
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 287 then
# line 1650 "lib/parser/lexer.rl"
		begin
 new_herebody_s = p 		end
# line 1651 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        tok(@ts, @heredoc_e) =~ /^<<(-?)(["'`]?)(.*)\2$/

        indent    = !$1.empty?
        type      =  '<<' + ($2.empty? ? '"' : $2)
        delimiter =  $3

         @cs = (push_literal(type, delimiter, @ts, @heredoc_e, indent));

        if @herebody_s.nil?
          @herebody_s = new_herebody_s
        end

        p = @herebody_s - 1
       end
		end
	when 292 then
# line 1697 "lib/parser/lexer.rl"
		begin
 @escape = nil 		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 320 then
# line 1766 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1767 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS_BEGIN, @ts, tm)
           p = tm - 1
            @cs = 495; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 399 then
# line 1980 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 393 then
# line 1981 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 396 then
# line 1982 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 390 then
# line 1983 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 405 then
# line 1984 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 374 then
# line 1985 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 406 then
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 621 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
	when 8 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 173 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1266 "lib/parser/lexer.rl"
		begin
 @act = 25;		end
	when 160 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1270 "lib/parser/lexer.rl"
		begin
 @act = 26;		end
	when 156 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1274 "lib/parser/lexer.rl"
		begin
 @act = 27;		end
	when 20 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1425 "lib/parser/lexer.rl"
		begin
 @act = 52;		end
	when 206 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1438 "lib/parser/lexer.rl"
		begin
 @act = 53;		end
	when 21 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1475 "lib/parser/lexer.rl"
		begin
 @act = 58;		end
	when 199 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1480 "lib/parser/lexer.rl"
		begin
 @act = 59;		end
	when 226 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1512 "lib/parser/lexer.rl"
		begin
 @act = 65;		end
	when 39 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1525 "lib/parser/lexer.rl"
		begin
 @act = 66;		end
	when 247 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1570 "lib/parser/lexer.rl"
		begin
 @act = 73;		end
	when 236 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1574 "lib/parser/lexer.rl"
		begin
 @act = 74;		end
	when 250 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1761 "lib/parser/lexer.rl"
		begin
 @act = 95;		end
	when 319 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1767 "lib/parser/lexer.rl"
		begin
 @act = 96;		end
	when 318 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1773 "lib/parser/lexer.rl"
		begin
 @act = 97;		end
	when 52 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1812 "lib/parser/lexer.rl"
		begin
 @act = 99;		end
	when 248 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1207 "lib/parser/lexer.rl"
		begin
 @act = 100;		end
	when 251 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1840 "lib/parser/lexer.rl"
		begin
 @act = 103;		end
	when 422 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1898 "lib/parser/lexer.rl"
		begin
 @act = 115;		end
	when 417 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1923 "lib/parser/lexer.rl"
		begin
 @act = 116;		end
	when 425 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1933 "lib/parser/lexer.rl"
		begin
 @act = 118;		end
	when 418 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1938 "lib/parser/lexer.rl"
		begin
 @act = 119;		end
	when 419 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1942 "lib/parser/lexer.rl"
		begin
 @act = 120;		end
	when 424 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1946 "lib/parser/lexer.rl"
		begin
 @act = 121;		end
	when 416 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1957 "lib/parser/lexer.rl"
		begin
 @act = 122;		end
	when 411 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1973 "lib/parser/lexer.rl"
		begin
 @act = 123;		end
	when 346 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @act = 124;		end
	when 376 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2031 "lib/parser/lexer.rl"
		begin
 @act = 127;		end
	when 59 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2046 "lib/parser/lexer.rl"
		begin
 @act = 128;		end
	when 349 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2074 "lib/parser/lexer.rl"
		begin
 @act = 130;		end
	when 341 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1207 "lib/parser/lexer.rl"
		begin
 @act = 134;		end
	when 351 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2096 "lib/parser/lexer.rl"
		begin
 @act = 135;		end
	when 150 then
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 908 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(literal.str_s, literal.str_s + 1)
    end

    if literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, '')

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, '')
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if literal.words? && !eof_codepoint?(@source_pts[p])
      literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      literal.extend_string tok, @ts, @te
      literal.flush_string
    end
   end
		end
# line 780 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 98 then
# line 671 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 682 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 125 then
# line 671 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 682 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 302 then
# line 671 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 682 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 103 then
# line 671 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 686 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 130 then
# line 671 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 686 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 307 then
# line 671 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 686 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 102 then
# line 692 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 686 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 129 then
# line 692 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 686 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 306 then
# line 692 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 686 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 100 then
# line 697 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 686 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 127 then
# line 697 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 686 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 304 then
# line 697 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 686 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 96 then
# line 698 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 682 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 123 then
# line 698 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 682 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 300 then
# line 698 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 682 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 109 then
# line 731 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 648 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        @escape = lambda do
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
        end

        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 136 then
# line 731 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 648 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        @escape = lambda do
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
        end

        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 313 then
# line 731 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 648 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        @escape = lambda do
          diagnostic :error, :unicode_point_too_large, nil,
                     range(codepoint_s, codepoint_s + codepoint_str.length)
        end

        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 106 then
# line 731 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 745 "lib/parser/lexer.rl"
		begin

          @escape = lambda do
            diagnostic :fatal, :unterminated_unicode, nil,
                       range(p - 1, p)
          end
        		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 133 then
# line 731 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 745 "lib/parser/lexer.rl"
		begin

          @escape = lambda do
            diagnostic :fatal, :unterminated_unicode, nil,
                       range(p - 1, p)
          end
        		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 310 then
# line 731 "lib/parser/lexer.rl"
		begin

        @escape = lambda do
          diagnostic :fatal, :invalid_unicode_escape, nil,
                     range(@escape_s - 1, p)
        end
      		end
# line 745 "lib/parser/lexer.rl"
		begin

          @escape = lambda do
            diagnostic :fatal, :unterminated_unicode, nil,
                       range(p - 1, p)
          end
        		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 90 then
# line 780 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 774 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 118 then
# line 780 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 774 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 295 then
# line 780 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 774 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 63 then
# line 1119 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 166 then
# line 1119 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1296 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 181 then
# line 1119 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1314 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 193 then
# line 1119 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1346 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 215 then
# line 1119 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1483 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 748
		_goto_level = _again
		next
	end
  end
		end
	when 230 then
# line 1119 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1555 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 242 then
# line 1119 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1576 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 266 then
# line 1119 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1824 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 329 then
# line 1119 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1848 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 338 then
# line 1119 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1873 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 359 then
# line 1119 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2153 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 77 then
# line 1119 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2209 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 401 then
# line 1984 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 621 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
	when 371 then
# line 1985 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 621 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
	when 383 then
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 621 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 378 then
# line 2043 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 627 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 2046 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 375 then
# line 2044 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 627 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 2046 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 221 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 488 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1480 "lib/parser/lexer.rl"
		begin
 @act = 59;		end
	when 29 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1475 "lib/parser/lexer.rl"
		begin
 @act = 58;		end
	when 40 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1525 "lib/parser/lexer.rl"
		begin
 @act = 66;		end
	when 66 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1122 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1927 "lib/parser/lexer.rl"
		begin
 @act = 117;		end
	when 31 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1437 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1438 "lib/parser/lexer.rl"
		begin
 @act = 53;		end
	when 322 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1766 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1812 "lib/parser/lexer.rl"
		begin
 @act = 99;		end
	when 321 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1766 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1207 "lib/parser/lexer.rl"
		begin
 @act = 100;		end
	when 402 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1984 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @act = 124;		end
	when 101 then
# line 671 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 682 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 686 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 128 then
# line 671 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 682 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 686 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 305 then
# line 671 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 682 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 686 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 99 then
# line 698 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 682 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 686 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 126 then
# line 698 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 682 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 686 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 853 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    if literal.nest_and_try_closing('\\', @ts, @ts + 1)
      # If the literal is actually closed by the backslash,
      # rewind the input prior to consuming the escape sequence.
      p = @escape_s - 1
       @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      # Get the first character after the backslash.
      escaped_char = @source[@escape_s].chr

      if literal.munge_escape? escaped_char
        # If this particular literal uses this character as an opening
        # or closing delimiter, it is an escape sequence for that
        # particular character. Write it without the backslash.

        if literal.regexp? && "\\$()*+.<>?[]^{|}".include?(escaped_char)
          # Regular expressions should include escaped delimiters in their
          # escaped form, except when the escaped character is
          # a closing delimiter but not a regexp metacharacter.
          #
          # The backslash itself cannot be used as a closing delimiter
          # at the same time as an escape symbol, but it is always munged,
          # so this branch also executes for the non-closing-delimiter case
          # for the backslash.
          literal.extend_string(tok, @ts, @te)
        else
          literal.extend_string(escaped_char, @ts, @te)
        end
      else
        # It does not. So this is an actual escape sequence, yay!
        # Two things to consider here.
        #
        # 1. The `escape' rule should be pure and so won't raise any
        #    errors by itself. Instead, it stores them in lambdas.
        #
        # 2. Non-interpolated literals do not go through the aforementioned
        #    rule. As \\ and \' (and variants) are munged, the full token
        #    should always be written for such literals.

        @escape.call if @escape.respond_to? :call

        if literal.regexp?
          # Regular expressions should include escape sequences in their
          # escaped form. On the other hand, escaped newlines are removed.
          literal.extend_string(tok.gsub("\\\n", ''), @ts, @te)
        else
          literal.extend_string(@escape || tok, @ts, @te)
        end
      end
    end
   end
		end
	when 303 then
# line 698 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 682 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 686 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1699 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        # Show an error if memorized.
        @escape.call if @escape.respond_to? :call

        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 748; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 397 then
# line 1980 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 621 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 391 then
# line 1981 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 621 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 394 then
# line 1982 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 621 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 388 then
# line 1983 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 621 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 400 then
# line 1984 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 621 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 370 then
# line 1985 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 621 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? '_'
          diagnostic :error, :trailing_in_number, { :character => '_' },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 25 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 820 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1437 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1438 "lib/parser/lexer.rl"
		begin
 @act = 53;		end
	when 407 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 621 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 2019 "lib/parser/lexer.rl"
		begin
 @act = 126;		end
	when 403 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1984 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 621 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 2019 "lib/parser/lexer.rl"
		begin
 @act = 126;		end
	when 373 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1985 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 1986 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 621 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars|  emit(:tINTEGER,   chars) } 		end
# line 2019 "lib/parser/lexer.rl"
		begin
 @act = 126;		end
# line 21275 "lib/parser/lexer.rb"
	end
	end
	end
	if _goto_level <= _again
	case _lex_to_state_actions[ @cs] 
	when 71 then
# line 1 "NONE"
		begin
 @ts = nil;		end
# line 21285 "lib/parser/lexer.rb"
	end

	if  @cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	if _lex_eof_trans[ @cs] > 0
		_trans = _lex_eof_trans[ @cs] - 1;
		_goto_level = _eof_trans
		next;
	end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

# line 289 "lib/parser/lexer.rl"
    # %

    @p = p

    if @token_queue.any?
      @token_queue.shift
    elsif @cs == self.class.lex_error
      [ false, [ '$error', range(p - 1, p) ] ]
    else
      [ false, [ '$eof',   range(p, p)     ] ]
    end
  end

  protected

  def eof_codepoint?(point)
    [0x04, 0x1a, 0x00].include? point
  end

  def version?(*versions)
    versions.include?(@version)
  end

  def stack_pop
    @top -= 1
    @stack[@top]
  end

  if "".respond_to?(:encode)
    def encode_escape(ord)
      ord.chr.force_encoding(@encoding)
    end

    def tok(s = @ts, e = @te)
      @source[s...e].encode(@encoding)
    end
  else
    def encode_escape(ord)
      ord.chr
    end

    def tok(s = @ts, e = @te)
      @source[s...e]
    end
  end

  def range(s = @ts, e = @te)
    Parser::Source::Range.new(@source_buffer, s, e)
  end

  def emit(type, value = tok, s = @ts, e = @te)
    token = [ type, [ value, range(s, e) ] ]

    @token_queue.push(token)

    @tokens.push(token) if @tokens

    token
  end

  def emit_table(table, s = @ts, e = @te)
    value = tok(s, e)

    emit(table[value], value, s, e)
  end

  def emit_do(do_block=false)
    if @cond.active?
      emit(:kDO_COND)
    elsif @cmdarg.active? || do_block
      emit(:kDO_BLOCK)
    else
      emit(:kDO)
    end
  end

  def arg_or_cmdarg
    if @command_state
      self.class.lex_en_expr_cmdarg
    else
      self.class.lex_en_expr_arg
    end
  end

  def emit_comment(s = @ts, e = @te)
    if @comments
      @comments.push(Parser::Source::Comment.new(range(s, e)))
    end

    if @tokens
      @tokens.push([ :tCOMMENT, [ tok(s, e), range(s, e) ] ])
    end

    nil
  end

  def diagnostic(type, reason, arguments=nil, location=range, highlights=[])
    @diagnostics.process(
        Parser::Diagnostic.new(type, reason, arguments, location, highlights))
  end

  #
  # === LITERAL STACK ===
  #

  def push_literal(*args)
    new_literal = Literal.new(self, *args)
    @literal_stack.push(new_literal)

    if new_literal.words?
      if new_literal.interpolate?
        self.class.lex_en_interp_words
      else
        self.class.lex_en_plain_words
      end
    else
      if new_literal.interpolate?
        self.class.lex_en_interp_string
      else
        self.class.lex_en_plain_string
      end
    end
  end

  def literal
    @literal_stack.last
  end

  def pop_literal
    old_literal = @literal_stack.pop

    if old_literal.type == :tREGEXP_BEG
      # Fetch modifiers.
      self.class.lex_en_regexp_modifiers
    else
      self.class.lex_en_expr_end
    end
  end

  # Mapping of strings to parser tokens.

  PUNCTUATION = {
    '='   => :tEQL,     '&'   => :tAMPER2,  '|'   => :tPIPE,
    '!'   => :tBANG,    '^'   => :tCARET,   '+'   => :tPLUS,
    '-'   => :tMINUS,   '*'   => :tSTAR2,   '/'   => :tDIVIDE,
    '%'   => :tPERCENT, '~'   => :tTILDE,   ','   => :tCOMMA,
    ';'   => :tSEMI,    '.'   => :tDOT,     '..'  => :tDOT2,
    '...' => :tDOT3,    '['   => :tLBRACK2, ']'   => :tRBRACK,
    '('   => :tLPAREN2, ')'   => :tRPAREN,  '?'   => :tEH,
    ':'   => :tCOLON,   '&&'  => :tANDOP,   '||'  => :tOROP,
    '-@'  => :tUMINUS,  '+@'  => :tUPLUS,   '~@'  => :tTILDE,
    '**'  => :tPOW,     '->'  => :tLAMBDA,  '=~'  => :tMATCH,
    '!~'  => :tNMATCH,  '=='  => :tEQ,      '!='  => :tNEQ,
    '>'   => :tGT,      '>>'  => :tRSHFT,   '>='  => :tGEQ,
    '<'   => :tLT,      '<<'  => :tLSHFT,   '<='  => :tLEQ,
    '=>'  => :tASSOC,   '::'  => :tCOLON2,  '===' => :tEQQ,
    '<=>' => :tCMP,     '[]'  => :tAREF,    '[]=' => :tASET,
    '{'   => :tLCURLY,  '}'   => :tRCURLY,  '`'   => :tBACK_REF2,
    '!@'  => :tBANG,
  }

  PUNCTUATION_BEGIN = {
    '&'   => :tAMPER,   '*'   => :tSTAR,    '**'  => :tDSTAR,
    '+'   => :tUPLUS,   '-'   => :tUMINUS,  '::'  => :tCOLON3,
    '('   => :tLPAREN,  '{'   => :tLBRACE,  '['   => :tLBRACK,
  }

  KEYWORDS = {
    'if'     => :kIF_MOD,      'unless'   => :kUNLESS_MOD,
    'while'  => :kWHILE_MOD,   'until'    => :kUNTIL_MOD,
    'rescue' => :kRESCUE_MOD,  'defined?' => :kDEFINED,
    'BEGIN'  => :klBEGIN,      'END'      => :klEND,
  }

  KEYWORDS_BEGIN = {
    'if'     => :kIF,          'unless'   => :kUNLESS,
    'while'  => :kWHILE,       'until'    => :kUNTIL,
    'rescue' => :kRESCUE,      'defined?' => :kDEFINED,
  }

  %w(class module def undef begin end then elsif else ensure case when
     for break next redo retry in do return yield super self nil true
     false and or not alias __FILE__ __LINE__ __ENCODING__).each do |keyword|
    KEYWORDS_BEGIN[keyword] = KEYWORDS[keyword] = :"k#{keyword.upcase}"
  end

  
# line 2224 "lib/parser/lexer.rl"

  # %
end
