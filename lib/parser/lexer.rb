# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-

# line 1 "lib/parser/lexer.rl"

# line 3 "lib/parser/lexer.rl"
#
# === BEFORE YOU START ===
#
# Read the Ruby Hacking Guide chapter 11, available in English at
# http://whitequark.org/blog/2013/04/01/ruby-hacking-guide-ch-11-finite-state-lexer/
#
# Remember two things about Ragel scanners:
#
#   1) Longest match wins.
#
#   2) If two matches have the same length, the first
#      in source code wins.
#
# General rules of making Ragel and Bison happy:
#
#  * `p` (position) and `@te` contain the index of the character
#    they're pointing to ("current"), plus one. `@ts` contains the index
#    of the corresponding character. The code for extracting matched token is:
#
#       @source[@ts...@te]
#
#  * If your input is `foooooooobar` and the rule is:
#
#       'f' 'o'+
#
#    the result will be:
#
#       foooooooobar
#       ^ ts=0   ^ p=te=9
#
#  * A Ragel lexer action should not emit more than one token, unless
#    you know what you are doing.
#
#  * All Ragel commands (fnext, fgoto, ...) end with a semicolon.
#
#  * If an action emits the token and transitions to another state, use
#    these Ragel commands:
#
#       emit($whatever)
#       fnext $next_state; fbreak;
#
#    If you perform `fgoto` in an action which does not emit a token nor
#    rewinds the stream pointer, the parser's side-effectful,
#    context-sensitive lookahead actions will break in a hard to detect
#    and debug way.
#
#  * If an action does not emit a token:
#
#       fgoto $next_state;
#
#  * If an action features lookbehind, i.e. matches characters with the
#    intent of passing them to another action:
#
#       p = @ts - 1
#       fgoto $next_state;
#
#    or, if the lookbehind consists of a single character:
#
#       fhold; fgoto $next_state;
#
#  * Ragel merges actions. So, if you have `e_lparen = '(' %act` and
#    `c_lparen = '('` and a lexer action `e_lparen | c_lparen`, the result
#    _will_ invoke the action `act`.
#
#    e_something stands for "something with **e**mbedded action".
#
#  * EOF is explicit and is matched by `c_eof`. If you want to introspect
#    the state of the lexer, add this rule to the state:
#
#       c_eof => do_eof;
#
#  * If you proceed past EOF, the lexer will complain:
#
#       NoMethodError: undefined method `ord' for nil:NilClass
#

class Parser::Lexer

  
# line 85 "lib/parser/lexer.rb"
class << self
	attr_accessor :_lex_trans_keys
	private :_lex_trans_keys, :_lex_trans_keys=
end
self._lex_trans_keys = [
	0, 0, 101, 101, 103, 103, 
	105, 105, 110, 110, 69, 
	69, 78, 78, 68, 68, 
	95, 95, 95, 95, 0, 26, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 45, 
	0, 77, 0, 77, 0, 92, 
	0, 26, 0, 26, 0, 
	45, 0, 99, 0, 26, 
	67, 99, 45, 45, 0, 92, 
	0, 77, 0, 102, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 45, 0, 77, 
	0, 77, 0, 92, 0, 
	26, 0, 26, 0, 45, 
	0, 99, 0, 26, 67, 99, 
	45, 45, 0, 92, 0, 
	77, 0, 102, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 58, 58, 0, 127, 
	58, 58, 60, 60, 62, 
	62, 10, 10, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 115, 115, 99, 99, 
	117, 117, 101, 101, 108, 
	116, 101, 101, 115, 115, 
	115, 115, 105, 105, 108, 108, 
	105, 105, 108, 108, 58, 
	58, 0, 127, 10, 10, 
	0, 127, 58, 58, 98, 98, 
	101, 101, 103, 103, 105, 
	105, 110, 110, 0, 122, 
	61, 61, 0, 127, 0, 127, 
	61, 126, 0, 127, 0, 
	127, 93, 93, 0, 127, 
	0, 127, 10, 10, 10, 34, 
	10, 10, 10, 39, 0, 
	127, 10, 96, 0, 45, 
	0, 77, 0, 77, 0, 92, 
	0, 26, 0, 26, 0, 
	45, 0, 99, 0, 26, 
	67, 99, 45, 45, 0, 92, 
	0, 77, 0, 102, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	58, 58, 58, 58, 0, 
	127, 43, 57, 48, 57, 
	48, 57, 48, 57, 48, 57, 
	0, 127, 58, 58, 9, 
	92, 9, 92, 9, 92, 
	9, 92, 9, 92, 9, 92, 
	60, 60, 10, 10, 9, 
	46, 46, 46, 0, 95, 
	9, 32, 0, 0, 10, 10, 
	10, 10, 98, 98, 9, 
	32, 10, 10, 95, 95, 
	0, 92, 9, 32, 36, 123, 
	0, 127, 48, 57, 0, 
	120, 0, 0, 0, 0, 
	48, 55, 48, 55, 0, 0, 
	0, 0, 0, 92, 0, 
	0, 0, 0, 0, 0, 
	0, 92, 45, 45, 0, 0, 
	0, 0, 0, 0, 0, 
	92, 0, 45, 0, 92, 
	0, 92, 0, 0, 0, 0, 
	0, 92, 0, 45, 10, 
	10, 0, 92, 0, 123, 
	0, 26, 0, 26, 0, 26, 
	0, 0, 0, 102, 0, 
	102, 0, 102, 0, 0, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	0, 0, 125, 0, 125, 
	0, 0, 0, 125, 0, 26, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 
	125, 0, 0, 48, 102, 
	0, 0, 0, 92, 36, 123, 
	0, 127, 48, 57, 0, 
	120, 0, 0, 0, 0, 
	48, 55, 48, 55, 0, 0, 
	0, 0, 0, 92, 0, 
	0, 0, 0, 0, 0, 
	0, 92, 45, 45, 0, 0, 
	0, 0, 0, 0, 0, 
	92, 0, 45, 0, 92, 
	0, 92, 0, 0, 0, 0, 
	0, 92, 0, 45, 10, 
	10, 0, 92, 0, 123, 
	0, 26, 0, 26, 0, 26, 
	0, 0, 0, 102, 0, 
	102, 0, 102, 0, 0, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	0, 0, 125, 0, 125, 
	0, 0, 0, 125, 0, 26, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 0, 0, 
	125, 0, 0, 48, 102, 
	0, 0, 0, 92, 9, 32, 
	0, 26, 0, 92, 0, 
	26, 0, 35, 36, 123, 
	0, 127, 48, 57, 0, 26, 
	65, 122, 65, 122, 36, 
	64, 0, 127, 48, 57, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 9, 32, 0, 
	0, 61, 126, 10, 10, 
	10, 10, 0, 127, 0, 127, 
	48, 57, 38, 38, 42, 
	42, 64, 64, 58, 58, 
	60, 61, 62, 62, 61, 126, 
	61, 61, 61, 62, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 93, 93, 10, 
	10, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 124, 124, 0, 127, 
	0, 127, 9, 32, 10, 
	10, 10, 10, 10, 10, 
	0, 0, 0, 127, 0, 127, 
	61, 61, 0, 0, 0, 
	0, 9, 32, 0, 0, 
	61, 126, 10, 10, 10, 10, 
	38, 38, 42, 42, 64, 
	64, 60, 61, 62, 62, 
	61, 126, 61, 61, 61, 62, 
	0, 127, 93, 93, 10, 
	10, 124, 124, 0, 126, 
	0, 127, 0, 61, 9, 61, 
	9, 61, 0, 0, 9, 
	61, 9, 62, 46, 46, 
	46, 46, 58, 58, 9, 32, 
	0, 0, 0, 127, 0, 
	0, 9, 124, 0, 0, 
	10, 10, 10, 10, 0, 0, 
	9, 61, 58, 58, 60, 
	60, 62, 62, 9, 32, 
	10, 10, 0, 127, 102, 102, 
	101, 101, 110, 110, 104, 
	104, 0, 127, 0, 127, 
	0, 127, 0, 0, 0, 127, 
	10, 10, 0, 123, 9, 
	32, 10, 10, 10, 10, 
	10, 10, 0, 0, 111, 111, 
	0, 0, 0, 127, 0, 
	127, 9, 32, 0, 0, 
	10, 10, 10, 10, 10, 10, 
	0, 0, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 58, 61, 0, 0, 
	61, 126, 61, 61, 0, 0, 
	0, 0, 0, 0, 58, 
	58, 9, 32, 61, 61, 
	9, 32, 61, 126, 10, 10, 
	10, 10, 65, 122, 0, 
	122, 38, 61, 0, 0, 
	42, 61, 61, 61, 48, 61, 
	48, 62, 46, 46, 46, 
	46, 0, 26, 0, 127, 
	0, 127, 61, 61, 0, 0, 
	61, 126, 61, 62, 0, 
	0, 0, 0, 0, 0, 
	0, 0, 0, 0, 61, 126, 
	0, 127, 48, 57, 38, 
	38, 42, 42, 64, 64, 
	60, 61, 62, 62, 61, 61, 
	61, 62, 124, 124, 60, 
	61, 0, 0, 62, 62, 
	61, 126, 61, 62, 0, 122, 
	0, 0, 0, 127, 0, 
	127, 0, 120, 0, 0, 
	0, 0, 48, 55, 48, 55, 
	0, 0, 0, 0, 0, 
	92, 0, 0, 0, 0, 
	0, 0, 0, 92, 45, 45, 
	0, 0, 0, 0, 0, 
	0, 0, 92, 0, 45, 
	0, 92, 0, 92, 0, 0, 
	0, 0, 0, 92, 0, 
	45, 10, 10, 0, 92, 
	0, 123, 0, 26, 0, 26, 
	0, 26, 0, 0, 0, 
	102, 0, 102, 0, 102, 
	0, 0, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 0, 0, 125, 
	0, 125, 0, 0, 0, 125, 
	0, 26, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 
	125, 0, 125, 0, 125, 
	0, 125, 0, 125, 0, 0, 
	0, 0, 48, 102, 0, 
	0, 0, 127, 0, 127, 
	0, 127, 0, 0, 10, 10, 
	0, 0, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	61, 126, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 0, 
	61, 124, 0, 92, 9, 
	32, 0, 0, 10, 10, 
	10, 10, 10, 10, 0, 0, 
	0, 127, 0, 127, 9, 
	32, 0, 0, 10, 10, 
	10, 10, 10, 10, 0, 0, 
	0, 127, 0, 127, 61, 
	61, 0, 0, 0, 0, 
	9, 32, 0, 0, 61, 126, 
	10, 10, 10, 10, 0, 
	127, 0, 127, 48, 57, 
	61, 61, 38, 61, 0, 0, 
	0, 0, 42, 61, 61, 
	62, 46, 57, 46, 46, 
	48, 101, 48, 95, 46, 120, 
	48, 114, 43, 57, 48, 
	105, 0, 0, 105, 105, 
	0, 0, 48, 114, 48, 114, 
	48, 114, 48, 114, 105, 
	114, 0, 0, 105, 105, 
	0, 0, 48, 114, 48, 114, 
	48, 114, 48, 114, 48, 
	114, 48, 114, 48, 114, 
	48, 114, 46, 114, 48, 114, 
	46, 114, 48, 114, 58, 
	58, 60, 61, 62, 62, 
	61, 126, 61, 61, 61, 62, 
	0, 127, 0, 127, 0, 
	0, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 0, 10, 
	10, 0, 0, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 9, 92, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 127, 
	0, 127, 0, 127, 0, 
	127, 0, 0, 61, 124, 
	0, 0, 9, 46, 9, 46, 
	46, 46, 10, 61, 10, 
	10, 10, 101, 10, 110, 
	10, 100, 10, 10, 0
]

class << self
	attr_accessor :_lex_key_spans
	private :_lex_key_spans, :_lex_key_spans=
end
self._lex_key_spans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 27, 128, 128, 128, 128, 46, 
	78, 78, 93, 27, 27, 46, 100, 27, 
	33, 1, 93, 78, 103, 128, 128, 128, 
	128, 46, 78, 78, 93, 27, 27, 46, 
	100, 27, 33, 1, 93, 78, 103, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 1, 128, 1, 1, 1, 1, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 1, 1, 1, 1, 9, 1, 1, 
	1, 1, 1, 1, 1, 1, 128, 1, 
	128, 1, 1, 1, 1, 1, 1, 123, 
	1, 128, 128, 66, 128, 128, 1, 128, 
	128, 1, 25, 1, 30, 128, 87, 46, 
	78, 78, 93, 27, 27, 46, 100, 27, 
	33, 1, 93, 78, 103, 128, 128, 128, 
	128, 128, 128, 1, 1, 128, 15, 10, 
	10, 10, 10, 128, 1, 84, 84, 84, 
	84, 84, 84, 1, 1, 38, 1, 96, 
	24, 0, 1, 1, 1, 24, 1, 1, 
	93, 24, 88, 128, 10, 121, 0, 0, 
	8, 8, 0, 0, 93, 0, 0, 0, 
	93, 1, 0, 0, 0, 93, 46, 93, 
	93, 0, 0, 93, 46, 1, 93, 124, 
	27, 27, 27, 0, 103, 103, 103, 0, 
	126, 126, 126, 126, 126, 0, 126, 126, 
	0, 126, 27, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 0, 126, 0, 55, 
	0, 93, 88, 128, 10, 121, 0, 0, 
	8, 8, 0, 0, 93, 0, 0, 0, 
	93, 1, 0, 0, 0, 93, 46, 93, 
	93, 0, 0, 93, 46, 1, 93, 124, 
	27, 27, 27, 0, 103, 103, 103, 0, 
	126, 126, 126, 126, 126, 0, 126, 126, 
	0, 126, 27, 126, 126, 126, 126, 126, 
	126, 126, 126, 126, 0, 126, 0, 55, 
	0, 93, 24, 27, 93, 27, 36, 88, 
	128, 10, 27, 58, 58, 29, 128, 10, 
	128, 128, 128, 128, 24, 0, 66, 1, 
	1, 128, 128, 10, 1, 1, 1, 1, 
	2, 1, 66, 1, 2, 128, 128, 128, 
	128, 128, 128, 128, 1, 1, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 1, 128, 128, 24, 1, 1, 1, 
	0, 128, 128, 1, 0, 0, 24, 0, 
	66, 1, 1, 1, 1, 1, 2, 1, 
	66, 1, 2, 128, 1, 1, 1, 127, 
	128, 62, 53, 53, 0, 53, 54, 1, 
	1, 1, 24, 0, 128, 0, 116, 0, 
	1, 1, 0, 53, 1, 1, 1, 24, 
	1, 128, 1, 1, 1, 1, 128, 128, 
	128, 0, 128, 1, 124, 24, 1, 1, 
	1, 0, 1, 0, 128, 128, 24, 0, 
	1, 1, 1, 0, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 4, 0, 
	66, 1, 0, 0, 0, 1, 24, 1, 
	24, 66, 1, 1, 58, 123, 24, 0, 
	20, 1, 14, 15, 1, 1, 27, 128, 
	128, 1, 0, 66, 2, 0, 0, 0, 
	0, 0, 66, 128, 10, 1, 1, 1, 
	2, 1, 1, 2, 1, 2, 0, 1, 
	66, 2, 123, 0, 128, 128, 121, 0, 
	0, 8, 8, 0, 0, 93, 0, 0, 
	0, 93, 1, 0, 0, 0, 93, 46, 
	93, 93, 0, 0, 93, 46, 1, 93, 
	124, 27, 27, 27, 0, 103, 103, 103, 
	0, 126, 126, 126, 126, 126, 0, 126, 
	126, 0, 126, 27, 126, 126, 126, 126, 
	126, 126, 126, 126, 126, 126, 126, 126, 
	126, 126, 0, 0, 55, 0, 128, 128, 
	128, 0, 1, 0, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	66, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 0, 64, 93, 24, 0, 1, 
	1, 1, 0, 128, 128, 24, 0, 1, 
	1, 1, 0, 128, 128, 1, 0, 0, 
	24, 0, 66, 1, 1, 128, 128, 10, 
	1, 24, 0, 0, 20, 2, 12, 1, 
	54, 48, 75, 67, 15, 58, 0, 1, 
	0, 67, 67, 67, 67, 10, 0, 1, 
	0, 67, 67, 67, 67, 67, 67, 67, 
	67, 69, 67, 69, 67, 1, 2, 1, 
	66, 1, 2, 128, 128, 0, 128, 128, 
	128, 128, 128, 128, 0, 1, 0, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 84, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 128, 128, 
	128, 128, 128, 128, 128, 128, 0, 64, 
	0, 38, 38, 1, 52, 1, 92, 101, 
	91, 1
]

class << self
	attr_accessor :_lex_index_offsets
	private :_lex_index_offsets, :_lex_index_offsets=
end
self._lex_index_offsets = [
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 46, 175, 304, 433, 562, 
	609, 688, 767, 861, 889, 917, 964, 1065, 
	1093, 1127, 1129, 1223, 1302, 1406, 1535, 1664, 
	1793, 1922, 1969, 2048, 2127, 2221, 2249, 2277, 
	2324, 2425, 2453, 2487, 2489, 2583, 2662, 2766, 
	2895, 3024, 3153, 3282, 3411, 3540, 3669, 3798, 
	3927, 4056, 4058, 4187, 4189, 4191, 4193, 4195, 
	4324, 4453, 4582, 4711, 4840, 4969, 5098, 5227, 
	5356, 5485, 5614, 5743, 5872, 6001, 6130, 6259, 
	6388, 6517, 6519, 6521, 6523, 6525, 6535, 6537, 
	6539, 6541, 6543, 6545, 6547, 6549, 6551, 6680, 
	6682, 6811, 6813, 6815, 6817, 6819, 6821, 6823, 
	6947, 6949, 7078, 7207, 7274, 7403, 7532, 7534, 
	7663, 7792, 7794, 7820, 7822, 7853, 7982, 8070, 
	8117, 8196, 8275, 8369, 8397, 8425, 8472, 8573, 
	8601, 8635, 8637, 8731, 8810, 8914, 9043, 9172, 
	9301, 9430, 9559, 9688, 9690, 9692, 9821, 9837, 
	9848, 9859, 9870, 9881, 10010, 10012, 10097, 10182, 
	10267, 10352, 10437, 10522, 10524, 10526, 10565, 10567, 
	10664, 10689, 10690, 10692, 10694, 10696, 10721, 10723, 
	10725, 10819, 10844, 10933, 11062, 11073, 11195, 11196, 
	11197, 11206, 11215, 11216, 11217, 11311, 11312, 11313, 
	11314, 11408, 11410, 11411, 11412, 11413, 11507, 11554, 
	11648, 11742, 11743, 11744, 11838, 11885, 11887, 11981, 
	12106, 12134, 12162, 12190, 12191, 12295, 12399, 12503, 
	12504, 12631, 12758, 12885, 13012, 13139, 13140, 13267, 
	13394, 13395, 13522, 13550, 13677, 13804, 13931, 14058, 
	14185, 14312, 14439, 14566, 14693, 14694, 14821, 14822, 
	14878, 14879, 14973, 15062, 15191, 15202, 15324, 15325, 
	15326, 15335, 15344, 15345, 15346, 15440, 15441, 15442, 
	15443, 15537, 15539, 15540, 15541, 15542, 15636, 15683, 
	15777, 15871, 15872, 15873, 15967, 16014, 16016, 16110, 
	16235, 16263, 16291, 16319, 16320, 16424, 16528, 16632, 
	16633, 16760, 16887, 17014, 17141, 17268, 17269, 17396, 
	17523, 17524, 17651, 17679, 17806, 17933, 18060, 18187, 
	18314, 18441, 18568, 18695, 18822, 18823, 18950, 18951, 
	19007, 19008, 19102, 19127, 19155, 19249, 19277, 19314, 
	19403, 19532, 19543, 19571, 19630, 19689, 19719, 19848, 
	19859, 19988, 20117, 20246, 20375, 20400, 20401, 20468, 
	20470, 20472, 20601, 20730, 20741, 20743, 20745, 20747, 
	20749, 20752, 20754, 20821, 20823, 20826, 20955, 21084, 
	21213, 21342, 21471, 21600, 21729, 21731, 21733, 21862, 
	21991, 22120, 22249, 22378, 22507, 22636, 22765, 22894, 
	23023, 23152, 23281, 23410, 23539, 23668, 23797, 23926, 
	24055, 24184, 24313, 24442, 24571, 24700, 24829, 24958, 
	25087, 25216, 25345, 25474, 25603, 25732, 25861, 25990, 
	26119, 26248, 26377, 26506, 26635, 26764, 26893, 27022, 
	27151, 27280, 27409, 27538, 27667, 27796, 27925, 28054, 
	28183, 28312, 28441, 28570, 28699, 28828, 28957, 29086, 
	29215, 29344, 29473, 29602, 29731, 29860, 29989, 30118, 
	30247, 30376, 30505, 30634, 30763, 30892, 31021, 31150, 
	31279, 31408, 31537, 31666, 31795, 31924, 32053, 32182, 
	32311, 32440, 32442, 32571, 32700, 32725, 32727, 32729, 
	32731, 32732, 32861, 32990, 32992, 32993, 32994, 33019, 
	33020, 33087, 33089, 33091, 33093, 33095, 33097, 33100, 
	33102, 33169, 33171, 33174, 33303, 33305, 33307, 33309, 
	33437, 33566, 33629, 33683, 33737, 33738, 33792, 33847, 
	33849, 33851, 33853, 33878, 33879, 34008, 34009, 34126, 
	34127, 34129, 34131, 34132, 34186, 34188, 34190, 34192, 
	34217, 34219, 34348, 34350, 34352, 34354, 34356, 34485, 
	34614, 34743, 34744, 34873, 34875, 35000, 35025, 35027, 
	35029, 35031, 35032, 35034, 35035, 35164, 35293, 35318, 
	35319, 35321, 35323, 35325, 35326, 35455, 35584, 35713, 
	35842, 35971, 36100, 36229, 36358, 36487, 36616, 36745, 
	36874, 37003, 37132, 37261, 37390, 37519, 37648, 37653, 
	37654, 37721, 37723, 37724, 37725, 37726, 37728, 37753, 
	37755, 37780, 37847, 37849, 37851, 37910, 38034, 38059, 
	38060, 38081, 38083, 38098, 38114, 38116, 38118, 38146, 
	38275, 38404, 38406, 38407, 38474, 38477, 38478, 38479, 
	38480, 38481, 38482, 38549, 38678, 38689, 38691, 38693, 
	38695, 38698, 38700, 38702, 38705, 38707, 38710, 38711, 
	38713, 38780, 38783, 38907, 38908, 39037, 39166, 39288, 
	39289, 39290, 39299, 39308, 39309, 39310, 39404, 39405, 
	39406, 39407, 39501, 39503, 39504, 39505, 39506, 39600, 
	39647, 39741, 39835, 39836, 39837, 39931, 39978, 39980, 
	40074, 40199, 40227, 40255, 40283, 40284, 40388, 40492, 
	40596, 40597, 40724, 40851, 40978, 41105, 41232, 41233, 
	41360, 41487, 41488, 41615, 41643, 41770, 41897, 42024, 
	42151, 42278, 42405, 42532, 42659, 42786, 42913, 43040, 
	43167, 43294, 43421, 43422, 43423, 43479, 43480, 43609, 
	43738, 43867, 43868, 43870, 43871, 44000, 44129, 44258, 
	44387, 44516, 44645, 44774, 44903, 45032, 45161, 45290, 
	45419, 45548, 45677, 45806, 45935, 46064, 46193, 46322, 
	46451, 46580, 46709, 46838, 46967, 47096, 47225, 47354, 
	47483, 47612, 47741, 47870, 47999, 48128, 48257, 48386, 
	48515, 48644, 48773, 48902, 49031, 49160, 49289, 49418, 
	49547, 49676, 49805, 49934, 50063, 50192, 50321, 50450, 
	50579, 50708, 50837, 50966, 51095, 51224, 51353, 51482, 
	51611, 51678, 51807, 51936, 52065, 52194, 52323, 52452, 
	52581, 52710, 52839, 52968, 53097, 53226, 53355, 53484, 
	53613, 53742, 53871, 54000, 54129, 54258, 54387, 54516, 
	54645, 54774, 54903, 54904, 54969, 55063, 55088, 55089, 
	55091, 55093, 55095, 55096, 55225, 55354, 55379, 55380, 
	55382, 55384, 55386, 55387, 55516, 55645, 55647, 55648, 
	55649, 55674, 55675, 55742, 55744, 55746, 55875, 56004, 
	56015, 56017, 56042, 56043, 56044, 56065, 56068, 56081, 
	56083, 56138, 56187, 56263, 56331, 56347, 56406, 56407, 
	56409, 56410, 56478, 56546, 56614, 56682, 56693, 56694, 
	56696, 56697, 56765, 56833, 56901, 56969, 57037, 57105, 
	57173, 57241, 57311, 57379, 57449, 57517, 57519, 57522, 
	57524, 57591, 57593, 57596, 57725, 57854, 57855, 57984, 
	58113, 58242, 58371, 58500, 58629, 58630, 58632, 58633, 
	58762, 58891, 59020, 59149, 59278, 59407, 59536, 59665, 
	59794, 59923, 60052, 60181, 60310, 60439, 60568, 60697, 
	60826, 60955, 61084, 61213, 61342, 61471, 61600, 61729, 
	61858, 61987, 62116, 62245, 62374, 62503, 62632, 62761, 
	62890, 63019, 63148, 63277, 63406, 63491, 63620, 63749, 
	63878, 64007, 64136, 64265, 64394, 64523, 64652, 64781, 
	64910, 65039, 65168, 65297, 65426, 65555, 65684, 65813, 
	65942, 66071, 66200, 66329, 66458, 66587, 66716, 66845, 
	66974, 67103, 67232, 67361, 67490, 67619, 67748, 67877, 
	68006, 68135, 68264, 68393, 68522, 68651, 68780, 68909, 
	69038, 69167, 69296, 69425, 69554, 69683, 69812, 69941, 
	70070, 70199, 70328, 70457, 70586, 70715, 70844, 70973, 
	71102, 71231, 71360, 71489, 71618, 71747, 71876, 71877, 
	71942, 71943, 71982, 72021, 72023, 72076, 72078, 72171, 
	72273, 72365
]

class << self
	attr_accessor :_lex_indicies
	private :_lex_indicies, :_lex_indicies=
end
self._lex_indicies = [
	1, 0, 2, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	9, 0, 10, 0, 0, 0, 10, 0, 
	0, 0, 0, 0, 11, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 10, 0, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 12, 14, 12, 14, 14, 12, 12, 
	14, 14, 14, 15, 14, 14, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	14, 14, 14, 14, 14, 14, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 14, 12, 12, 13, 14, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 12, 12, 12, 14, 12, 13, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 12, 12, 12, 12, 12, 12, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 14, 12, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 12, 12, 12, 12, 12, 14, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 12, 12, 12, 12, 12, 12, 
	17, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 13, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 12, 
	13, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 12, 12, 12, 12, 12, 
	12, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	13, 12, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 12, 12, 12, 12, 
	12, 13, 18, 19, 19, 19, 18, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 18, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 20, 
	19, 18, 21, 21, 21, 18, 21, 21, 
	21, 21, 21, 22, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 18, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 23, 21, 
	18, 21, 21, 21, 18, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 18, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 24, 21, 18, 
	25, 25, 25, 18, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 18, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 27, 25, 18, 28, 28, 
	28, 18, 28, 28, 28, 28, 28, 29, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 18, 
	28, 18, 28, 28, 28, 18, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 18, 28, 18, 19, 19, 
	19, 18, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 18, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 30, 19, 18, 31, 31, 31, 
	18, 31, 31, 31, 31, 31, 32, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 18, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 33, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	34, 31, 31, 31, 31, 31, 31, 35, 
	31, 18, 31, 31, 31, 18, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 18, 31, 36, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 18, 18, 18, 
	18, 18, 18, 18, 18, 37, 18, 37, 
	18, 18, 38, 38, 38, 18, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 18, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	39, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 40, 38, 18, 
	21, 21, 21, 18, 21, 21, 21, 21, 
	21, 22, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 18, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 21, 21, 24, 21, 18, 41, 
	41, 41, 18, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	18, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	42, 42, 42, 42, 42, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 42, 
	42, 42, 42, 42, 42, 41, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 43, 45, 43, 45, 45, 43, 43, 
	45, 45, 45, 46, 45, 45, 47, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	45, 45, 45, 45, 45, 45, 45, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 43, 45, 43, 43, 44, 45, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 43, 43, 43, 45, 43, 44, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 43, 43, 43, 43, 43, 43, 43, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 43, 43, 43, 43, 45, 43, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 45, 45, 45, 45, 45, 45, 
	45, 45, 43, 43, 43, 43, 43, 45, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 43, 43, 43, 43, 43, 43, 
	48, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 44, 
	43, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 43, 
	44, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 43, 43, 
	43, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 43, 43, 43, 43, 43, 
	43, 43, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 43, 43, 43, 43, 
	44, 43, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 43, 43, 43, 43, 
	43, 44, 49, 50, 50, 50, 49, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 49, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 51, 
	50, 49, 52, 52, 52, 49, 52, 52, 
	52, 52, 52, 53, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 49, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 54, 52, 
	49, 52, 52, 52, 49, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 49, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 55, 52, 49, 
	56, 56, 56, 49, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 49, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 57, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 58, 56, 49, 59, 59, 
	59, 49, 59, 59, 59, 59, 59, 60, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 49, 
	59, 49, 59, 59, 59, 49, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 49, 59, 49, 50, 50, 
	50, 49, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 49, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 61, 50, 49, 62, 62, 62, 
	49, 62, 62, 62, 62, 62, 63, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 49, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 64, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	65, 62, 62, 62, 62, 62, 62, 66, 
	62, 49, 62, 62, 62, 49, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 49, 62, 67, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 49, 49, 49, 
	49, 49, 49, 49, 49, 68, 49, 68, 
	49, 49, 69, 69, 69, 49, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 49, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	70, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 71, 69, 49, 
	52, 52, 52, 49, 52, 52, 52, 52, 
	52, 53, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 49, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 52, 52, 52, 52, 
	52, 52, 52, 52, 55, 52, 49, 72, 
	72, 72, 49, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	49, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	72, 72, 72, 72, 72, 72, 72, 73, 
	73, 73, 73, 73, 73, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 72, 
	72, 72, 72, 72, 72, 72, 72, 73, 
	73, 73, 73, 73, 73, 72, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 76, 
	76, 74, 76, 74, 76, 76, 74, 74, 
	76, 76, 76, 77, 76, 76, 78, 78, 
	78, 78, 78, 78, 78, 78, 78, 78, 
	76, 76, 76, 76, 76, 76, 76, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 74, 76, 74, 74, 75, 76, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 74, 74, 74, 76, 74, 75, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 74, 74, 74, 74, 74, 74, 74, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 74, 74, 74, 74, 76, 74, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 74, 74, 74, 74, 74, 76, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 74, 74, 74, 74, 74, 74, 
	79, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 75, 
	74, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 74, 
	75, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 74, 74, 74, 74, 74, 74, 74, 
	74, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 74, 74, 74, 74, 74, 
	74, 74, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 74, 74, 74, 74, 
	75, 74, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 74, 74, 74, 74, 
	74, 75, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 81, 81, 82, 81, 82, 
	81, 81, 82, 82, 81, 81, 81, 83, 
	81, 81, 84, 84, 84, 84, 84, 84, 
	84, 84, 84, 84, 81, 81, 81, 81, 
	81, 81, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 82, 81, 82, 
	82, 80, 81, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 82, 82, 82, 
	81, 82, 80, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 82, 82, 82, 
	82, 82, 82, 82, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 82, 82, 
	82, 82, 81, 82, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 82, 82, 
	82, 82, 82, 81, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 82, 82, 
	82, 82, 82, 82, 86, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 82, 
	82, 82, 82, 85, 82, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 82, 
	82, 82, 82, 82, 85, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 82, 
	82, 82, 82, 82, 82, 82, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	82, 82, 82, 82, 87, 82, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	82, 82, 82, 82, 82, 87, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	88, 88, 88, 88, 88, 88, 88, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 88, 88, 88, 88, 89, 88, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 89, 89, 89, 89, 89, 89, 89, 
	89, 88, 88, 88, 88, 88, 89, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 90, 
	92, 90, 90, 90, 90, 90, 90, 90, 
	90, 90, 90, 90, 90, 90, 90, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 93, 90, 90, 90, 90, 92, 90, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 90, 90, 90, 90, 91, 90, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 90, 90, 90, 90, 90, 91, 
	93, 90, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 96, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 97, 94, 94, 94, 
	94, 96, 94, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 94, 94, 94, 
	94, 95, 94, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 94, 94, 94, 
	94, 94, 95, 97, 94, 99, 98, 100, 
	98, 101, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 103, 98, 103, 103, 
	103, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 103, 98, 98, 98, 98, 
	104, 105, 98, 106, 98, 107, 108, 109, 
	110, 111, 104, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 112, 98, 113, 
	109, 114, 115, 98, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 116, 117, 
	109, 118, 102, 98, 102, 102, 102, 102, 
	102, 102, 102, 102, 119, 102, 102, 102, 
	102, 102, 102, 102, 102, 120, 102, 102, 
	121, 102, 122, 102, 102, 102, 123, 124, 
	98, 118, 98, 102, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 125, 98, 125, 
	125, 125, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 125, 98, 98, 98, 
	98, 126, 127, 98, 128, 98, 129, 130, 
	131, 132, 133, 126, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 134, 98, 
	135, 131, 136, 137, 98, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 138, 
	139, 131, 100, 95, 98, 95, 95, 95, 
	95, 95, 95, 95, 95, 140, 95, 95, 
	95, 95, 95, 95, 95, 95, 141, 95, 
	95, 142, 95, 143, 95, 95, 95, 144, 
	145, 98, 100, 98, 95, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 96, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 97, 
	98, 98, 98, 98, 96, 98, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	98, 98, 98, 98, 95, 98, 95, 95, 
	95, 95, 95, 146, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	98, 98, 98, 98, 98, 95, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 96, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	97, 98, 98, 98, 98, 96, 98, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 98, 98, 98, 98, 95, 98, 95, 
	95, 95, 95, 147, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 98, 98, 98, 98, 98, 95, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 97, 98, 98, 98, 98, 96, 98, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 98, 98, 98, 98, 95, 98, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 148, 95, 95, 95, 95, 95, 
	95, 95, 98, 98, 98, 98, 98, 95, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 96, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 97, 98, 98, 98, 98, 96, 
	98, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 98, 98, 98, 98, 95, 
	98, 95, 95, 149, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 98, 98, 98, 98, 98, 
	95, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 96, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 97, 98, 98, 98, 98, 
	96, 98, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 98, 98, 98, 98, 
	95, 98, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 150, 95, 
	95, 95, 95, 95, 98, 98, 98, 98, 
	98, 95, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 96, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 97, 98, 98, 98, 
	98, 96, 98, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 98, 98, 98, 
	98, 95, 98, 95, 95, 95, 95, 146, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 98, 98, 98, 
	98, 98, 95, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 96, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 97, 98, 98, 
	98, 98, 96, 98, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 98, 98, 
	98, 98, 95, 98, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 151, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 98, 98, 
	98, 98, 98, 95, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 97, 98, 
	98, 98, 98, 96, 98, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 98, 
	98, 98, 98, 95, 98, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	152, 95, 95, 95, 95, 95, 95, 95, 
	153, 95, 95, 95, 95, 95, 95, 98, 
	98, 98, 98, 98, 95, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 96, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 97, 
	98, 98, 98, 98, 96, 98, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	98, 98, 98, 98, 95, 98, 95, 95, 
	95, 95, 154, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	98, 98, 98, 98, 98, 95, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 96, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	97, 98, 98, 98, 98, 96, 98, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 98, 98, 98, 98, 95, 98, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 155, 95, 95, 95, 95, 95, 95, 
	95, 98, 98, 98, 98, 98, 95, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	96, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 97, 98, 98, 98, 98, 96, 98, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 98, 98, 98, 98, 95, 98, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 146, 95, 95, 95, 95, 95, 
	95, 95, 98, 98, 98, 98, 98, 95, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 96, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 97, 98, 98, 98, 98, 96, 
	98, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 98, 98, 98, 98, 95, 
	98, 95, 95, 95, 95, 95, 95, 95, 
	95, 156, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 98, 98, 98, 98, 98, 
	95, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 96, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 97, 98, 98, 98, 98, 
	96, 98, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 98, 98, 98, 98, 
	95, 98, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 146, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 98, 98, 98, 98, 
	98, 95, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 96, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 97, 98, 98, 98, 
	98, 96, 98, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 98, 98, 98, 
	98, 95, 98, 95, 95, 95, 95, 95, 
	95, 95, 157, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 98, 98, 98, 
	98, 98, 95, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 96, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 97, 98, 98, 
	98, 98, 96, 98, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 98, 98, 
	98, 98, 95, 98, 95, 95, 95, 95, 
	95, 95, 95, 95, 158, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 98, 98, 
	98, 98, 98, 95, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 98, 96, 98, 98, 
	98, 98, 98, 98, 98, 98, 98, 98, 
	98, 98, 98, 98, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 97, 98, 
	98, 98, 98, 96, 98, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 98, 
	98, 98, 98, 95, 98, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	150, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 98, 
	98, 98, 98, 98, 95, 160, 159, 161, 
	159, 162, 159, 131, 159, 163, 159, 159, 
	159, 159, 159, 159, 159, 164, 159, 165, 
	159, 166, 159, 131, 159, 167, 159, 131, 
	159, 168, 159, 162, 159, 170, 169, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	173, 171, 173, 173, 173, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 173, 
	171, 171, 171, 171, 171, 171, 171, 174, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 171, 175, 171, 171, 172, 171, 
	172, 172, 172, 176, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 171, 171, 171, 171, 171, 172, 
	177, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 179, 171, 179, 179, 179, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 179, 171, 171, 171, 171, 171, 
	171, 171, 180, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 171, 171, 171, 171, 171, 
	171, 171, 171, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 171, 181, 171, 
	171, 178, 171, 178, 178, 178, 182, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 178, 178, 178, 
	178, 178, 178, 178, 178, 171, 171, 171, 
	171, 171, 178, 183, 184, 186, 185, 187, 
	185, 188, 185, 189, 185, 190, 185, 191, 
	192, 192, 192, 191, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 191, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 192, 192, 192, 192, 192, 192, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 192, 194, 183, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 197, 197, 
	195, 197, 195, 197, 197, 195, 195, 197, 
	197, 197, 198, 197, 197, 199, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 197, 
	197, 197, 197, 197, 197, 197, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	195, 197, 195, 195, 196, 197, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	195, 195, 195, 197, 195, 196, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	195, 195, 195, 195, 195, 195, 195, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 195, 195, 195, 195, 197, 195, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 197, 197, 197, 197, 197, 197, 197, 
	197, 195, 195, 195, 195, 195, 197, 200, 
	197, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	197, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 201, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 195, 195, 195, 
	195, 196, 195, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 195, 195, 195, 
	195, 195, 196, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 195, 195, 
	195, 195, 196, 195, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 195, 195, 
	195, 195, 195, 196, 200, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	203, 195, 195, 195, 195, 204, 195, 195, 
	195, 195, 195, 205, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 194, 195, 195, 195, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 195, 195, 195, 195, 202, 206, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 195, 195, 195, 205, 195, 202, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 209, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 208, 
	208, 208, 208, 208, 208, 208, 208, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 208, 208, 208, 208, 208, 208, 208, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 208, 208, 208, 208, 207, 208, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 207, 207, 207, 207, 207, 207, 
	207, 207, 208, 208, 208, 208, 208, 207, 
	211, 210, 195, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	203, 203, 212, 203, 209, 208, 195, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 204, 204, 204, 204, 204, 
	204, 204, 204, 212, 204, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 203, 
	195, 195, 195, 195, 204, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	195, 195, 195, 195, 202, 206, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	195, 195, 195, 195, 195, 202, 195, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 206, 206, 206, 206, 
	206, 206, 206, 206, 212, 206, 213, 214, 
	214, 214, 213, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	213, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 215, 214, 213, 216, 216, 
	216, 213, 216, 216, 216, 216, 216, 217, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 213, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 218, 216, 213, 216, 216, 216, 
	213, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 213, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 219, 216, 213, 220, 220, 220, 213, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 213, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 221, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 222, 
	220, 213, 223, 223, 223, 213, 223, 223, 
	223, 223, 223, 224, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 213, 223, 213, 223, 223, 
	223, 213, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 223, 
	223, 223, 223, 223, 223, 223, 223, 213, 
	223, 213, 214, 214, 214, 213, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 213, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 225, 214, 
	213, 226, 226, 226, 213, 226, 226, 226, 
	226, 226, 227, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 213, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 228, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 229, 226, 226, 226, 
	226, 226, 226, 230, 226, 213, 226, 226, 
	226, 213, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 226, 
	226, 226, 226, 226, 226, 226, 226, 213, 
	226, 231, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 213, 213, 213, 213, 213, 213, 213, 
	213, 232, 213, 232, 213, 213, 233, 233, 
	233, 213, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 213, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 234, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 235, 233, 213, 216, 216, 216, 213, 
	216, 216, 216, 216, 216, 217, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 213, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	216, 216, 216, 216, 216, 216, 216, 216, 
	219, 216, 213, 236, 236, 236, 213, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 213, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 237, 237, 237, 237, 237, 237, 
	237, 237, 237, 237, 236, 236, 236, 236, 
	236, 236, 236, 237, 237, 237, 237, 237, 
	237, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 236, 236, 236, 236, 236, 
	236, 236, 236, 237, 237, 237, 237, 237, 
	237, 236, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 239, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 240, 183, 183, 241, 
	183, 242, 183, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 183, 183, 183, 
	183, 238, 183, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 183, 183, 183, 
	183, 183, 238, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 239, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 240, 195, 195, 
	241, 195, 242, 195, 238, 238, 238, 238, 
	238, 238, 243, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 195, 195, 
	195, 195, 238, 195, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 195, 195, 
	195, 195, 195, 238, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 239, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 240, 195, 
	195, 241, 195, 242, 195, 238, 238, 238, 
	238, 238, 238, 238, 238, 244, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 195, 
	195, 195, 195, 238, 195, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 195, 
	195, 195, 195, 195, 238, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 239, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 240, 
	195, 195, 241, 195, 242, 195, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 245, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	195, 195, 195, 195, 238, 195, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	195, 195, 195, 195, 195, 238, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 195, 239, 
	195, 195, 195, 195, 195, 195, 195, 195, 
	195, 195, 195, 195, 195, 195, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	240, 195, 195, 241, 195, 242, 195, 238, 
	238, 238, 245, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 195, 195, 195, 195, 238, 195, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 195, 195, 195, 195, 195, 238, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 246, 
	248, 246, 246, 246, 246, 246, 246, 246, 
	246, 246, 246, 246, 246, 246, 246, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 249, 246, 246, 246, 246, 248, 246, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 246, 246, 246, 246, 247, 246, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 246, 246, 246, 246, 246, 247, 
	249, 246, 246, 250, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 251, 251, 
	251, 251, 251, 251, 251, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 251, 
	251, 251, 251, 252, 251, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 252, 
	252, 252, 252, 252, 252, 252, 252, 251, 
	251, 251, 251, 251, 252, 254, 253, 254, 
	253, 253, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 253, 255, 255, 255, 
	255, 255, 255, 255, 255, 255, 255, 253, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	256, 256, 253, 258, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 257, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	257, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 251, 251, 251, 251, 251, 251, 251, 
	251, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 251, 251, 251, 251, 251, 
	251, 251, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 251, 251, 251, 251, 
	260, 251, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 251, 251, 251, 251, 
	251, 260, 261, 257, 262, 263, 262, 262, 
	262, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 262, 257, 257, 264, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 265, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 266, 
	257, 267, 268, 267, 267, 267, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	267, 257, 257, 269, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 270, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 271, 257, 273, 274, 
	273, 273, 273, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 273, 272, 272, 
	275, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 276, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 272, 272, 272, 272, 272, 272, 272, 
	272, 277, 272, 279, 280, 279, 279, 279, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 279, 278, 278, 281, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 282, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 283, 278, 
	279, 280, 279, 279, 279, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 279, 
	278, 278, 281, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 284, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 283, 278, 279, 285, 279, 
	279, 279, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 279, 278, 278, 281, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	282, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	283, 278, 286, 257, 263, 257, 288, 287, 
	288, 288, 288, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 287, 287, 287, 
	287, 287, 287, 287, 287, 288, 287, 287, 
	287, 287, 287, 289, 287, 287, 287, 287, 
	287, 287, 287, 290, 287, 291, 287, 293, 
	292, 292, 292, 293, 292, 292, 292, 292, 
	294, 295, 294, 294, 294, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 293, 292, 292, 292, 292, 292, 294, 
	292, 292, 296, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 297, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 292, 292, 292, 292, 292, 
	292, 292, 292, 298, 292, 292, 299, 292, 
	294, 300, 294, 294, 294, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 300, 
	300, 300, 300, 300, 300, 300, 300, 294, 
	300, 301, 302, 303, 304, 305, 307, 306, 
	309, 310, 309, 309, 309, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 308, 
	308, 308, 308, 308, 308, 308, 308, 309, 
	308, 295, 306, 311, 306, 313, 312, 312, 
	312, 313, 312, 312, 312, 312, 314, 315, 
	314, 314, 314, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 313, 
	312, 312, 312, 312, 312, 314, 312, 312, 
	316, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 312, 312, 312, 312, 312, 312, 312, 
	312, 317, 312, 314, 318, 314, 314, 314, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 318, 318, 318, 318, 318, 318, 
	318, 318, 314, 318, 320, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	321, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 319, 319, 319, 319, 319, 
	319, 319, 319, 322, 319, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 323, 323, 323, 
	323, 323, 323, 323, 323, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 323, 
	323, 323, 323, 323, 323, 323, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	323, 323, 323, 323, 13, 323, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	323, 323, 323, 323, 323, 13, 16, 16, 
	16, 16, 16, 16, 16, 16, 16, 16, 
	323, 326, 325, 325, 325, 326, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 326, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 327, 327, 327, 327, 327, 327, 327, 
	327, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 328, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 329, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 330, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 325, 325, 
	325, 325, 325, 325, 325, 325, 331, 325, 
	325, 332, 325, 333, 334, 336, 336, 336, 
	336, 336, 336, 336, 336, 335, 337, 337, 
	337, 337, 337, 337, 337, 337, 335, 335, 
	338, 338, 38, 38, 38, 338, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 338, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	39, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 339, 38, 340, 
	341, 342, 342, 38, 38, 38, 342, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 342, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 39, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	38, 38, 38, 38, 38, 38, 343, 38, 
	37, 342, 344, 345, 346, 346, 25, 25, 
	25, 346, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 346, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 26, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 347, 25, 342, 19, 19, 19, 342, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 342, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	348, 19, 338, 25, 25, 25, 338, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 338, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 26, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 27, 25, 
	338, 349, 349, 349, 338, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 338, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 350, 349, 351, 352, 
	352, 349, 349, 349, 352, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 352, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 349, 349, 349, 349, 
	349, 349, 349, 349, 353, 349, 352, 19, 
	19, 19, 352, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	352, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 348, 19, 354, 352, 352, 
	25, 25, 25, 352, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 352, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 26, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 25, 25, 25, 
	25, 25, 25, 27, 25, 355, 356, 356, 
	356, 355, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 355, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 357, 357, 357, 
	357, 357, 357, 357, 357, 357, 357, 356, 
	356, 356, 356, 356, 356, 356, 357, 357, 
	357, 357, 357, 357, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 357, 357, 
	357, 357, 357, 357, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	356, 356, 356, 356, 356, 356, 356, 356, 
	358, 356, 355, 359, 359, 359, 355, 359, 
	359, 359, 359, 359, 359, 359, 359, 359, 
	359, 359, 359, 359, 359, 359, 359, 359, 
	359, 359, 359, 359, 355, 359, 355, 360, 
	360, 360, 355, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	355, 360, 355, 361, 361, 361, 355, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 355, 361, 355, 355, 
	359, 359, 359, 355, 359, 359, 359, 359, 
	359, 359, 359, 359, 359, 359, 359, 359, 
	359, 359, 359, 359, 359, 359, 359, 359, 
	359, 355, 359, 359, 359, 359, 359, 359, 
	359, 359, 359, 359, 359, 359, 359, 359, 
	359, 359, 359, 359, 359, 359, 359, 362, 
	362, 362, 362, 362, 362, 362, 362, 362, 
	362, 359, 359, 359, 359, 359, 359, 359, 
	362, 362, 362, 362, 362, 362, 359, 359, 
	359, 359, 359, 359, 359, 359, 359, 359, 
	359, 359, 359, 359, 359, 359, 359, 359, 
	359, 359, 359, 359, 359, 359, 359, 359, 
	362, 362, 362, 362, 362, 362, 359, 355, 
	360, 360, 360, 355, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 355, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 363, 
	363, 363, 363, 363, 363, 363, 363, 363, 
	363, 360, 360, 360, 360, 360, 360, 360, 
	363, 363, 363, 363, 363, 363, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	360, 360, 360, 360, 360, 360, 360, 360, 
	363, 363, 363, 363, 363, 363, 360, 355, 
	361, 361, 361, 355, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 355, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 364, 
	364, 364, 364, 364, 364, 364, 364, 364, 
	364, 361, 361, 361, 361, 361, 361, 361, 
	364, 364, 364, 364, 364, 364, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	364, 364, 364, 364, 364, 364, 361, 365, 
	368, 367, 367, 367, 368, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 368, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	369, 369, 369, 369, 369, 369, 369, 369, 
	369, 369, 367, 367, 367, 367, 367, 367, 
	367, 369, 369, 369, 369, 369, 369, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 369, 369, 369, 369, 369, 369, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 367, 367, 367, 
	367, 367, 367, 367, 367, 359, 367, 368, 
	370, 370, 370, 368, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 368, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 371, 
	371, 371, 371, 371, 371, 371, 371, 371, 
	371, 370, 370, 370, 370, 370, 370, 370, 
	371, 371, 371, 371, 371, 371, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	371, 371, 371, 371, 371, 371, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 372, 370, 368, 373, 
	373, 373, 368, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	368, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	373, 373, 373, 373, 373, 373, 373, 374, 
	374, 374, 374, 374, 374, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 374, 
	374, 374, 374, 374, 374, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 375, 373, 368, 376, 376, 
	376, 368, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 368, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 376, 
	376, 376, 376, 376, 376, 376, 377, 377, 
	377, 377, 377, 377, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 377, 377, 
	377, 377, 377, 377, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 368, 376, 368, 376, 376, 376, 
	368, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 368, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 376, 376, 
	376, 376, 376, 376, 376, 377, 377, 377, 
	377, 377, 377, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 377, 377, 377, 
	377, 377, 377, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 368, 376, 378, 368, 377, 377, 377, 
	368, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 368, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 378, 377, 368, 377, 377, 377, 368, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 368, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	377, 377, 377, 377, 377, 377, 377, 377, 
	366, 377, 366, 368, 374, 374, 374, 368, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 368, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	374, 374, 374, 374, 374, 374, 374, 374, 
	361, 374, 366, 361, 361, 361, 366, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 361, 361, 361, 361, 
	361, 361, 361, 361, 366, 361, 368, 370, 
	370, 370, 368, 370, 370, 370, 370, 379, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	368, 370, 370, 370, 370, 370, 379, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 380, 380, 
	380, 380, 380, 380, 380, 380, 380, 380, 
	370, 370, 370, 370, 370, 370, 370, 380, 
	380, 380, 380, 380, 380, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 380, 
	380, 380, 380, 380, 380, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 370, 370, 370, 370, 370, 
	370, 370, 370, 381, 370, 368, 376, 376, 
	376, 368, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 368, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 382, 382, 382, 
	382, 382, 382, 382, 382, 382, 382, 376, 
	376, 376, 376, 376, 376, 376, 382, 382, 
	382, 382, 382, 382, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 382, 382, 
	382, 382, 382, 382, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 368, 376, 368, 376, 376, 376, 
	368, 376, 376, 376, 376, 379, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 368, 376, 
	376, 376, 376, 376, 379, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 383, 383, 383, 383, 
	383, 383, 383, 383, 383, 383, 376, 376, 
	376, 376, 376, 376, 376, 383, 383, 383, 
	383, 383, 383, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 383, 383, 383, 
	383, 383, 383, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 381, 376, 368, 376, 376, 376, 368, 
	376, 376, 376, 376, 379, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 368, 376, 376, 
	376, 376, 376, 379, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 384, 384, 384, 384, 384, 
	384, 384, 384, 384, 384, 376, 376, 376, 
	376, 376, 376, 376, 384, 384, 384, 384, 
	384, 384, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 384, 384, 384, 384, 
	384, 384, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	381, 376, 368, 376, 376, 376, 368, 376, 
	376, 376, 376, 379, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 368, 376, 376, 376, 
	376, 376, 379, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 385, 385, 385, 385, 385, 385, 
	385, 385, 385, 385, 376, 376, 376, 376, 
	376, 376, 376, 385, 385, 385, 385, 385, 
	385, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 385, 385, 385, 385, 385, 
	385, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 381, 
	376, 368, 376, 376, 376, 368, 376, 376, 
	376, 376, 379, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 368, 376, 376, 376, 376, 
	376, 379, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 386, 386, 386, 386, 386, 386, 386, 
	386, 386, 386, 376, 376, 376, 376, 376, 
	376, 376, 386, 386, 386, 386, 386, 386, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 386, 386, 386, 386, 386, 386, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 381, 376, 
	368, 376, 376, 376, 368, 376, 376, 376, 
	376, 379, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 368, 376, 376, 376, 376, 376, 
	379, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	387, 387, 387, 387, 387, 387, 387, 387, 
	387, 387, 376, 376, 376, 376, 376, 376, 
	376, 387, 387, 387, 387, 387, 387, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 387, 387, 387, 387, 387, 387, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 381, 376, 368, 
	376, 376, 376, 368, 376, 376, 376, 376, 
	379, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 368, 376, 376, 376, 376, 376, 379, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	388, 376, 376, 376, 376, 376, 376, 376, 
	388, 388, 388, 388, 388, 388, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	388, 388, 388, 388, 388, 388, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 381, 376, 368, 376, 
	376, 376, 368, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	368, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 388, 388, 
	388, 388, 388, 388, 388, 388, 388, 388, 
	376, 376, 376, 376, 376, 376, 376, 388, 
	388, 388, 388, 388, 388, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 388, 
	388, 388, 388, 388, 388, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 376, 376, 376, 376, 376, 
	376, 376, 376, 378, 376, 389, 368, 373, 
	373, 373, 368, 373, 373, 373, 373, 379, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	368, 373, 373, 373, 373, 373, 379, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 384, 384, 
	384, 384, 384, 384, 384, 384, 384, 384, 
	373, 373, 373, 373, 373, 373, 373, 384, 
	384, 384, 384, 384, 384, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 384, 
	384, 384, 384, 384, 384, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 373, 373, 373, 373, 373, 
	373, 373, 373, 381, 373, 390, 392, 392, 
	392, 392, 392, 392, 392, 392, 392, 392, 
	391, 391, 391, 391, 391, 391, 391, 392, 
	392, 392, 392, 392, 392, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 391, 
	391, 391, 391, 391, 391, 391, 391, 392, 
	392, 392, 392, 392, 392, 391, 391, 394, 
	393, 393, 393, 394, 393, 393, 393, 393, 
	393, 395, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 394, 393, 393, 393, 393, 393, 393, 
	393, 393, 396, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 393, 393, 393, 393, 393, 
	393, 393, 393, 397, 393, 399, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 400, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 398, 398, 398, 398, 
	398, 398, 398, 398, 401, 398, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 402, 402, 
	402, 402, 402, 402, 402, 402, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	402, 402, 402, 402, 402, 402, 402, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 402, 402, 402, 402, 44, 402, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 44, 44, 44, 44, 44, 44, 44, 
	44, 402, 402, 402, 402, 402, 44, 47, 
	47, 47, 47, 47, 47, 47, 47, 47, 
	47, 402, 405, 404, 404, 404, 405, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 405, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 406, 406, 406, 406, 406, 406, 
	406, 406, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 407, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 408, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 409, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 404, 
	404, 404, 404, 404, 404, 404, 404, 410, 
	404, 404, 411, 404, 412, 413, 415, 415, 
	415, 415, 415, 415, 415, 415, 414, 416, 
	416, 416, 416, 416, 416, 416, 416, 414, 
	414, 417, 417, 69, 69, 69, 417, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 417, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 70, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 418, 69, 
	419, 420, 421, 421, 69, 69, 69, 421, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 421, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 70, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 69, 
	69, 69, 69, 69, 69, 69, 69, 422, 
	69, 68, 421, 423, 424, 425, 425, 56, 
	56, 56, 425, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	425, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 57, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 426, 56, 421, 50, 50, 50, 
	421, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 421, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 427, 50, 417, 56, 56, 56, 417, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 417, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 57, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 58, 
	56, 417, 428, 428, 428, 417, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 417, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 429, 428, 430, 
	431, 431, 428, 428, 428, 431, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 431, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 428, 428, 428, 
	428, 428, 428, 428, 428, 432, 428, 431, 
	50, 50, 50, 431, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 431, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 427, 50, 433, 431, 
	431, 56, 56, 56, 431, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 431, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 57, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 56, 56, 56, 56, 
	56, 56, 56, 56, 58, 56, 434, 435, 
	435, 435, 434, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	434, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 436, 436, 
	436, 436, 436, 436, 436, 436, 436, 436, 
	435, 435, 435, 435, 435, 435, 435, 436, 
	436, 436, 436, 436, 436, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 436, 
	436, 436, 436, 436, 436, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 435, 435, 435, 435, 435, 435, 435, 
	435, 437, 435, 434, 438, 438, 438, 434, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 438, 438, 438, 438, 434, 438, 434, 
	439, 439, 439, 434, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 434, 439, 434, 440, 440, 440, 434, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 440, 440, 440, 434, 440, 434, 
	434, 438, 438, 438, 434, 438, 438, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 438, 434, 438, 438, 438, 438, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	441, 441, 441, 441, 441, 441, 441, 441, 
	441, 441, 438, 438, 438, 438, 438, 438, 
	438, 441, 441, 441, 441, 441, 441, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 438, 438, 438, 438, 438, 438, 438, 
	438, 441, 441, 441, 441, 441, 441, 438, 
	434, 439, 439, 439, 434, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 434, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	442, 442, 442, 442, 442, 442, 442, 442, 
	442, 442, 439, 439, 439, 439, 439, 439, 
	439, 442, 442, 442, 442, 442, 442, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 439, 439, 439, 439, 439, 439, 439, 
	439, 442, 442, 442, 442, 442, 442, 439, 
	434, 440, 440, 440, 434, 440, 440, 440, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 434, 440, 440, 440, 440, 440, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	443, 443, 443, 443, 443, 443, 443, 443, 
	443, 443, 440, 440, 440, 440, 440, 440, 
	440, 443, 443, 443, 443, 443, 443, 440, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 443, 443, 443, 443, 443, 443, 440, 
	444, 447, 446, 446, 446, 447, 446, 446, 
	446, 446, 446, 446, 446, 446, 446, 446, 
	446, 446, 446, 446, 446, 446, 446, 446, 
	446, 446, 446, 447, 446, 446, 446, 446, 
	446, 446, 446, 446, 446, 446, 446, 446, 
	446, 446, 446, 446, 446, 446, 446, 446, 
	446, 448, 448, 448, 448, 448, 448, 448, 
	448, 448, 448, 446, 446, 446, 446, 446, 
	446, 446, 448, 448, 448, 448, 448, 448, 
	446, 446, 446, 446, 446, 446, 446, 446, 
	446, 446, 446, 446, 446, 446, 446, 446, 
	446, 446, 446, 446, 446, 446, 446, 446, 
	446, 446, 448, 448, 448, 448, 448, 448, 
	446, 446, 446, 446, 446, 446, 446, 446, 
	446, 446, 446, 446, 446, 446, 446, 446, 
	446, 446, 446, 446, 446, 446, 438, 446, 
	447, 449, 449, 449, 447, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 447, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	450, 450, 450, 450, 450, 450, 450, 450, 
	450, 450, 449, 449, 449, 449, 449, 449, 
	449, 450, 450, 450, 450, 450, 450, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 450, 450, 450, 450, 450, 450, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 451, 449, 447, 
	452, 452, 452, 447, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 447, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 452, 452, 452, 452, 452, 452, 452, 
	453, 453, 453, 453, 453, 453, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	453, 453, 453, 453, 453, 453, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 454, 452, 447, 455, 
	455, 455, 447, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	447, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	455, 455, 455, 455, 455, 455, 455, 456, 
	456, 456, 456, 456, 456, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 456, 
	456, 456, 456, 456, 456, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 447, 455, 447, 455, 455, 
	455, 447, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 447, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 455, 
	455, 455, 455, 455, 455, 455, 456, 456, 
	456, 456, 456, 456, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 456, 456, 
	456, 456, 456, 456, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 447, 455, 457, 447, 456, 456, 
	456, 447, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 447, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 457, 456, 447, 456, 456, 456, 
	447, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 447, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 456, 456, 456, 456, 456, 456, 456, 
	456, 445, 456, 445, 447, 453, 453, 453, 
	447, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 447, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 453, 453, 453, 453, 453, 453, 453, 
	453, 440, 453, 445, 440, 440, 440, 445, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 440, 440, 440, 440, 440, 440, 
	440, 440, 440, 440, 440, 445, 440, 447, 
	449, 449, 449, 447, 449, 449, 449, 449, 
	458, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 447, 449, 449, 449, 449, 449, 458, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 459, 
	459, 459, 459, 459, 459, 459, 459, 459, 
	459, 449, 449, 449, 449, 449, 449, 449, 
	459, 459, 459, 459, 459, 459, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	459, 459, 459, 459, 459, 459, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 449, 449, 449, 449, 
	449, 449, 449, 449, 460, 449, 447, 455, 
	455, 455, 447, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	447, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 461, 461, 
	461, 461, 461, 461, 461, 461, 461, 461, 
	455, 455, 455, 455, 455, 455, 455, 461, 
	461, 461, 461, 461, 461, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 461, 
	461, 461, 461, 461, 461, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 447, 455, 447, 455, 455, 
	455, 447, 455, 455, 455, 455, 458, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 447, 
	455, 455, 455, 455, 455, 458, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 462, 462, 462, 
	462, 462, 462, 462, 462, 462, 462, 455, 
	455, 455, 455, 455, 455, 455, 462, 462, 
	462, 462, 462, 462, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 462, 462, 
	462, 462, 462, 462, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 460, 455, 447, 455, 455, 455, 
	447, 455, 455, 455, 455, 458, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 447, 455, 
	455, 455, 455, 455, 458, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 463, 463, 463, 463, 
	463, 463, 463, 463, 463, 463, 455, 455, 
	455, 455, 455, 455, 455, 463, 463, 463, 
	463, 463, 463, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 463, 463, 463, 
	463, 463, 463, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 460, 455, 447, 455, 455, 455, 447, 
	455, 455, 455, 455, 458, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 447, 455, 455, 
	455, 455, 455, 458, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 464, 464, 464, 464, 464, 
	464, 464, 464, 464, 464, 455, 455, 455, 
	455, 455, 455, 455, 464, 464, 464, 464, 
	464, 464, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 464, 464, 464, 464, 
	464, 464, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	460, 455, 447, 455, 455, 455, 447, 455, 
	455, 455, 455, 458, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 447, 455, 455, 455, 
	455, 455, 458, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 465, 465, 465, 465, 465, 465, 
	465, 465, 465, 465, 455, 455, 455, 455, 
	455, 455, 455, 465, 465, 465, 465, 465, 
	465, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 465, 465, 465, 465, 465, 
	465, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 460, 
	455, 447, 455, 455, 455, 447, 455, 455, 
	455, 455, 458, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 447, 455, 455, 455, 455, 
	455, 458, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 466, 466, 466, 466, 466, 466, 466, 
	466, 466, 466, 455, 455, 455, 455, 455, 
	455, 455, 466, 466, 466, 466, 466, 466, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 466, 466, 466, 466, 466, 466, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 460, 455, 
	447, 455, 455, 455, 447, 455, 455, 455, 
	455, 458, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 447, 455, 455, 455, 455, 455, 
	458, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	467, 467, 467, 467, 467, 467, 467, 467, 
	467, 467, 455, 455, 455, 455, 455, 455, 
	455, 467, 467, 467, 467, 467, 467, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 467, 467, 467, 467, 467, 467, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 460, 455, 447, 
	455, 455, 455, 447, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 447, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 467, 
	467, 467, 467, 467, 467, 467, 467, 467, 
	467, 455, 455, 455, 455, 455, 455, 455, 
	467, 467, 467, 467, 467, 467, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	467, 467, 467, 467, 467, 467, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 457, 455, 468, 447, 
	452, 452, 452, 447, 452, 452, 452, 452, 
	458, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 447, 452, 452, 452, 452, 452, 458, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 463, 
	463, 463, 463, 463, 463, 463, 463, 463, 
	463, 452, 452, 452, 452, 452, 452, 452, 
	463, 463, 463, 463, 463, 463, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	463, 463, 463, 463, 463, 463, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 452, 452, 452, 452, 
	452, 452, 452, 452, 460, 452, 469, 471, 
	471, 471, 471, 471, 471, 471, 471, 471, 
	471, 470, 470, 470, 470, 470, 470, 470, 
	471, 471, 471, 471, 471, 471, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	470, 470, 470, 470, 470, 470, 470, 470, 
	471, 471, 471, 471, 471, 471, 470, 470, 
	473, 472, 472, 472, 473, 472, 472, 472, 
	472, 474, 475, 474, 474, 474, 472, 472, 
	472, 472, 472, 472, 472, 472, 472, 472, 
	472, 472, 473, 472, 472, 472, 472, 472, 
	474, 472, 472, 472, 472, 472, 472, 472, 
	472, 472, 472, 472, 472, 472, 472, 472, 
	472, 472, 472, 472, 472, 472, 472, 472, 
	472, 472, 472, 472, 472, 472, 472, 472, 
	472, 472, 472, 472, 472, 472, 472, 472, 
	472, 472, 472, 472, 472, 472, 472, 472, 
	472, 472, 472, 472, 472, 472, 472, 472, 
	472, 472, 472, 472, 476, 472, 474, 477, 
	474, 474, 474, 477, 477, 477, 477, 477, 
	477, 477, 477, 477, 477, 477, 477, 477, 
	477, 477, 477, 477, 477, 474, 477, 478, 
	479, 479, 479, 478, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 479, 479, 479, 479, 479, 479, 479, 
	479, 478, 479, 481, 480, 480, 480, 481, 
	480, 480, 480, 480, 480, 482, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 481, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 480, 
	480, 480, 480, 480, 480, 480, 480, 483, 
	480, 484, 485, 485, 485, 484, 485, 485, 
	485, 485, 485, 486, 485, 485, 485, 485, 
	485, 485, 485, 485, 485, 485, 485, 485, 
	485, 485, 485, 484, 485, 488, 487, 487, 
	487, 488, 487, 487, 487, 487, 487, 489, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	487, 487, 487, 487, 487, 487, 487, 488, 
	487, 487, 487, 487, 487, 487, 487, 487, 
	490, 487, 492, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 493, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 491, 491, 491, 491, 491, 491, 491, 
	491, 494, 491, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 495, 495, 495, 495, 495, 
	495, 495, 495, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 495, 495, 495, 
	495, 495, 495, 495, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 495, 495, 
	495, 495, 75, 495, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 75, 75, 
	75, 75, 75, 75, 75, 75, 495, 495, 
	495, 495, 495, 75, 78, 78, 78, 78, 
	78, 78, 78, 78, 78, 78, 495, 497, 
	496, 496, 496, 497, 496, 496, 496, 496, 
	496, 498, 496, 496, 496, 496, 496, 496, 
	496, 496, 496, 496, 496, 496, 496, 496, 
	496, 497, 496, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 499, 499, 499, 
	499, 499, 499, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 499, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	501, 501, 501, 501, 501, 501, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	500, 500, 500, 500, 500, 500, 500, 500, 
	501, 502, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 503, 82, 504, 
	504, 504, 504, 504, 504, 504, 504, 504, 
	504, 504, 504, 504, 504, 504, 504, 504, 
	504, 504, 504, 504, 504, 504, 504, 504, 
	504, 504, 504, 504, 504, 504, 504, 504, 
	504, 504, 504, 504, 504, 504, 504, 504, 
	504, 504, 504, 504, 504, 504, 504, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 504, 504, 504, 504, 504, 504, 504, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 504, 504, 504, 504, 80, 504, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 80, 80, 80, 80, 80, 80, 
	80, 80, 504, 504, 504, 504, 504, 80, 
	84, 84, 84, 84, 84, 84, 84, 84, 
	84, 84, 504, 505, 505, 505, 505, 505, 
	505, 505, 505, 505, 505, 505, 505, 505, 
	505, 505, 505, 505, 505, 505, 505, 505, 
	505, 505, 505, 505, 505, 505, 505, 505, 
	505, 505, 505, 505, 505, 505, 505, 505, 
	505, 505, 505, 505, 505, 505, 505, 505, 
	505, 505, 505, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 505, 505, 505, 
	505, 505, 505, 505, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 505, 505, 
	505, 505, 85, 505, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 
	85, 85, 85, 85, 85, 85, 505, 505, 
	505, 505, 505, 85, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 506, 506, 506, 506, 
	506, 506, 506, 506, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 506, 506, 
	506, 506, 506, 506, 506, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 506, 
	506, 506, 506, 87, 506, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 87, 
	87, 87, 87, 87, 87, 87, 87, 506, 
	506, 506, 506, 506, 87, 508, 509, 509, 
	509, 508, 509, 509, 509, 509, 510, 511, 
	510, 510, 510, 509, 509, 509, 509, 509, 
	509, 509, 509, 509, 509, 509, 509, 508, 
	509, 509, 509, 509, 509, 510, 512, 509, 
	513, 514, 515, 516, 509, 509, 509, 517, 
	518, 509, 518, 509, 515, 509, 509, 509, 
	509, 509, 509, 509, 509, 509, 509, 519, 
	509, 520, 521, 522, 509, 509, 523, 524, 
	523, 523, 525, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	526, 527, 509, 515, 528, 515, 529, 530, 
	531, 532, 533, 534, 507, 507, 535, 507, 
	507, 507, 536, 537, 538, 507, 507, 539, 
	540, 541, 542, 507, 543, 507, 544, 507, 
	509, 545, 509, 518, 509, 507, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 547, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	546, 546, 546, 547, 546, 547, 546, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 546, 546, 546, 546, 507, 546, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 546, 546, 546, 546, 546, 507, 510, 
	548, 510, 510, 510, 548, 548, 548, 548, 
	548, 548, 548, 548, 548, 548, 548, 548, 
	548, 548, 548, 548, 548, 548, 510, 548, 
	549, 515, 550, 550, 515, 550, 550, 550, 
	550, 550, 550, 550, 550, 550, 550, 550, 
	550, 550, 550, 550, 550, 550, 550, 550, 
	550, 550, 550, 550, 550, 550, 550, 550, 
	550, 550, 550, 550, 550, 550, 550, 550, 
	550, 550, 550, 550, 550, 550, 550, 550, 
	550, 550, 550, 550, 550, 550, 550, 550, 
	550, 550, 550, 550, 550, 550, 550, 550, 
	550, 550, 515, 550, 551, 552, 553, 554, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 89, 89, 555, 89, 555, 89, 89, 
	555, 555, 89, 89, 89, 557, 89, 89, 
	558, 558, 558, 558, 558, 558, 558, 558, 
	558, 558, 89, 89, 89, 89, 89, 89, 
	89, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 555, 89, 555, 555, 556, 
	89, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 555, 555, 555, 89, 555, 
	556, 559, 559, 559, 559, 559, 559, 559, 
	559, 559, 559, 559, 559, 559, 559, 559, 
	559, 559, 559, 559, 559, 559, 559, 559, 
	559, 559, 559, 559, 559, 559, 559, 559, 
	559, 559, 559, 559, 559, 559, 559, 559, 
	559, 559, 559, 559, 559, 559, 559, 559, 
	559, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 559, 559, 559, 559, 559, 
	559, 559, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 559, 559, 559, 559, 
	556, 559, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 556, 556, 556, 556, 
	556, 556, 556, 556, 559, 559, 559, 559, 
	559, 556, 558, 558, 558, 558, 558, 558, 
	558, 558, 558, 558, 559, 515, 550, 515, 
	550, 515, 550, 561, 560, 515, 562, 550, 
	515, 550, 563, 515, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 555, 555, 555, 555, 555, 
	555, 555, 555, 515, 555, 515, 550, 515, 
	515, 550, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 546, 547, 546, 546, 546, 546, 
	546, 546, 546, 546, 546, 546, 546, 546, 
	546, 546, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 546, 546, 546, 547, 
	546, 547, 546, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 546, 546, 546, 
	546, 523, 546, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 546, 546, 546, 
	546, 546, 523, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 547, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 564, 564, 564, 
	547, 564, 547, 564, 523, 523, 523, 523, 
	565, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 564, 564, 
	564, 564, 523, 564, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 564, 564, 
	564, 564, 564, 523, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 547, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 564, 564, 
	564, 547, 564, 547, 564, 523, 523, 523, 
	523, 523, 523, 566, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 564, 
	564, 564, 564, 523, 564, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 564, 
	564, 564, 564, 564, 523, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 547, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 564, 
	564, 564, 547, 564, 547, 564, 523, 523, 
	523, 523, 523, 523, 523, 523, 567, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	564, 564, 564, 564, 523, 564, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	564, 564, 564, 564, 564, 523, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 547, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	564, 564, 564, 547, 564, 547, 564, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 568, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 564, 564, 564, 564, 523, 564, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 564, 564, 564, 564, 564, 523, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	547, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 564, 564, 564, 547, 564, 547, 564, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 569, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 564, 564, 564, 564, 523, 564, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 564, 564, 564, 564, 564, 523, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	564, 547, 564, 564, 564, 564, 564, 564, 
	564, 564, 564, 564, 564, 564, 564, 564, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 564, 564, 564, 547, 564, 547, 
	564, 523, 523, 523, 568, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 564, 564, 564, 564, 523, 
	564, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 523, 523, 523, 523, 523, 
	523, 523, 523, 564, 564, 564, 564, 564, 
	523, 563, 555, 511, 555, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 547, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 547, 570, 547, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 571, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 570, 507, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 547, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 547, 570, 547, 570, 507, 
	507, 507, 507, 572, 573, 507, 507, 507, 
	507, 507, 574, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 507, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 570, 507, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	547, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 547, 570, 547, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 575, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 507, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 570, 507, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 547, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 547, 570, 547, 
	570, 507, 507, 576, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 507, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 570, 
	507, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 547, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 547, 570, 
	547, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	577, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	507, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	570, 507, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 547, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 547, 
	570, 547, 570, 507, 507, 507, 578, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 507, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 570, 507, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 547, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	547, 570, 547, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 579, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 507, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 570, 507, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 547, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 547, 570, 547, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 580, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 507, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 570, 507, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 547, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 547, 570, 547, 570, 507, 507, 
	507, 507, 507, 507, 581, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 507, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 570, 507, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 547, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 547, 570, 547, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 582, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 570, 507, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	547, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 547, 570, 547, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 583, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 570, 507, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 547, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 547, 570, 547, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 584, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 507, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 570, 
	507, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 547, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 547, 570, 
	547, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 585, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	507, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	570, 507, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 547, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 547, 
	570, 547, 570, 507, 507, 507, 507, 581, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 507, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 570, 507, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 547, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	547, 570, 547, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 586, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 507, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 570, 507, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 547, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 547, 570, 547, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 585, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 507, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 570, 507, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 547, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 547, 570, 547, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 507, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 587, 507, 588, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 570, 507, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 547, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 547, 570, 547, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 507, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 589, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 570, 507, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	547, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 547, 570, 547, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 507, 570, 
	590, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 570, 507, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 547, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 547, 570, 547, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 507, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 583, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 570, 
	507, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 547, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 547, 570, 
	547, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	507, 570, 507, 507, 507, 583, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	570, 507, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 547, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 547, 
	570, 547, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 507, 570, 507, 507, 507, 507, 591, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 592, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 570, 507, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 547, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	547, 570, 547, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 507, 570, 507, 507, 507, 507, 
	507, 507, 593, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 570, 507, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 547, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 547, 570, 547, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 507, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 594, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 570, 507, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 547, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 547, 570, 547, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 507, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 583, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 570, 507, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 547, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 547, 570, 547, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 507, 570, 507, 
	507, 507, 507, 595, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 570, 507, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	547, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 547, 570, 547, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 507, 570, 
	596, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 570, 507, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 547, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 547, 570, 547, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 507, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 583, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 570, 
	507, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 547, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 547, 570, 
	547, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	507, 570, 597, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 598, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	570, 507, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 547, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 547, 
	570, 547, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 507, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 599, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 570, 507, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 547, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	547, 570, 547, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 507, 570, 507, 507, 507, 507, 
	583, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 570, 507, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 547, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 547, 570, 547, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 507, 570, 600, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 570, 507, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 547, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 547, 570, 547, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 507, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	590, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 570, 507, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 547, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 547, 570, 547, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 507, 570, 507, 
	507, 507, 507, 601, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 583, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 570, 507, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	547, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 547, 570, 547, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 507, 570, 
	507, 507, 507, 507, 507, 602, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 570, 507, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	603, 547, 603, 603, 603, 603, 603, 603, 
	603, 603, 603, 603, 603, 603, 603, 603, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 603, 603, 603, 547, 603, 547, 
	603, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 603, 603, 603, 603, 507, 
	603, 507, 507, 507, 507, 507, 507, 507, 
	507, 604, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 603, 603, 603, 603, 603, 
	507, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 547, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 547, 570, 
	547, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	507, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 605, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	570, 507, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 547, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 547, 
	570, 547, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 507, 570, 507, 507, 507, 507, 606, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 570, 507, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 547, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	547, 570, 547, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 507, 570, 507, 507, 507, 607, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 570, 507, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 547, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 547, 570, 608, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 507, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 570, 507, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 547, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 547, 570, 547, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 507, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 609, 507, 610, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 570, 507, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 547, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 547, 570, 547, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 507, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 611, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 570, 507, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	547, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 547, 570, 547, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 507, 570, 
	507, 507, 507, 507, 583, 507, 507, 507, 
	612, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 570, 507, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 547, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 547, 570, 547, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 507, 
	570, 507, 507, 507, 507, 507, 583, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 570, 
	507, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 547, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 547, 570, 
	547, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	507, 570, 507, 507, 507, 583, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 613, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	570, 507, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 547, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 547, 
	570, 547, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 507, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 614, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 570, 507, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 547, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	547, 570, 547, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 507, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 599, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 570, 507, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 547, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 547, 570, 547, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 507, 570, 615, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 538, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 570, 507, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 547, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 547, 570, 547, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 507, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 597, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 570, 507, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 547, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 547, 570, 547, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 507, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	583, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 570, 507, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	547, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 547, 570, 547, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 507, 570, 
	507, 507, 507, 507, 507, 583, 507, 507, 
	507, 507, 507, 507, 507, 583, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 570, 507, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 547, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 547, 570, 547, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 507, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 616, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 570, 
	507, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 547, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 547, 570, 
	547, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	507, 570, 507, 507, 507, 617, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	570, 507, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 547, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 547, 
	570, 547, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 507, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 618, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 570, 507, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 547, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	547, 570, 547, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 507, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 599, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 570, 507, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 547, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 547, 570, 547, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 507, 570, 507, 507, 507, 
	507, 619, 507, 507, 507, 620, 507, 507, 
	507, 507, 507, 621, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 570, 507, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 547, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 547, 570, 547, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 507, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 621, 507, 507, 
	570, 570, 570, 570, 570, 507, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 547, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 547, 570, 547, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 507, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 583, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 570, 507, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	547, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 547, 570, 547, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 507, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 583, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 570, 507, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 547, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 547, 570, 547, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 507, 
	570, 507, 507, 507, 507, 622, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 570, 
	507, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 547, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 547, 570, 
	547, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	507, 570, 507, 507, 507, 623, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 624, 625, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	570, 507, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 547, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 547, 
	570, 547, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 507, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 583, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 570, 507, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 547, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	547, 570, 547, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 507, 570, 507, 507, 626, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 570, 507, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 547, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 547, 570, 547, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 507, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 599, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 570, 507, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 547, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 547, 570, 547, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 507, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 627, 
	507, 507, 628, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 570, 507, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 547, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 547, 570, 547, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 507, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 583, 
	507, 570, 570, 570, 570, 570, 507, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	547, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 547, 570, 547, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 507, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 594, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 570, 507, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 547, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 547, 570, 547, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 507, 
	570, 507, 507, 507, 507, 629, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 630, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 570, 
	507, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 547, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 547, 570, 
	547, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	507, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 612, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	570, 507, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 547, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 547, 
	570, 547, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 507, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 631, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 570, 507, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 547, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	547, 570, 547, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 507, 570, 507, 507, 507, 507, 
	538, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 570, 507, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 547, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 547, 570, 547, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 507, 570, 507, 507, 507, 
	507, 507, 507, 507, 632, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 626, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 570, 507, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 547, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 547, 570, 547, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 507, 570, 507, 507, 
	507, 507, 594, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 570, 507, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 547, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 547, 570, 547, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 507, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 633, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 570, 507, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	547, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 547, 570, 547, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 507, 570, 
	507, 507, 507, 634, 507, 507, 507, 507, 
	507, 507, 507, 635, 507, 507, 507, 507, 
	507, 507, 507, 636, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 570, 507, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 547, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 547, 570, 547, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 507, 
	570, 507, 507, 507, 507, 612, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 570, 570, 
	507, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 547, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 570, 570, 570, 547, 570, 
	547, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	507, 570, 507, 507, 507, 507, 600, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 570, 
	570, 507, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 547, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 570, 570, 570, 547, 
	570, 547, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 507, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 620, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	570, 570, 507, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 547, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 570, 570, 570, 
	547, 570, 547, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 507, 570, 507, 507, 507, 507, 
	507, 507, 507, 637, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 570, 570, 507, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 547, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 570, 570, 
	570, 547, 570, 547, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 507, 570, 507, 507, 507, 
	507, 594, 507, 507, 507, 618, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 570, 570, 507, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 547, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 570, 
	570, 570, 547, 570, 547, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 507, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 638, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 570, 570, 507, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 547, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	570, 570, 570, 547, 570, 547, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 507, 570, 507, 
	507, 507, 507, 639, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 570, 570, 507, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 570, 
	547, 570, 570, 570, 570, 570, 570, 570, 
	570, 570, 570, 570, 570, 570, 570, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 570, 570, 570, 547, 570, 547, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 507, 570, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 507, 588, 507, 507, 507, 507, 
	507, 507, 507, 507, 507, 507, 507, 507, 
	507, 507, 570, 570, 570, 570, 570, 507, 
	515, 550, 641, 642, 642, 642, 641, 642, 
	642, 642, 642, 643, 642, 643, 643, 643, 
	642, 642, 642, 642, 642, 642, 642, 642, 
	642, 642, 642, 642, 641, 642, 642, 642, 
	642, 642, 643, 642, 642, 644, 642, 642, 
	642, 642, 642, 642, 642, 642, 642, 642, 
	642, 642, 642, 642, 642, 642, 642, 642, 
	642, 642, 642, 642, 642, 642, 642, 642, 
	642, 642, 642, 640, 640, 640, 640, 640, 
	640, 640, 640, 640, 640, 640, 640, 640, 
	640, 640, 640, 640, 640, 640, 640, 640, 
	640, 640, 640, 640, 640, 642, 645, 642, 
	642, 640, 642, 640, 640, 640, 640, 640, 
	640, 640, 640, 640, 640, 640, 640, 640, 
	640, 640, 640, 640, 640, 640, 640, 640, 
	640, 640, 640, 640, 640, 642, 642, 642, 
	642, 642, 640, 646, 646, 646, 646, 646, 
	646, 646, 646, 646, 646, 646, 646, 646, 
	646, 646, 646, 646, 646, 646, 646, 646, 
	646, 646, 646, 646, 646, 646, 646, 646, 
	646, 646, 646, 646, 92, 646, 646, 646, 
	646, 646, 646, 646, 646, 646, 646, 646, 
	646, 646, 646, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 93, 646, 646, 
	646, 646, 92, 646, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 646, 646, 
	646, 646, 91, 646, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 91, 91, 
	91, 91, 91, 91, 91, 91, 646, 646, 
	646, 646, 646, 91, 643, 647, 643, 643, 
	643, 647, 647, 647, 647, 647, 647, 647, 
	647, 647, 647, 647, 647, 647, 647, 647, 
	647, 647, 647, 643, 647, 648, 649, 650, 
	651, 652, 646, 653, 655, 656, 656, 656, 
	655, 656, 656, 656, 656, 657, 658, 657, 
	657, 657, 656, 656, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 655, 656, 
	656, 656, 656, 656, 657, 659, 656, 660, 
	656, 661, 662, 656, 656, 656, 663, 664, 
	656, 664, 656, 661, 656, 656, 656, 656, 
	656, 656, 656, 656, 656, 656, 656, 656, 
	665, 666, 667, 656, 656, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 669, 
	670, 656, 661, 654, 661, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 656, 
	671, 656, 664, 656, 654, 672, 672, 672, 
	672, 672, 672, 672, 672, 672, 672, 672, 
	672, 672, 672, 672, 672, 672, 672, 672, 
	672, 672, 672, 672, 672, 672, 672, 672, 
	672, 672, 672, 672, 672, 672, 673, 672, 
	672, 672, 672, 672, 672, 672, 672, 672, 
	672, 672, 672, 672, 672, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 672, 
	672, 672, 672, 672, 674, 672, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	672, 672, 672, 672, 654, 672, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	654, 654, 654, 654, 654, 654, 654, 654, 
	672, 672, 672, 672, 672, 654, 676, 675, 
	677, 675, 657, 678, 657, 657, 657, 678, 
	678, 678, 678, 678, 678, 678, 678, 678, 
	678, 678, 678, 678, 678, 678, 678, 678, 
	678, 657, 678, 679, 661, 680, 680, 661, 
	680, 680, 680, 680, 680, 680, 680, 680, 
	680, 680, 680, 680, 680, 680, 680, 680, 
	680, 680, 680, 680, 680, 680, 680, 680, 
	680, 680, 680, 680, 680, 680, 680, 680, 
	680, 680, 680, 680, 680, 680, 680, 680, 
	680, 680, 680, 680, 680, 680, 680, 680, 
	680, 680, 680, 680, 680, 680, 680, 680, 
	680, 680, 680, 680, 680, 661, 680, 681, 
	682, 683, 684, 661, 680, 661, 680, 661, 
	680, 661, 685, 680, 661, 680, 687, 661, 
	686, 686, 686, 686, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 686, 686, 
	686, 686, 686, 686, 686, 686, 686, 661, 
	686, 661, 680, 661, 661, 680, 688, 688, 
	688, 688, 688, 688, 688, 688, 688, 688, 
	688, 688, 688, 688, 688, 688, 688, 688, 
	688, 688, 688, 688, 688, 688, 688, 688, 
	688, 688, 688, 688, 688, 688, 688, 673, 
	688, 688, 688, 688, 688, 688, 688, 688, 
	688, 688, 688, 688, 688, 688, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	688, 688, 688, 688, 688, 674, 688, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 688, 688, 688, 688, 668, 688, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 668, 668, 668, 668, 668, 668, 668, 
	668, 688, 688, 688, 688, 688, 668, 687, 
	686, 658, 686, 661, 680, 690, 689, 689, 
	689, 690, 689, 689, 689, 689, 691, 692, 
	691, 691, 691, 689, 689, 689, 689, 689, 
	689, 689, 689, 689, 689, 689, 689, 690, 
	689, 689, 689, 689, 689, 691, 689, 689, 
	693, 689, 100, 694, 689, 695, 689, 696, 
	100, 131, 697, 133, 100, 689, 689, 689, 
	689, 689, 689, 689, 689, 689, 689, 698, 
	689, 699, 131, 700, 701, 689, 689, 689, 
	689, 689, 689, 689, 689, 689, 689, 689, 
	689, 689, 689, 689, 689, 689, 689, 689, 
	689, 689, 689, 689, 689, 689, 689, 689, 
	131, 702, 131, 100, 689, 689, 689, 689, 
	689, 689, 689, 689, 689, 689, 703, 689, 
	689, 689, 689, 689, 689, 689, 689, 704, 
	689, 689, 705, 689, 706, 689, 689, 689, 
	144, 145, 689, 100, 689, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 691, 707, 
	691, 691, 691, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 707, 
	707, 707, 707, 707, 707, 691, 707, 707, 
	707, 707, 126, 127, 707, 128, 707, 129, 
	130, 131, 132, 133, 126, 707, 707, 707, 
	707, 707, 707, 707, 707, 707, 707, 134, 
	707, 135, 131, 136, 137, 707, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	138, 139, 131, 100, 95, 707, 95, 95, 
	95, 95, 95, 95, 95, 95, 140, 95, 
	95, 95, 95, 95, 95, 95, 95, 141, 
	95, 95, 142, 95, 143, 95, 95, 95, 
	144, 145, 707, 100, 707, 95, 708, 709, 
	709, 709, 708, 709, 709, 709, 709, 131, 
	710, 131, 131, 131, 709, 709, 709, 709, 
	709, 709, 709, 709, 709, 709, 709, 709, 
	708, 709, 709, 709, 709, 709, 131, 709, 
	709, 709, 709, 709, 709, 709, 709, 709, 
	709, 709, 709, 709, 709, 709, 709, 709, 
	709, 709, 709, 709, 709, 709, 709, 709, 
	709, 709, 709, 131, 709, 131, 710, 131, 
	131, 131, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 131, 94, 94, 94, 
	94, 94, 100, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 131, 94, 131, 710, 131, 131, 131, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 131, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 131, 
	94, 711, 131, 710, 131, 131, 131, 712, 
	712, 712, 712, 712, 712, 712, 712, 712, 
	712, 712, 712, 712, 712, 712, 712, 712, 
	712, 131, 712, 712, 712, 712, 712, 712, 
	712, 712, 712, 713, 712, 712, 712, 712, 
	712, 712, 712, 712, 712, 712, 712, 712, 
	712, 712, 712, 712, 712, 712, 131, 712, 
	131, 710, 131, 131, 131, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 131, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 94, 94, 94, 94, 
	94, 94, 94, 94, 131, 131, 94, 714, 
	708, 131, 708, 716, 715, 718, 719, 718, 
	718, 718, 717, 717, 717, 717, 717, 717, 
	717, 717, 717, 717, 717, 717, 717, 717, 
	717, 717, 717, 717, 718, 717, 720, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	96, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 97, 708, 708, 708, 708, 96, 708, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 708, 708, 708, 708, 95, 708, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 95, 95, 95, 95, 95, 95, 
	95, 95, 708, 708, 708, 708, 708, 95, 
	721, 131, 710, 131, 131, 131, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	131, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 131, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 100, 708, 722, 723, 
	724, 725, 726, 727, 131, 710, 131, 131, 
	131, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 131, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 100, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	708, 708, 708, 708, 708, 708, 708, 708, 
	131, 708, 131, 715, 100, 728, 100, 728, 
	729, 730, 729, 729, 729, 717, 717, 717, 
	717, 717, 717, 717, 717, 717, 717, 717, 
	717, 717, 717, 717, 717, 717, 717, 729, 
	717, 731, 728, 732, 732, 732, 732, 732, 
	732, 732, 732, 732, 103, 732, 103, 103, 
	103, 732, 732, 732, 732, 732, 732, 732, 
	732, 732, 732, 732, 732, 732, 732, 732, 
	732, 732, 732, 103, 732, 732, 732, 732, 
	104, 105, 732, 106, 732, 107, 108, 109, 
	110, 111, 104, 732, 732, 732, 732, 732, 
	732, 732, 732, 732, 732, 112, 732, 113, 
	109, 114, 115, 732, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 102, 102, 
	102, 102, 102, 102, 102, 102, 116, 117, 
	109, 118, 102, 732, 102, 102, 102, 102, 
	102, 102, 102, 102, 119, 102, 102, 102, 
	102, 102, 102, 102, 102, 120, 102, 102, 
	121, 102, 122, 102, 102, 102, 123, 124, 
	732, 118, 732, 102, 131, 728, 733, 728, 
	734, 728, 735, 728, 736, 170, 170, 170, 
	736, 170, 170, 170, 170, 737, 170, 737, 
	737, 737, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 736, 170, 
	170, 170, 170, 170, 737, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 170, 170, 170, 
	170, 170, 170, 170, 170, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 170, 
	738, 170, 170, 172, 170, 172, 172, 172, 
	176, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 170, 
	170, 170, 170, 170, 172, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 169, 739, 169, 
	169, 169, 169, 169, 169, 169, 169, 169, 
	169, 169, 169, 169, 169, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 170, 
	169, 169, 169, 169, 739, 169, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	169, 169, 169, 169, 172, 169, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	169, 169, 169, 169, 169, 172, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 173, 
	740, 173, 173, 173, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 173, 740, 
	740, 740, 740, 740, 740, 740, 174, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 740, 175, 740, 740, 172, 740, 172, 
	172, 172, 176, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 740, 740, 740, 740, 740, 172, 741, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	740, 739, 740, 740, 740, 740, 740, 740, 
	740, 740, 740, 740, 740, 740, 740, 740, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 170, 740, 740, 740, 740, 739, 
	740, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 740, 740, 740, 740, 172, 
	740, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 172, 172, 172, 172, 742, 
	172, 172, 172, 172, 172, 172, 172, 172, 
	172, 172, 172, 740, 740, 740, 740, 740, 
	172, 177, 740, 744, 743, 743, 743, 744, 
	743, 743, 743, 743, 745, 743, 745, 745, 
	745, 743, 743, 743, 743, 743, 743, 743, 
	743, 743, 743, 743, 743, 744, 743, 743, 
	743, 743, 743, 745, 743, 743, 746, 743, 
	743, 743, 743, 743, 743, 743, 743, 743, 
	743, 743, 743, 743, 743, 743, 743, 743, 
	743, 743, 743, 743, 743, 743, 743, 743, 
	743, 743, 743, 743, 743, 743, 743, 743, 
	743, 743, 743, 743, 743, 743, 743, 743, 
	743, 743, 743, 743, 743, 743, 743, 743, 
	743, 743, 743, 743, 743, 743, 743, 747, 
	743, 743, 743, 743, 743, 743, 743, 748, 
	743, 743, 743, 743, 743, 743, 743, 743, 
	743, 743, 743, 743, 743, 743, 743, 743, 
	743, 743, 743, 743, 743, 743, 749, 743, 
	745, 750, 745, 745, 745, 750, 750, 750, 
	750, 750, 750, 750, 750, 750, 750, 750, 
	750, 750, 750, 750, 750, 750, 750, 745, 
	750, 751, 752, 753, 754, 756, 755, 757, 
	758, 755, 759, 761, 762, 762, 762, 761, 
	762, 762, 762, 762, 763, 764, 763, 763, 
	763, 762, 762, 762, 762, 762, 762, 762, 
	762, 762, 762, 762, 762, 761, 762, 762, 
	762, 762, 762, 763, 762, 762, 765, 762, 
	762, 762, 762, 762, 762, 762, 762, 762, 
	762, 762, 762, 762, 762, 762, 762, 762, 
	762, 762, 762, 762, 762, 762, 762, 762, 
	762, 762, 762, 762, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 762, 766, 
	762, 762, 760, 762, 760, 760, 760, 760, 
	760, 760, 760, 760, 767, 760, 760, 760, 
	760, 760, 760, 760, 760, 768, 760, 760, 
	769, 760, 770, 760, 760, 760, 762, 762, 
	762, 762, 762, 760, 771, 771, 771, 771, 
	771, 771, 771, 771, 771, 771, 771, 771, 
	771, 771, 771, 771, 771, 771, 771, 771, 
	771, 771, 771, 771, 771, 771, 771, 771, 
	771, 771, 771, 771, 771, 771, 771, 771, 
	771, 771, 771, 771, 771, 771, 771, 771, 
	771, 771, 771, 771, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 771, 771, 
	771, 771, 771, 771, 771, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 771, 
	771, 771, 771, 760, 771, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 771, 
	771, 771, 771, 771, 760, 763, 772, 763, 
	763, 763, 772, 772, 772, 772, 772, 772, 
	772, 772, 772, 772, 772, 772, 772, 772, 
	772, 772, 772, 772, 763, 772, 773, 774, 
	775, 776, 777, 779, 778, 780, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	781, 781, 781, 781, 781, 781, 781, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 781, 781, 781, 781, 760, 781, 760, 
	760, 760, 760, 760, 782, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 781, 781, 781, 781, 781, 760, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 781, 781, 781, 781, 781, 781, 781, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 781, 781, 781, 781, 760, 781, 
	760, 760, 760, 760, 783, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 781, 781, 781, 781, 781, 760, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 781, 781, 781, 781, 781, 781, 
	781, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 781, 781, 781, 781, 760, 
	781, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 784, 760, 760, 760, 760, 
	760, 760, 760, 781, 781, 781, 781, 781, 
	760, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 781, 781, 781, 781, 781, 
	781, 781, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 781, 781, 781, 781, 
	760, 781, 760, 760, 785, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 781, 781, 781, 781, 
	781, 760, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 781, 781, 781, 781, 
	781, 781, 781, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 781, 781, 781, 
	781, 760, 781, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 786, 
	760, 760, 760, 760, 760, 781, 781, 781, 
	781, 781, 760, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 781, 781, 781, 
	781, 781, 781, 781, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 781, 781, 
	781, 781, 760, 781, 760, 760, 760, 760, 
	782, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 781, 781, 
	781, 781, 781, 760, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 781, 781, 
	781, 781, 781, 781, 781, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 781, 
	781, 781, 781, 760, 781, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 787, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 781, 
	781, 781, 781, 781, 760, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 781, 
	781, 781, 781, 781, 781, 781, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	781, 781, 781, 781, 760, 781, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 788, 760, 760, 760, 760, 760, 760, 
	760, 789, 760, 760, 760, 760, 760, 760, 
	781, 781, 781, 781, 781, 760, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	781, 781, 781, 781, 781, 781, 781, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 781, 781, 781, 781, 760, 781, 760, 
	760, 760, 760, 790, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 781, 781, 781, 781, 781, 760, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 781, 781, 781, 781, 781, 781, 781, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 781, 781, 781, 781, 760, 781, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 791, 760, 760, 760, 760, 760, 
	760, 760, 781, 781, 781, 781, 781, 760, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 781, 781, 781, 781, 781, 781, 
	781, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 781, 781, 781, 781, 760, 
	781, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 782, 760, 760, 760, 760, 
	760, 760, 760, 781, 781, 781, 781, 781, 
	760, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 781, 781, 781, 781, 781, 
	781, 781, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 781, 781, 781, 781, 
	760, 781, 760, 760, 760, 760, 760, 760, 
	760, 760, 792, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 781, 781, 781, 781, 
	781, 760, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 781, 781, 781, 781, 
	781, 781, 781, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 781, 781, 781, 
	781, 760, 781, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 782, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 781, 781, 781, 
	781, 781, 760, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 781, 781, 781, 
	781, 781, 781, 781, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 781, 781, 
	781, 781, 760, 781, 760, 760, 760, 760, 
	760, 760, 760, 793, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 781, 781, 
	781, 781, 781, 760, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 781, 781, 
	781, 781, 781, 781, 781, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 781, 
	781, 781, 781, 760, 781, 760, 760, 760, 
	760, 760, 760, 760, 760, 794, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 781, 
	781, 781, 781, 781, 760, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 781, 781, 781, 
	781, 781, 781, 781, 781, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 781, 
	781, 781, 781, 781, 781, 781, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	781, 781, 781, 781, 760, 781, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	760, 786, 760, 760, 760, 760, 760, 760, 
	760, 760, 760, 760, 760, 760, 760, 760, 
	781, 781, 781, 781, 781, 760, 796, 194, 
	194, 194, 796, 194, 194, 194, 194, 797, 
	798, 797, 797, 797, 194, 194, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	796, 194, 194, 194, 194, 194, 797, 799, 
	194, 800, 194, 801, 802, 194, 803, 194, 
	804, 805, 194, 806, 807, 808, 194, 194, 
	194, 194, 194, 194, 194, 194, 194, 194, 
	809, 194, 810, 811, 812, 813, 194, 814, 
	815, 814, 814, 816, 814, 814, 814, 814, 
	814, 814, 814, 814, 814, 814, 814, 814, 
	814, 814, 814, 814, 814, 814, 814, 814, 
	814, 817, 818, 194, 819, 820, 194, 821, 
	822, 823, 824, 825, 826, 795, 795, 827, 
	795, 795, 795, 828, 829, 830, 795, 795, 
	831, 832, 833, 834, 795, 835, 795, 836, 
	795, 837, 838, 194, 819, 194, 795, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	239, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 240, 183, 183, 241, 183, 242, 183, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 183, 183, 183, 183, 795, 183, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 183, 183, 183, 183, 183, 795, 
	840, 839, 839, 841, 839, 842, 844, 845, 
	843, 843, 843, 843, 843, 843, 843, 843, 
	843, 843, 843, 843, 843, 843, 843, 843, 
	843, 843, 843, 843, 843, 843, 843, 843, 
	843, 843, 843, 843, 843, 843, 843, 843, 
	843, 843, 843, 843, 843, 843, 843, 843, 
	843, 843, 843, 843, 843, 843, 843, 843, 
	843, 843, 843, 843, 843, 843, 843, 843, 
	843, 843, 843, 843, 843, 843, 843, 846, 
	843, 848, 847, 849, 850, 851, 840, 839, 
	797, 852, 797, 797, 797, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 852, 
	852, 852, 852, 852, 852, 852, 852, 797, 
	852, 854, 853, 856, 857, 856, 856, 856, 
	855, 855, 855, 855, 855, 855, 855, 855, 
	855, 855, 855, 855, 855, 855, 855, 855, 
	855, 855, 856, 855, 194, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 194, 858, 859, 
	860, 861, 862, 865, 865, 865, 865, 865, 
	865, 865, 865, 865, 865, 865, 865, 865, 
	865, 865, 865, 865, 865, 865, 865, 865, 
	865, 865, 865, 865, 865, 864, 864, 864, 
	864, 864, 864, 865, 865, 865, 865, 865, 
	865, 865, 865, 865, 865, 865, 865, 865, 
	865, 865, 865, 865, 865, 865, 865, 865, 
	865, 865, 865, 865, 865, 864, 866, 192, 
	192, 192, 866, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	866, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 192, 
	192, 192, 192, 192, 192, 192, 192, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 192, 192, 192, 192, 192, 192, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 193, 193, 193, 193, 193, 193, 193, 
	193, 192, 868, 867, 867, 867, 867, 867, 
	867, 867, 867, 867, 867, 867, 867, 867, 
	867, 867, 867, 867, 867, 867, 867, 867, 
	867, 194, 867, 869, 871, 870, 870, 870, 
	870, 870, 870, 870, 870, 870, 870, 870, 
	870, 870, 870, 870, 870, 870, 870, 194, 
	870, 194, 183, 872, 872, 872, 872, 872, 
	872, 872, 872, 872, 872, 867, 867, 867, 
	194, 867, 872, 872, 872, 872, 872, 872, 
	872, 872, 872, 872, 867, 867, 867, 194, 
	194, 867, 873, 858, 194, 858, 858, 874, 
	874, 874, 858, 874, 874, 874, 874, 874, 
	874, 874, 874, 874, 874, 874, 874, 874, 
	874, 874, 874, 874, 874, 874, 874, 874, 
	858, 874, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 876, 877, 858, 878, 197, 
	879, 877, 858, 858, 880, 881, 858, 881, 
	858, 197, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 882, 858, 883, 884, 
	885, 858, 886, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 887, 858, 858, 
	197, 875, 197, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 858, 888, 858, 
	881, 858, 875, 889, 889, 889, 889, 889, 
	889, 889, 889, 889, 889, 889, 889, 889, 
	889, 889, 889, 889, 889, 889, 889, 889, 
	889, 889, 889, 889, 889, 889, 889, 889, 
	889, 889, 889, 889, 890, 889, 889, 889, 
	889, 889, 889, 889, 889, 889, 889, 889, 
	889, 889, 889, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 889, 889, 889, 
	891, 889, 892, 889, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 889, 889, 
	889, 889, 875, 889, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 875, 875, 
	875, 875, 875, 875, 875, 875, 889, 889, 
	889, 889, 889, 875, 894, 893, 895, 897, 
	898, 896, 896, 896, 896, 896, 896, 896, 
	896, 896, 896, 896, 896, 896, 896, 896, 
	896, 896, 896, 896, 896, 896, 896, 896, 
	896, 896, 896, 896, 896, 896, 896, 896, 
	896, 896, 896, 896, 896, 896, 896, 896, 
	896, 896, 896, 896, 896, 896, 896, 896, 
	896, 896, 896, 896, 896, 896, 896, 896, 
	896, 896, 896, 896, 896, 896, 896, 896, 
	899, 896, 901, 902, 900, 903, 904, 905, 
	906, 893, 197, 889, 889, 197, 889, 889, 
	889, 889, 889, 889, 889, 889, 889, 889, 
	889, 889, 889, 889, 889, 889, 889, 889, 
	889, 889, 889, 889, 889, 889, 889, 889, 
	889, 889, 889, 889, 889, 889, 889, 889, 
	889, 889, 889, 889, 889, 889, 889, 889, 
	889, 889, 889, 889, 889, 889, 889, 889, 
	889, 889, 889, 889, 889, 889, 889, 889, 
	889, 889, 889, 197, 889, 889, 889, 889, 
	889, 889, 889, 889, 889, 889, 889, 889, 
	889, 889, 889, 889, 889, 889, 889, 889, 
	889, 889, 889, 889, 889, 889, 889, 889, 
	889, 889, 889, 889, 889, 889, 889, 889, 
	889, 889, 889, 889, 889, 889, 889, 889, 
	889, 889, 889, 889, 889, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 889, 
	889, 889, 889, 889, 889, 889, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	889, 889, 889, 889, 196, 889, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 196, 
	889, 889, 889, 889, 889, 196, 199, 199, 
	199, 199, 199, 199, 199, 199, 199, 199, 
	889, 197, 889, 197, 889, 197, 889, 197, 
	907, 889, 197, 889, 197, 889, 197, 197, 
	889, 197, 889, 908, 909, 858, 910, 194, 
	858, 819, 194, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 194, 858, 194, 868, 858, 913, 
	912, 912, 912, 913, 912, 912, 912, 912, 
	914, 915, 914, 914, 914, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 913, 912, 912, 912, 912, 912, 914, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	912, 912, 912, 912, 912, 912, 912, 912, 
	916, 916, 916, 916, 916, 916, 916, 916, 
	916, 916, 916, 916, 916, 916, 916, 916, 
	916, 916, 916, 916, 916, 916, 916, 916, 
	916, 916, 912, 917, 912, 912, 916, 912, 
	916, 916, 916, 916, 916, 916, 916, 916, 
	916, 916, 916, 916, 916, 916, 916, 916, 
	916, 916, 916, 916, 916, 916, 916, 916, 
	916, 916, 912, 918, 918, 918, 918, 918, 
	918, 918, 918, 918, 918, 918, 918, 918, 
	918, 918, 918, 918, 918, 918, 918, 918, 
	918, 918, 918, 918, 918, 918, 918, 918, 
	918, 918, 918, 918, 918, 918, 918, 918, 
	918, 918, 918, 918, 918, 918, 918, 918, 
	918, 918, 918, 918, 918, 918, 918, 918, 
	918, 918, 918, 918, 918, 918, 918, 918, 
	918, 918, 918, 918, 918, 919, 919, 919, 
	919, 919, 919, 919, 919, 919, 919, 919, 
	919, 919, 919, 919, 919, 919, 919, 919, 
	919, 919, 919, 919, 919, 919, 919, 918, 
	918, 918, 918, 919, 918, 919, 919, 919, 
	919, 919, 919, 919, 919, 919, 919, 919, 
	919, 919, 919, 919, 919, 919, 919, 919, 
	919, 919, 919, 919, 919, 919, 919, 918, 
	918, 918, 918, 918, 919, 920, 920, 920, 
	920, 920, 920, 920, 920, 920, 920, 920, 
	920, 920, 920, 920, 920, 920, 920, 920, 
	920, 920, 920, 920, 920, 920, 920, 920, 
	920, 920, 920, 920, 920, 920, 920, 920, 
	920, 920, 920, 920, 920, 920, 920, 920, 
	920, 920, 920, 920, 920, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 920, 
	920, 920, 920, 920, 920, 920, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	920, 920, 920, 920, 921, 920, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	921, 921, 921, 921, 921, 921, 921, 921, 
	920, 920, 920, 920, 920, 921, 924, 923, 
	923, 923, 924, 923, 923, 923, 923, 923, 
	923, 923, 923, 923, 923, 923, 923, 923, 
	923, 923, 923, 923, 923, 923, 923, 923, 
	924, 923, 923, 923, 923, 923, 923, 923, 
	923, 923, 923, 923, 923, 923, 923, 923, 
	923, 923, 923, 923, 923, 923, 925, 925, 
	925, 925, 925, 925, 925, 925, 923, 923, 
	923, 923, 923, 923, 923, 923, 923, 923, 
	923, 926, 923, 923, 923, 923, 923, 923, 
	923, 923, 923, 927, 923, 923, 923, 923, 
	923, 923, 923, 923, 923, 923, 923, 923, 
	923, 923, 923, 923, 923, 923, 923, 923, 
	923, 928, 923, 923, 923, 923, 923, 923, 
	923, 923, 923, 923, 923, 923, 923, 923, 
	923, 923, 923, 929, 923, 923, 930, 923, 
	931, 932, 934, 934, 934, 934, 934, 934, 
	934, 934, 933, 935, 935, 935, 935, 935, 
	935, 935, 935, 933, 933, 936, 936, 233, 
	233, 233, 936, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	936, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 234, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 937, 233, 938, 939, 940, 940, 
	233, 233, 233, 940, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 940, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 234, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 233, 233, 233, 233, 233, 
	233, 233, 233, 941, 233, 232, 940, 942, 
	943, 944, 944, 220, 220, 220, 944, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 944, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 221, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 945, 220, 
	940, 214, 214, 214, 940, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 940, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 946, 214, 936, 
	220, 220, 220, 936, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 936, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 221, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 222, 220, 936, 947, 947, 
	947, 936, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 936, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 948, 947, 949, 950, 950, 947, 947, 
	947, 950, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 950, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 947, 947, 947, 947, 947, 947, 947, 
	947, 951, 947, 950, 214, 214, 214, 950, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 950, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	946, 214, 952, 950, 950, 220, 220, 220, 
	950, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 950, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 221, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	222, 220, 953, 954, 954, 954, 953, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 953, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 955, 955, 955, 955, 955, 955, 
	955, 955, 955, 955, 954, 954, 954, 954, 
	954, 954, 954, 955, 955, 955, 955, 955, 
	955, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 955, 955, 955, 955, 955, 
	955, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	954, 954, 954, 954, 954, 956, 954, 953, 
	957, 957, 957, 953, 957, 957, 957, 957, 
	957, 957, 957, 957, 957, 957, 957, 957, 
	957, 957, 957, 957, 957, 957, 957, 957, 
	957, 953, 957, 953, 958, 958, 958, 953, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 953, 958, 953, 
	959, 959, 959, 953, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 953, 959, 953, 953, 957, 957, 957, 
	953, 957, 957, 957, 957, 957, 957, 957, 
	957, 957, 957, 957, 957, 957, 957, 957, 
	957, 957, 957, 957, 957, 957, 953, 957, 
	957, 957, 957, 957, 957, 957, 957, 957, 
	957, 957, 957, 957, 957, 957, 957, 957, 
	957, 957, 957, 957, 960, 960, 960, 960, 
	960, 960, 960, 960, 960, 960, 957, 957, 
	957, 957, 957, 957, 957, 960, 960, 960, 
	960, 960, 960, 957, 957, 957, 957, 957, 
	957, 957, 957, 957, 957, 957, 957, 957, 
	957, 957, 957, 957, 957, 957, 957, 957, 
	957, 957, 957, 957, 957, 960, 960, 960, 
	960, 960, 960, 957, 953, 958, 958, 958, 
	953, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 953, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 961, 961, 961, 961, 
	961, 961, 961, 961, 961, 961, 958, 958, 
	958, 958, 958, 958, 958, 961, 961, 961, 
	961, 961, 961, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 958, 958, 958, 
	958, 958, 958, 958, 958, 961, 961, 961, 
	961, 961, 961, 958, 953, 959, 959, 959, 
	953, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 953, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 962, 962, 962, 962, 
	962, 962, 962, 962, 962, 962, 959, 959, 
	959, 959, 959, 959, 959, 962, 962, 962, 
	962, 962, 962, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 962, 962, 962, 
	962, 962, 962, 959, 963, 966, 965, 965, 
	965, 966, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 966, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 967, 967, 967, 
	967, 967, 967, 967, 967, 967, 967, 965, 
	965, 965, 965, 965, 965, 965, 967, 967, 
	967, 967, 967, 967, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 967, 967, 
	967, 967, 967, 967, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 965, 965, 965, 965, 965, 965, 
	965, 965, 957, 965, 966, 968, 968, 968, 
	966, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 966, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 969, 969, 969, 969, 
	969, 969, 969, 969, 969, 969, 968, 968, 
	968, 968, 968, 968, 968, 969, 969, 969, 
	969, 969, 969, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 969, 969, 969, 
	969, 969, 969, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 970, 968, 966, 971, 971, 971, 966, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 966, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 971, 971, 971, 
	971, 971, 971, 971, 972, 972, 972, 972, 
	972, 972, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 972, 972, 972, 972, 
	972, 972, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	973, 971, 966, 974, 974, 974, 966, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 966, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 974, 974, 974, 974, 
	974, 974, 974, 975, 975, 975, 975, 975, 
	975, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 975, 975, 975, 975, 975, 
	975, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 966, 
	974, 966, 974, 974, 974, 966, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 966, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 974, 974, 974, 974, 974, 
	974, 974, 975, 975, 975, 975, 975, 975, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 975, 975, 975, 975, 975, 975, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 966, 974, 
	976, 966, 975, 975, 975, 966, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 966, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 976, 975, 
	966, 975, 975, 975, 966, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 966, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 975, 975, 975, 
	975, 975, 975, 975, 975, 964, 975, 964, 
	966, 972, 972, 972, 966, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 966, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 972, 972, 972, 
	972, 972, 972, 972, 972, 959, 972, 964, 
	959, 959, 959, 964, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 959, 959, 959, 959, 959, 959, 959, 
	959, 964, 959, 966, 968, 968, 968, 966, 
	968, 968, 968, 968, 977, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 966, 968, 968, 
	968, 968, 968, 977, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 978, 978, 978, 978, 978, 
	978, 978, 978, 978, 978, 968, 968, 968, 
	968, 968, 968, 968, 978, 978, 978, 978, 
	978, 978, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 978, 978, 978, 978, 
	978, 978, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	968, 968, 968, 968, 968, 968, 968, 968, 
	979, 968, 966, 974, 974, 974, 966, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 966, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 980, 980, 980, 980, 980, 980, 
	980, 980, 980, 980, 974, 974, 974, 974, 
	974, 974, 974, 980, 980, 980, 980, 980, 
	980, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 980, 980, 980, 980, 980, 
	980, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 966, 
	974, 966, 974, 974, 974, 966, 974, 974, 
	974, 974, 977, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 966, 974, 974, 974, 974, 
	974, 977, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 981, 981, 981, 981, 981, 981, 981, 
	981, 981, 981, 974, 974, 974, 974, 974, 
	974, 974, 981, 981, 981, 981, 981, 981, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 981, 981, 981, 981, 981, 981, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 976, 974, 
	966, 974, 974, 974, 966, 974, 974, 974, 
	974, 977, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 966, 974, 974, 974, 974, 974, 
	977, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	982, 982, 982, 982, 982, 982, 982, 982, 
	982, 982, 974, 974, 974, 974, 974, 974, 
	974, 982, 982, 982, 982, 982, 982, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 982, 982, 982, 982, 982, 982, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 976, 974, 966, 
	974, 974, 974, 966, 974, 974, 974, 974, 
	977, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 966, 974, 974, 974, 974, 974, 977, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 983, 
	983, 983, 983, 983, 983, 983, 983, 983, 
	983, 974, 974, 974, 974, 974, 974, 974, 
	983, 983, 983, 983, 983, 983, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	983, 983, 983, 983, 983, 983, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 976, 974, 966, 974, 
	974, 974, 966, 974, 974, 974, 974, 977, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	966, 974, 974, 974, 974, 974, 977, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 984, 984, 
	984, 984, 984, 984, 984, 984, 984, 984, 
	974, 974, 974, 974, 974, 974, 974, 984, 
	984, 984, 984, 984, 984, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 984, 
	984, 984, 984, 984, 984, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 976, 974, 966, 974, 974, 
	974, 966, 974, 974, 974, 974, 977, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 966, 
	974, 974, 974, 974, 974, 977, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 985, 985, 985, 
	985, 985, 985, 985, 985, 985, 985, 974, 
	974, 974, 974, 974, 974, 974, 985, 985, 
	985, 985, 985, 985, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 985, 985, 
	985, 985, 985, 985, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 976, 974, 966, 974, 974, 974, 
	966, 974, 974, 974, 974, 977, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 966, 974, 
	974, 974, 974, 974, 977, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 986, 986, 986, 986, 
	986, 986, 986, 986, 986, 986, 974, 974, 
	974, 974, 974, 974, 974, 986, 986, 986, 
	986, 986, 986, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 986, 986, 986, 
	986, 986, 986, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 976, 974, 966, 974, 974, 974, 966, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 966, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 986, 986, 986, 986, 986, 
	986, 986, 986, 986, 986, 974, 974, 974, 
	974, 974, 974, 974, 986, 986, 986, 986, 
	986, 986, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 986, 986, 986, 986, 
	986, 986, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	976, 974, 966, 971, 971, 971, 966, 971, 
	971, 971, 971, 977, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 966, 971, 971, 971, 
	971, 971, 977, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 987, 987, 987, 987, 987, 987, 
	987, 987, 987, 987, 971, 971, 971, 971, 
	971, 971, 971, 987, 987, 987, 987, 987, 
	987, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 987, 987, 987, 987, 987, 
	987, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 971, 
	971, 971, 971, 971, 971, 971, 971, 979, 
	971, 966, 974, 974, 974, 966, 974, 974, 
	974, 974, 977, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 966, 974, 974, 974, 974, 
	974, 977, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 988, 988, 988, 988, 988, 988, 988, 
	988, 988, 988, 974, 974, 974, 974, 974, 
	974, 974, 988, 988, 988, 988, 988, 988, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 988, 988, 988, 988, 988, 988, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 979, 974, 
	966, 974, 974, 974, 966, 974, 974, 974, 
	974, 977, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 966, 974, 974, 974, 974, 974, 
	977, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	989, 989, 989, 989, 989, 989, 989, 989, 
	989, 989, 974, 974, 974, 974, 974, 974, 
	974, 989, 989, 989, 989, 989, 989, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 989, 989, 989, 989, 989, 989, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 979, 974, 966, 
	974, 974, 974, 966, 974, 974, 974, 974, 
	977, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 966, 974, 974, 974, 974, 974, 977, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 990, 
	990, 990, 990, 990, 990, 990, 990, 990, 
	990, 974, 974, 974, 974, 974, 974, 974, 
	990, 990, 990, 990, 990, 990, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	990, 990, 990, 990, 990, 990, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 979, 974, 966, 974, 
	974, 974, 966, 974, 974, 974, 974, 977, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	966, 974, 974, 974, 974, 974, 977, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 986, 986, 
	986, 986, 986, 986, 986, 986, 986, 986, 
	974, 974, 974, 974, 974, 974, 974, 986, 
	986, 986, 986, 986, 986, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 986, 
	986, 986, 986, 986, 986, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 974, 974, 974, 974, 974, 
	974, 974, 974, 979, 974, 991, 992, 994, 
	994, 994, 994, 994, 994, 994, 994, 994, 
	994, 993, 993, 993, 993, 993, 993, 993, 
	994, 994, 994, 994, 994, 994, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	993, 993, 993, 993, 993, 993, 993, 993, 
	994, 994, 994, 994, 994, 994, 993, 993, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	183, 239, 183, 183, 183, 183, 183, 183, 
	183, 183, 183, 183, 183, 183, 183, 183, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 240, 183, 183, 241, 183, 242, 
	183, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 183, 183, 183, 183, 238, 
	183, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 183, 183, 183, 183, 183, 
	238, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 239, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 240, 858, 858, 241, 858, 
	242, 858, 238, 238, 238, 238, 995, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 858, 858, 858, 858, 
	238, 858, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 858, 858, 858, 858, 
	858, 238, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 239, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 240, 858, 858, 241, 
	858, 242, 858, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	996, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 858, 858, 858, 
	858, 238, 858, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 238, 238, 238, 
	238, 238, 238, 238, 238, 858, 858, 858, 
	858, 858, 238, 997, 998, 858, 853, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	239, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 240, 999, 999, 241, 999, 242, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 1000, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 999, 795, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 239, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 240, 999, 999, 241, 999, 242, 
	999, 795, 795, 795, 795, 1001, 1002, 795, 
	795, 795, 795, 795, 1003, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 795, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 999, 
	795, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 239, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 240, 999, 999, 241, 999, 
	242, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 1004, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	795, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	999, 795, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 239, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 240, 999, 999, 241, 
	999, 242, 999, 795, 795, 1005, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 795, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 999, 795, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 239, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 240, 999, 999, 
	241, 999, 242, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 1006, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 795, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 999, 795, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 239, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 240, 999, 
	999, 241, 999, 242, 999, 795, 795, 795, 
	1007, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 795, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 999, 795, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 239, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 240, 
	999, 999, 241, 999, 242, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 1008, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 795, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 999, 795, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 239, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	240, 999, 999, 241, 999, 242, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 1009, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 795, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 999, 795, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	239, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 240, 999, 999, 241, 999, 242, 999, 
	795, 795, 795, 795, 795, 795, 1010, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 795, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 999, 795, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 239, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 240, 999, 999, 241, 999, 242, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 1011, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 999, 
	795, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 239, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 240, 999, 999, 241, 999, 
	242, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	1012, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	999, 795, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 239, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 240, 999, 999, 241, 
	999, 242, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 1013, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 795, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 999, 795, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 239, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 240, 999, 999, 
	241, 999, 242, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 1014, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 795, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 999, 795, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 239, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 240, 999, 
	999, 241, 999, 242, 999, 795, 795, 795, 
	795, 1010, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 795, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 999, 795, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 239, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 240, 
	999, 999, 241, 999, 242, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 1015, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 795, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 999, 795, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 239, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	240, 999, 999, 241, 999, 242, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 1014, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 795, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 999, 795, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	239, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 240, 999, 999, 241, 999, 242, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 795, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 1016, 795, 1017, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 999, 795, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 239, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 240, 999, 999, 241, 999, 242, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 795, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 1018, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 999, 
	795, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 239, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 240, 999, 999, 241, 999, 
	242, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	795, 999, 1019, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	999, 795, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 239, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 240, 999, 999, 241, 
	999, 242, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 795, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 1012, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 999, 795, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 239, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 240, 999, 999, 
	241, 999, 242, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 795, 999, 795, 795, 795, 1012, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 999, 795, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 239, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 240, 999, 
	999, 241, 999, 242, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 795, 999, 795, 795, 795, 
	795, 1020, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 1021, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 999, 795, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 239, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 240, 
	999, 999, 241, 999, 242, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 795, 999, 795, 795, 
	795, 795, 795, 795, 1022, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 999, 795, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 239, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	240, 999, 999, 241, 999, 242, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 795, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 1023, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 999, 795, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	239, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 240, 999, 999, 241, 999, 242, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 795, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 1012, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 999, 795, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 239, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 240, 999, 999, 241, 999, 242, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 795, 
	999, 795, 795, 795, 795, 1024, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 999, 
	795, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 239, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 240, 999, 999, 241, 999, 
	242, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	795, 999, 1025, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	999, 795, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 239, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 240, 999, 999, 241, 
	999, 242, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 795, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 1012, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 999, 795, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 239, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 240, 999, 999, 
	241, 999, 242, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 795, 999, 1026, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 1027, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 999, 795, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 239, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 240, 999, 
	999, 241, 999, 242, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 795, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 1028, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 999, 795, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 239, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 240, 
	999, 999, 241, 999, 242, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 795, 999, 795, 795, 
	795, 795, 1012, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 999, 795, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 239, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	240, 999, 999, 241, 999, 242, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 795, 999, 1029, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 999, 795, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	239, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 240, 999, 999, 241, 999, 242, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 795, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 1019, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 999, 795, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 239, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 240, 999, 999, 241, 999, 242, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 795, 
	999, 795, 795, 795, 795, 1030, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 1012, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 999, 
	795, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 239, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 240, 999, 999, 241, 999, 
	242, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	795, 999, 795, 795, 795, 795, 795, 1012, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	999, 795, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 239, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 240, 999, 999, 241, 
	999, 242, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 795, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 1031, 795, 
	1032, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 999, 795, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 239, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 240, 999, 999, 
	241, 999, 242, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 795, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 1033, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 999, 795, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 239, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 240, 999, 
	999, 241, 999, 242, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 795, 999, 795, 795, 795, 
	795, 1012, 795, 795, 795, 1030, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 999, 795, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 239, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 240, 
	999, 999, 241, 999, 242, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 795, 999, 795, 795, 
	795, 1012, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	1034, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 999, 795, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 239, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	240, 999, 999, 241, 999, 242, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 795, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 1035, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 999, 795, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	239, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 240, 999, 999, 241, 999, 242, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 795, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 1028, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 999, 795, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 239, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 240, 999, 999, 241, 999, 242, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 795, 
	999, 1036, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 830, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 999, 
	795, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 239, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 240, 999, 999, 241, 999, 
	242, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	795, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 1026, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	999, 795, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 239, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 240, 999, 999, 241, 
	999, 242, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 795, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 1012, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 999, 795, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 239, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 240, 999, 999, 
	241, 999, 242, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 795, 999, 795, 795, 795, 795, 
	795, 1037, 795, 795, 795, 795, 795, 795, 
	795, 1012, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 999, 795, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 239, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 240, 999, 
	999, 241, 999, 242, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 795, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 1038, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 999, 795, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 239, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 240, 
	999, 999, 241, 999, 242, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 795, 999, 795, 795, 
	795, 1039, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 999, 795, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 239, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	240, 999, 999, 241, 999, 242, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 795, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 1040, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 999, 795, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	239, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 240, 999, 999, 241, 999, 242, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 795, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 1028, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 999, 795, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 239, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 240, 999, 999, 241, 999, 242, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 795, 
	999, 795, 795, 795, 795, 1041, 795, 795, 
	795, 1042, 795, 795, 795, 795, 795, 1043, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 999, 
	795, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 239, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 240, 999, 999, 241, 999, 
	242, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	795, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 1043, 795, 795, 999, 999, 999, 999, 
	999, 795, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 239, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 240, 999, 999, 241, 
	999, 242, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 795, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 1012, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 999, 795, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 239, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 240, 999, 999, 
	241, 999, 242, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 795, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 1012, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 999, 795, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 239, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 240, 999, 
	999, 241, 999, 242, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 795, 999, 795, 795, 795, 
	795, 1044, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 999, 795, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 239, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 240, 
	999, 999, 241, 999, 242, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 795, 999, 795, 795, 
	795, 1045, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	1046, 1047, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 999, 795, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 239, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	240, 999, 999, 241, 999, 242, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 795, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 1012, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 999, 795, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	239, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 240, 999, 999, 241, 999, 242, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 795, 999, 
	795, 795, 1048, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 999, 795, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 239, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 240, 999, 999, 241, 999, 242, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 795, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 1049, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 999, 
	795, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 239, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 240, 999, 999, 241, 999, 
	242, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	795, 999, 795, 795, 795, 795, 1050, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	999, 795, 1051, 1051, 1051, 1051, 1051, 1051, 
	1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 
	1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 
	1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 
	1051, 1051, 1051, 1053, 1051, 1051, 1051, 1051, 
	1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 
	1051, 1051, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1054, 1051, 1051, 1055, 
	1051, 1056, 1051, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1051, 1051, 1051, 
	1051, 1052, 1051, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 
	1052, 1052, 1052, 1052, 1052, 1051, 1051, 1051, 
	1051, 1051, 1052, 844, 1057, 843, 843, 843, 
	843, 843, 843, 843, 843, 843, 843, 843, 
	843, 843, 843, 843, 843, 843, 843, 843, 
	843, 843, 843, 843, 843, 843, 843, 843, 
	843, 843, 843, 843, 843, 843, 843, 843, 
	843, 843, 843, 843, 843, 843, 843, 843, 
	843, 843, 843, 843, 843, 843, 843, 843, 
	843, 843, 843, 843, 843, 843, 843, 843, 
	843, 843, 843, 843, 846, 843, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 239, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	240, 999, 999, 241, 999, 242, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 795, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	1058, 795, 795, 1059, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 999, 795, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	239, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 240, 999, 999, 241, 999, 242, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 795, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	1012, 795, 999, 999, 999, 999, 999, 795, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 239, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 240, 999, 999, 241, 999, 242, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 795, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 1023, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 999, 
	795, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 239, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 240, 999, 999, 241, 999, 
	242, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	795, 999, 795, 795, 795, 795, 1060, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 1061, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	999, 795, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 239, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 240, 999, 999, 241, 
	999, 242, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 795, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 1030, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 999, 795, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 239, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 240, 999, 999, 
	241, 999, 242, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 795, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 1062, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 999, 795, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 239, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 240, 999, 
	999, 241, 999, 242, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 795, 999, 795, 795, 795, 
	795, 830, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 999, 795, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 239, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 240, 
	999, 999, 241, 999, 242, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 795, 999, 795, 795, 
	795, 795, 795, 795, 795, 1063, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 1064, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 999, 795, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 239, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	240, 999, 999, 241, 999, 242, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 795, 999, 795, 
	795, 795, 795, 1023, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 999, 795, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	239, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 240, 999, 999, 241, 999, 242, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 795, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 1028, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 999, 795, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 239, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 240, 999, 999, 241, 999, 242, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 795, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 1065, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 999, 
	795, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 239, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 240, 999, 999, 241, 999, 
	242, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	795, 999, 795, 795, 795, 1066, 795, 795, 
	795, 795, 795, 795, 795, 1067, 795, 795, 
	795, 795, 795, 795, 795, 1068, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	999, 795, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 239, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 240, 999, 999, 241, 
	999, 242, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 795, 999, 795, 795, 795, 795, 1030, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 999, 795, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 239, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 240, 999, 999, 
	241, 999, 242, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 795, 999, 795, 795, 795, 795, 
	1069, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 999, 795, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 239, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 240, 999, 
	999, 241, 999, 242, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 795, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 1070, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 999, 795, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 239, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 240, 
	999, 999, 241, 999, 242, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 795, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	1037, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 999, 795, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 239, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	240, 999, 999, 241, 999, 242, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 795, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 1071, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 999, 795, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	239, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 240, 999, 999, 241, 999, 242, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 795, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 1037, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 999, 999, 999, 999, 999, 795, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 239, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 240, 999, 999, 241, 999, 242, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 795, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	1072, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 999, 999, 999, 999, 999, 
	795, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 239, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 240, 999, 999, 241, 999, 
	242, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	795, 999, 795, 795, 795, 795, 1023, 795, 
	795, 795, 1073, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 999, 999, 999, 999, 
	999, 795, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 239, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 240, 999, 999, 241, 
	999, 242, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 795, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 1074, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 999, 999, 999, 
	999, 999, 795, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 239, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 240, 999, 999, 
	241, 999, 242, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 795, 999, 795, 795, 795, 795, 
	1037, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 999, 999, 
	999, 999, 999, 795, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 239, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 240, 999, 
	999, 241, 999, 242, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 795, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 1075, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 999, 
	999, 999, 999, 999, 795, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 239, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 240, 
	999, 999, 241, 999, 242, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 795, 999, 795, 795, 
	795, 795, 1076, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	999, 999, 999, 999, 999, 795, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 999, 239, 
	999, 999, 999, 999, 999, 999, 999, 999, 
	999, 999, 999, 999, 999, 999, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	240, 999, 999, 241, 999, 242, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 795, 999, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 795, 1017, 795, 795, 795, 795, 795, 
	795, 795, 795, 795, 795, 795, 795, 795, 
	795, 999, 999, 999, 999, 999, 795, 1077, 
	194, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 858, 
	858, 858, 858, 858, 858, 858, 858, 868, 
	858, 1079, 1078, 1078, 1078, 1079, 1078, 1078, 
	1078, 1078, 1080, 1081, 1080, 1080, 1080, 1078, 
	1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 
	1078, 1078, 1078, 1079, 1078, 1078, 1078, 1078, 
	1078, 1080, 1078, 1078, 1082, 1078, 1078, 1078, 
	1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 
	1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 
	1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 
	1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 
	1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 
	1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 
	1078, 1078, 1078, 1078, 1078, 1083, 1078, 1080, 
	1084, 1080, 1080, 1080, 1084, 1084, 1084, 1084, 
	1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 
	1084, 1084, 1084, 1084, 1084, 1084, 1080, 1084, 
	1085, 1086, 1087, 1088, 1089, 1091, 1090, 1092, 
	1094, 1095, 1095, 1095, 1094, 1095, 1095, 1095, 
	1095, 1096, 1097, 1096, 1096, 1096, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1094, 1095, 1095, 1095, 1095, 1095, 
	1096, 1095, 1098, 1099, 1095, 1095, 1095, 1098, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095, 
	1095, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1095, 1100, 1095, 1095, 1093, 
	1095, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093, 
	1093, 1093, 1093, 1095, 1095, 1095, 1095, 1095, 
	1093, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 
	1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 
	1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 
	1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 
	1101, 1101, 248, 1101, 1101, 1101, 1101, 1101, 
	1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 
	1101, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 249, 1101, 1101, 1101, 1101, 
	248, 1101, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 1101, 1101, 1101, 1101, 
	247, 1101, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 247, 247, 247, 247, 
	247, 247, 247, 247, 1101, 1101, 1101, 1101, 
	1101, 247, 1096, 1102, 1096, 1096, 1096, 1102, 
	1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 
	1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 
	1102, 1096, 1102, 1103, 1104, 1105, 1106, 1107, 
	1108, 1101, 1109, 1111, 1112, 1112, 1112, 1111, 
	1112, 1112, 1112, 1112, 1113, 1114, 1113, 1113, 
	1113, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 
	1112, 1112, 1112, 1112, 1112, 1111, 1112, 1112, 
	1112, 1112, 1112, 1113, 1115, 1116, 1117, 1118, 
	1119, 1120, 1116, 1121, 1122, 1123, 1119, 1124, 
	1125, 1126, 1119, 1127, 1128, 1128, 1128, 1128, 
	1128, 1128, 1128, 1128, 1128, 1129, 1130, 1131, 
	1132, 1133, 1134, 1135, 1136, 1137, 1136, 1136, 
	1138, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1139, 1140, 
	1141, 1119, 1142, 1116, 1143, 1144, 1145, 1146, 
	1147, 1148, 1110, 1110, 1149, 1110, 1110, 1110, 
	1150, 1151, 1152, 1110, 1110, 1153, 1154, 1155, 
	1156, 1110, 1157, 1110, 1158, 1110, 1159, 1160, 
	1161, 1119, 1112, 1110, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 1162, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 257, 257, 
	257, 257, 257, 1163, 257, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 257, 
	257, 257, 257, 1110, 257, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 257, 
	257, 257, 257, 257, 1110, 1165, 1164, 1166, 
	1167, 1113, 1168, 1113, 1113, 1113, 1168, 1168, 
	1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 
	1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168, 
	1113, 1168, 1169, 1171, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1171, 1170, 1172, 1173, 
	1174, 1175, 1176, 1176, 1176, 1176, 1176, 1176, 
	1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 
	1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 
	1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 
	1176, 1176, 1176, 252, 252, 1176, 252, 1176, 
	252, 252, 1176, 1176, 252, 252, 252, 1177, 
	252, 252, 1178, 1178, 1178, 1178, 1178, 1178, 
	1178, 1178, 1178, 1178, 252, 252, 252, 252, 
	252, 252, 252, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 1176, 252, 1176, 
	1176, 260, 252, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 1176, 1176, 1176, 
	252, 1176, 260, 1179, 1179, 1179, 1179, 1179, 
	1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 
	1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 
	1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 
	1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 
	1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 
	1179, 1179, 1179, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 1179, 1179, 1179, 
	1179, 1179, 1179, 1179, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 1179, 1179, 
	1179, 1179, 260, 1179, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 1179, 1179, 
	1179, 1179, 1179, 260, 1178, 1178, 1178, 1178, 
	1178, 1178, 1178, 1178, 1178, 1178, 1179, 1180, 
	1170, 1119, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1181, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1180, 1170, 1182, 1183, 1119, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1180, 
	1170, 1180, 1184, 1170, 1186, 1185, 256, 256, 
	256, 256, 256, 256, 256, 256, 256, 256, 
	1185, 1124, 1187, 256, 256, 256, 256, 256, 
	256, 256, 256, 256, 256, 1188, 1188, 1188, 
	1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 
	1189, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 
	1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 
	1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 
	1188, 1188, 1190, 1188, 1188, 1188, 1188, 1188, 
	1189, 1188, 255, 255, 255, 255, 255, 255, 
	255, 255, 255, 255, 1188, 1188, 1188, 1188, 
	1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 
	1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 
	1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 
	1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 
	1188, 254, 1188, 1192, 1191, 1193, 1193, 1193, 
	1193, 1193, 1193, 1193, 1193, 1193, 1193, 1191, 
	1191, 1191, 1191, 1191, 1191, 1191, 1191, 1194, 
	1191, 1195, 1196, 1191, 1191, 1191, 1191, 1191, 
	1191, 1191, 1191, 1191, 1197, 1191, 1191, 1191, 
	1191, 1191, 1191, 1191, 1191, 1198, 1191, 1191, 
	1191, 1191, 1191, 1191, 1199, 1191, 1191, 1194, 
	1191, 1195, 1196, 1191, 1191, 1191, 1200, 1191, 
	1191, 1191, 1191, 1191, 1197, 1191, 1191, 1201, 
	1191, 1191, 1191, 1191, 1191, 1198, 1191, 258, 
	258, 258, 258, 258, 258, 258, 258, 258, 
	258, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 
	1202, 1202, 1202, 1202, 1203, 1202, 1202, 1202, 
	1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 
	1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 
	1202, 1202, 1202, 1202, 1202, 1202, 1204, 1202, 
	1202, 1202, 1202, 1202, 1203, 1202, 1202, 1202, 
	1205, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 
	1202, 1206, 1202, 1207, 257, 1207, 257, 257, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 257, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1207, 1208, 1208, 1208, 1208, 1208, 
	1208, 1208, 1208, 1208, 1209, 1208, 1210, 1212, 
	1211, 1213, 1193, 1193, 1193, 1193, 1193, 1193, 
	1193, 1193, 1193, 1193, 1191, 1191, 1191, 1191, 
	1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 
	1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 
	1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 
	1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 
	1191, 1199, 1191, 1191, 1191, 1191, 1191, 1191, 
	1191, 1191, 1191, 1200, 1191, 1191, 1191, 1191, 
	1191, 1191, 1191, 1191, 1201, 1191, 1214, 1214, 
	1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 
	1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 
	1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 
	1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 
	1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 
	1191, 1191, 1191, 1191, 1191, 1215, 1191, 1191, 
	1191, 1191, 1191, 1191, 1191, 1191, 1191, 1200, 
	1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 
	1201, 1191, 1217, 1217, 1217, 1217, 1217, 1217, 
	1217, 1217, 1217, 1217, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1218, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1219, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1220, 1216, 1217, 1217, 
	1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1221, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1219, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1220, 1216, 1219, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1220, 1216, 1222, 1224, 1223, 
	1225, 1227, 1227, 1226, 1226, 1226, 1226, 1226, 
	1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 
	1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 
	1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 
	1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 
	1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 
	1228, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 
	1226, 1226, 1229, 1226, 1226, 1226, 1226, 1226, 
	1226, 1226, 1226, 1230, 1226, 1231, 1231, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1232, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1219, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1220, 
	1216, 1231, 1231, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1221, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1219, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1220, 1216, 1234, 1234, 1234, 
	1234, 1234, 1234, 1234, 1234, 1234, 1234, 1233, 
	1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 
	1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 
	1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 
	1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233, 
	1233, 1233, 1233, 1233, 1235, 1233, 1233, 1233, 
	1233, 1233, 1233, 1233, 1233, 1233, 1236, 1233, 
	1233, 1233, 1233, 1233, 1233, 1233, 1233, 1237, 
	1233, 1239, 1239, 1239, 1239, 1239, 1239, 1239, 
	1239, 1239, 1239, 1238, 1238, 1238, 1238, 1238, 
	1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 
	1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 
	1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 
	1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 
	1240, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 
	1238, 1238, 1241, 1238, 1238, 1238, 1238, 1238, 
	1238, 1238, 1238, 1242, 1238, 1244, 1244, 1244, 
	1244, 1244, 1244, 1244, 1244, 1244, 1244, 1243, 
	1243, 1243, 1243, 1243, 1243, 1243, 1244, 1244, 
	1244, 1244, 1244, 1244, 1243, 1243, 1243, 1243, 
	1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 
	1243, 1243, 1243, 1243, 1243, 1243, 1243, 1243, 
	1243, 1243, 1243, 1243, 1245, 1243, 1244, 1244, 
	1244, 1244, 1244, 1244, 1243, 1243, 1246, 1243, 
	1243, 1243, 1243, 1243, 1243, 1243, 1243, 1247, 
	1243, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 
	1248, 1248, 1248, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1248, 1248, 1248, 1248, 1248, 1248, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1249, 1216, 1248, 1248, 1248, 1248, 1248, 1248, 
	1216, 1216, 1219, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1220, 1216, 1248, 1248, 1248, 
	1248, 1248, 1248, 1248, 1248, 1248, 1248, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1248, 1248, 
	1248, 1248, 1248, 1248, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1221, 1216, 1248, 1248, 
	1248, 1248, 1248, 1248, 1216, 1216, 1219, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1220, 
	1216, 1251, 1250, 1252, 1252, 1252, 1252, 1252, 
	1252, 1252, 1252, 1252, 1252, 1250, 1250, 1250, 
	1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 
	1253, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 
	1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 
	1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 
	1250, 1250, 1254, 1250, 1250, 1250, 1250, 1250, 
	1253, 1250, 1250, 1250, 1255, 1250, 1250, 1250, 
	1250, 1250, 1250, 1250, 1250, 1256, 1250, 1257, 
	1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 
	1257, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 
	1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 
	1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 
	1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 
	1250, 1250, 1250, 1250, 1250, 1250, 1258, 1250, 
	1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 
	1255, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 
	1250, 1256, 1250, 1259, 1216, 1260, 1260, 1260, 
	1260, 1260, 1260, 1260, 1260, 1260, 1260, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1261, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1262, 1216, 1216, 1216, 
	1216, 1216, 1261, 1216, 1216, 1216, 1219, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1220, 
	1216, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 
	1260, 1260, 1260, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1221, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1219, 1216, 1216, 1216, 1216, 1216, 
	1216, 1216, 1216, 1220, 1216, 1181, 1187, 1119, 
	1263, 1170, 1171, 1170, 1264, 1171, 1187, 1187, 
	1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 
	1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 
	1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 
	1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 
	1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 
	1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 
	1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 
	1187, 1187, 1187, 1187, 1187, 1171, 1187, 1171, 
	1170, 1171, 1119, 1170, 1176, 1176, 1176, 1176, 
	1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 
	1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 
	1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 
	1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 
	1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 
	1176, 1176, 1176, 1176, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 1176, 1176, 
	1176, 1176, 1176, 1176, 1265, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 1176, 
	1176, 1176, 1176, 260, 1176, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 260, 
	260, 260, 260, 260, 260, 260, 260, 1176, 
	1176, 1176, 1176, 1176, 260, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 257, 1162, 257, 
	257, 257, 257, 257, 257, 257, 257, 257, 
	257, 257, 257, 257, 257, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1266, 
	257, 257, 257, 257, 1163, 257, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	257, 257, 257, 257, 1136, 257, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	257, 257, 257, 257, 257, 1136, 1267, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1162, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1266, 1268, 1268, 1268, 1268, 1163, 1268, 
	1136, 1136, 1136, 1136, 1269, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1268, 1268, 1268, 1268, 1136, 1268, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1268, 1268, 1268, 1268, 1268, 1136, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1162, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1266, 1268, 1268, 1268, 1268, 1163, 
	1268, 1136, 1136, 1136, 1136, 1136, 1136, 1270, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1268, 1268, 1268, 1268, 1136, 
	1268, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1268, 1268, 1268, 1268, 1268, 
	1136, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1162, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1266, 1268, 1268, 1268, 1268, 
	1163, 1268, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1271, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1268, 1268, 1268, 1268, 
	1136, 1268, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1268, 1268, 1268, 1268, 
	1268, 1136, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1162, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1266, 1268, 1268, 1268, 
	1268, 1163, 1268, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1272, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1268, 1268, 1268, 
	1268, 1136, 1268, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1268, 1268, 1268, 
	1268, 1268, 1136, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1162, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1266, 1268, 1268, 
	1268, 1268, 1163, 1268, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1273, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1268, 1268, 
	1268, 1268, 1136, 1268, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1268, 1268, 
	1268, 1268, 1268, 1136, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1162, 1268, 1268, 
	1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 
	1268, 1268, 1268, 1268, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1266, 1268, 
	1268, 1268, 1268, 1163, 1268, 1136, 1136, 1136, 
	1272, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1268, 
	1268, 1268, 1268, 1136, 1268, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1136, 
	1136, 1136, 1136, 1136, 1136, 1136, 1136, 1268, 
	1268, 1268, 1268, 1268, 1136, 1274, 1276, 1275, 
	1277, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1162, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1163, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1279, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1110, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1162, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1163, 1278, 1110, 1110, 1110, 1110, 1280, 
	1281, 1110, 1110, 1110, 1110, 1110, 1282, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1110, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1110, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1162, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1163, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1283, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1110, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1110, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1162, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1163, 1278, 1110, 1110, 1284, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1110, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1110, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1162, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1163, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1285, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1110, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1110, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1162, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1163, 1278, 1110, 
	1110, 1110, 1286, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1110, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1110, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1162, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1163, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1287, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1110, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1110, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1162, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1163, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1288, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1110, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1110, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1162, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1163, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1289, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1110, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1110, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1162, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1163, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1290, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1110, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1162, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1163, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1291, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1110, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1162, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1163, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1292, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1110, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1110, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1162, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1163, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1293, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1110, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1110, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1162, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1163, 1278, 1110, 
	1110, 1110, 1110, 1294, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1110, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1110, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1162, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1163, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1295, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1110, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1162, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1163, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1296, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1110, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1162, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1163, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1297, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1110, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1110, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1162, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1163, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1293, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1110, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1110, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1162, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1163, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1110, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1298, 
	1110, 1299, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1110, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1162, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1163, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1110, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1300, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1110, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1162, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1163, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1110, 1278, 1301, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1110, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1162, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1163, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1110, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1302, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1110, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1162, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1163, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1110, 1278, 
	1110, 1110, 1110, 1303, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1110, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1162, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1163, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1110, 
	1278, 1110, 1110, 1110, 1110, 1304, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1305, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1110, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1162, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1163, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1110, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1306, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1110, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1162, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1163, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1110, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1307, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1110, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1162, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1163, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1110, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1303, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1110, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1162, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1163, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1110, 1278, 1110, 1110, 1110, 
	1110, 1308, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1110, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1162, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1163, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1110, 1278, 1309, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1110, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1162, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1163, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1110, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1310, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1110, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1162, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1163, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1110, 1278, 
	1311, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1312, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1110, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1162, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1163, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1110, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1313, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1110, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1162, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1163, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1110, 1278, 1110, 1110, 1110, 1110, 1303, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1110, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1162, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1163, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1110, 1278, 1314, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1110, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1162, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1163, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1110, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1315, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1110, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1162, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1163, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1110, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1316, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1110, 1317, 1317, 1317, 
	1317, 1317, 1317, 1317, 1317, 1317, 262, 263, 
	262, 262, 262, 1317, 1317, 1317, 1317, 1317, 
	1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 
	1317, 1317, 1317, 1317, 1317, 262, 1162, 1317, 
	264, 1317, 1317, 1317, 1317, 1317, 1317, 1317, 
	1317, 1317, 1317, 1317, 1317, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1317, 
	1317, 265, 1317, 1317, 1163, 1317, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1317, 266, 1317, 1317, 1110, 1317, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1317, 1317, 1317, 1317, 1317, 1110, 279, 280, 
	279, 279, 279, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 279, 278, 278, 
	281, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 284, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 278, 278, 278, 278, 278, 278, 278, 
	278, 283, 278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1162, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1163, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1110, 1278, 1110, 1110, 1110, 1110, 
	1319, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1320, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1110, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1162, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1163, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1110, 1278, 1110, 1110, 1110, 
	1110, 1110, 1321, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1110, 1322, 1322, 1322, 
	1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 
	1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 
	1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 
	1322, 1322, 1322, 1322, 1322, 1322, 1162, 1322, 
	1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 
	1322, 1322, 1322, 1322, 1322, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1322, 
	1322, 1322, 1322, 1322, 1163, 1322, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1322, 1322, 1322, 1322, 1110, 1322, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1323, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1322, 1322, 1322, 1322, 1322, 1110, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1162, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1163, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1110, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1324, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1110, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1162, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1163, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1110, 1278, 
	1110, 1110, 1110, 1110, 1325, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1110, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1162, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1163, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1110, 
	1278, 1110, 1110, 1110, 1326, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1110, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1162, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1327, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1110, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1110, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1162, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1163, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1110, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1328, 1110, 
	1329, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1110, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1162, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1163, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1110, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1330, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1110, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1162, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1163, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1110, 1278, 1110, 1110, 1110, 
	1110, 1303, 1110, 1110, 1110, 1331, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1110, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1162, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1163, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1110, 1278, 1110, 1110, 
	1110, 1110, 1110, 1303, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1110, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1162, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1163, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1110, 1278, 1110, 
	1110, 1110, 1296, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1332, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1110, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1162, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1163, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1110, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1333, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1110, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1162, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1163, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1110, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1313, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1110, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1162, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1163, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1110, 1278, 1334, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1152, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1110, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1162, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1163, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1110, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1335, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1110, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1162, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1163, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1110, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1336, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1110, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1162, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1163, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1110, 1278, 1110, 1110, 1110, 
	1110, 1296, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1110, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1162, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1163, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1110, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1303, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1110, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1162, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1163, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1110, 1278, 1110, 
	1110, 1110, 1110, 1110, 1337, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1303, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1110, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1162, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1163, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1110, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1338, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1110, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1162, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1163, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1110, 
	1278, 1110, 1110, 1110, 1339, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1110, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1162, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1163, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1110, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1340, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1110, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1162, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1163, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1110, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1313, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1110, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1162, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1163, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1110, 1278, 1110, 1110, 1110, 1110, 
	1341, 1110, 1110, 1110, 1342, 1110, 1110, 1110, 
	1110, 1110, 1343, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1110, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1162, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1163, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1110, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1344, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1110, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1162, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1163, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1110, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1310, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1110, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1162, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1163, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1110, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1296, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1110, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1162, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1163, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1110, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1345, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1110, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1162, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1163, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1110, 
	1278, 1110, 1110, 1110, 1110, 1346, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1110, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1162, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1163, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1110, 1278, 1110, 1110, 1110, 1347, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1348, 1349, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1110, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1162, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1163, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1110, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1296, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1110, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1162, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1163, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1110, 1278, 1110, 1110, 1350, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1110, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1162, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1163, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1110, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1351, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1110, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1162, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1163, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1110, 1278, 1110, 1110, 
	1110, 1110, 1337, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1110, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1162, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1163, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1110, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1352, 1110, 1110, 1353, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1110, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1162, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1163, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1110, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1296, 1110, 1278, 1278, 1278, 1278, 1278, 1110, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1162, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1163, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1110, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1354, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1110, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1162, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1163, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1110, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1310, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1110, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1162, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1163, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1110, 1278, 1110, 1110, 1110, 1110, 1355, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1356, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1110, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1162, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1163, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1110, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1357, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1110, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1162, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1163, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1110, 1278, 1110, 1110, 1110, 
	1110, 1110, 1296, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1110, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1162, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1163, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1110, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1358, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1110, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1162, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1163, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1110, 1278, 1110, 
	1110, 1110, 1110, 1359, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1110, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1162, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1163, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1110, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1345, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1110, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1162, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1163, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1110, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1360, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1361, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1110, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1162, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1163, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1110, 1278, 1110, 1110, 1110, 1110, 1307, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1110, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1162, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1163, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1110, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1336, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1110, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1162, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1163, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1110, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1362, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1110, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1162, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1163, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1110, 1278, 1110, 1110, 1110, 
	1363, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1364, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1365, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1110, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1162, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1163, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1110, 1278, 1110, 1110, 
	1110, 1110, 1366, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1110, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1162, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1163, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1110, 1278, 1110, 
	1110, 1110, 1110, 1110, 1302, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1110, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1162, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1163, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1110, 1278, 
	1110, 1110, 1110, 1110, 1367, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1110, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1162, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1163, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1110, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1368, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1110, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1162, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1163, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1110, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1337, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1110, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1162, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1163, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1110, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1369, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1110, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1162, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1163, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1110, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1337, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1110, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1162, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1163, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1110, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1370, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1110, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1162, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1278, 
	1278, 1278, 1278, 1278, 1163, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1110, 1278, 1110, 1110, 
	1110, 1110, 1307, 1110, 1110, 1110, 1371, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1110, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1162, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1278, 1278, 1278, 1278, 1278, 1163, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1110, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1372, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1110, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1162, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1278, 1278, 1278, 1278, 1278, 1163, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1110, 1278, 
	1110, 1110, 1110, 1110, 1337, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1110, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1162, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1278, 1278, 1278, 1278, 1278, 1163, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1110, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1373, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1110, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1162, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1278, 1278, 1278, 1278, 1278, 
	1163, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1110, 1278, 1110, 1110, 1110, 1110, 1374, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1110, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1162, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1278, 1278, 1278, 1278, 
	1278, 1163, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1110, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1375, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1110, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1162, 1278, 1278, 1278, 
	1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 
	1278, 1278, 1278, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1278, 1278, 1278, 
	1278, 1278, 1163, 1278, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1110, 1278, 1110, 1110, 1110, 1345, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 
	1110, 1110, 1110, 1110, 1110, 1110, 1278, 1278, 
	1278, 1278, 1278, 1110, 1376, 1180, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 
	1170, 1170, 1170, 1170, 1119, 1170, 1377, 1379, 
	1378, 1379, 1379, 1379, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 1378, 1378, 1379, 1378, 
	1378, 1378, 1378, 1378, 1380, 1378, 1378, 1378, 
	1378, 1378, 1378, 1378, 290, 1378, 288, 1381, 
	288, 288, 288, 1381, 1381, 1381, 1381, 1381, 
	1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 
	1381, 1381, 1381, 1381, 1381, 288, 1381, 1381, 
	1381, 1381, 1381, 289, 1381, 1381, 1381, 1381, 
	1381, 1381, 1381, 290, 1381, 291, 1381, 1383, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1384, 1382, 1383, 1382, 1383, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1386, 1382, 1383, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1387, 
	1382, 1383, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 
	1382, 1382, 1382, 1388, 1382, 1390, 1388, 0
]

class << self
	attr_accessor :_lex_trans_targs
	private :_lex_trans_targs, :_lex_trans_targs=
end
self._lex_trans_targs = [
	159, 2, 3, 4, 165, 6, 7, 8, 
	9, 10, 159, 159, 168, 171, 168, 12, 
	172, 14, 168, 179, 180, 183, 184, 190, 
	185, 186, 187, 19, 188, 189, 192, 194, 
	195, 196, 197, 198, 25, 18, 181, 182, 
	27, 230, 231, 233, 235, 233, 30, 236, 
	32, 233, 243, 244, 247, 248, 254, 249, 
	250, 251, 37, 252, 253, 256, 258, 259, 
	260, 261, 262, 43, 36, 245, 246, 45, 
	294, 295, 302, 304, 302, 48, 305, 50, 
	310, 309, 0, 52, 311, 312, 54, 313, 
	314, 314, 426, 56, 57, 426, 455, 58, 
	59, 455, 455, 459, 459, 63, 58, 64, 
	457, 458, 460, 461, 459, 455, 462, 463, 
	465, 60, 61, 466, 467, 62, 459, 65, 
	66, 71, 78, 469, 470, 64, 457, 458, 
	460, 461, 459, 455, 462, 463, 465, 60, 
	61, 466, 467, 62, 65, 66, 71, 78, 
	469, 470, 468, 67, 68, 69, 70, 72, 
	73, 76, 74, 75, 77, 79, 80, 455, 
	82, 83, 84, 86, 89, 87, 88, 90, 
	92, 486, 486, 486, 487, 94, 489, 95, 
	490, 96, 487, 94, 489, 95, 490, 524, 
	524, 524, 99, 100, 101, 102, 536, 524, 
	524, 541, 524, 524, 563, 524, 106, 564, 
	570, 109, 112, 114, 116, 117, 118, 112, 
	113, 574, 113, 574, 115, 524, 588, 589, 
	592, 593, 599, 594, 595, 596, 123, 597, 
	598, 601, 603, 604, 605, 606, 607, 129, 
	122, 590, 591, 131, 643, 644, 133, 526, 
	97, 528, 533, 135, 136, 646, 747, 138, 
	139, 140, 747, 755, 755, 755, 143, 777, 
	776, 755, 779, 781, 766, 813, 149, 150, 
	151, 155, 156, 149, 150, 151, 155, 156, 
	152, 152, 150, 151, 153, 154, 152, 152, 
	150, 151, 153, 154, 860, 150, 755, 929, 
	157, 158, 929, 929, 159, 159, 160, 161, 
	162, 164, 166, 167, 159, 159, 159, 163, 
	159, 163, 159, 1, 159, 159, 159, 5, 
	168, 168, 169, 168, 170, 173, 168, 168, 
	11, 13, 168, 168, 168, 174, 175, 176, 
	15, 21, 26, 199, 28, 168, 168, 168, 
	177, 178, 168, 16, 168, 168, 168, 17, 
	168, 168, 168, 20, 191, 193, 22, 168, 
	168, 23, 24, 168, 200, 204, 208, 201, 
	202, 203, 205, 206, 207, 168, 168, 209, 
	213, 219, 210, 217, 218, 211, 215, 216, 
	212, 214, 168, 220, 229, 228, 221, 222, 
	223, 224, 225, 226, 227, 168, 168, 168, 
	232, 233, 233, 233, 234, 237, 233, 29, 
	31, 233, 233, 233, 238, 239, 240, 33, 
	39, 44, 263, 46, 233, 233, 233, 241, 
	242, 233, 34, 233, 233, 233, 35, 233, 
	233, 233, 38, 255, 257, 40, 233, 233, 
	41, 42, 233, 264, 268, 272, 265, 266, 
	267, 269, 270, 271, 233, 233, 273, 277, 
	283, 274, 281, 282, 275, 279, 280, 276, 
	278, 233, 284, 293, 292, 285, 286, 287, 
	288, 289, 290, 291, 233, 233, 233, 296, 
	297, 297, 298, 297, 299, 297, 297, 297, 
	300, 300, 300, 301, 300, 300, 300, 302, 
	302, 302, 303, 302, 47, 49, 302, 302, 
	306, 306, 306, 307, 308, 307, 51, 53, 
	309, 309, 309, 315, 314, 314, 316, 317, 
	318, 319, 321, 314, 324, 325, 326, 327, 
	328, 330, 332, 333, 334, 338, 340, 341, 
	342, 358, 363, 370, 375, 382, 389, 392, 
	393, 397, 391, 401, 409, 413, 415, 420, 
	422, 425, 314, 314, 314, 314, 314, 314, 
	320, 314, 320, 314, 322, 55, 323, 314, 
	314, 314, 329, 331, 314, 335, 336, 337, 
	333, 339, 314, 343, 344, 353, 356, 345, 
	346, 347, 348, 349, 350, 351, 352, 315, 
	354, 355, 357, 359, 362, 360, 361, 364, 
	367, 365, 366, 368, 369, 371, 373, 372, 
	374, 376, 377, 314, 378, 379, 380, 381, 
	314, 383, 386, 384, 385, 387, 388, 390, 
	394, 395, 396, 398, 400, 399, 402, 403, 
	404, 406, 405, 407, 408, 410, 411, 412, 
	414, 416, 417, 418, 419, 421, 423, 424, 
	427, 426, 426, 428, 429, 431, 426, 426, 
	426, 430, 426, 430, 432, 426, 434, 433, 
	433, 438, 439, 440, 441, 433, 443, 444, 
	445, 446, 448, 450, 451, 452, 453, 454, 
	433, 435, 437, 433, 436, 433, 433, 433, 
	433, 433, 442, 433, 442, 447, 433, 449, 
	433, 455, 455, 456, 471, 472, 458, 474, 
	475, 462, 476, 477, 478, 479, 480, 482, 
	483, 484, 485, 455, 455, 455, 455, 455, 
	455, 459, 464, 455, 455, 455, 455, 455, 
	455, 455, 455, 455, 473, 455, 473, 455, 
	455, 455, 455, 481, 455, 81, 85, 91, 
	486, 488, 491, 93, 486, 486, 487, 492, 
	492, 493, 494, 496, 498, 499, 492, 492, 
	495, 492, 495, 492, 497, 492, 492, 492, 
	501, 500, 500, 502, 503, 504, 506, 508, 
	509, 514, 521, 500, 500, 500, 500, 505, 
	500, 505, 500, 507, 500, 500, 501, 510, 
	511, 512, 513, 515, 516, 519, 517, 518, 
	520, 522, 523, 525, 524, 534, 535, 537, 
	538, 540, 542, 543, 544, 546, 547, 548, 
	550, 551, 573, 576, 577, 578, 646, 647, 
	648, 649, 650, 545, 652, 668, 673, 680, 
	685, 687, 693, 696, 697, 701, 695, 705, 
	716, 720, 723, 731, 735, 738, 739, 524, 
	97, 527, 524, 524, 529, 531, 532, 524, 
	530, 524, 524, 524, 524, 524, 98, 524, 
	524, 524, 524, 524, 539, 524, 539, 524, 
	524, 103, 524, 524, 104, 524, 524, 545, 
	524, 549, 524, 552, 562, 524, 105, 565, 
	566, 567, 524, 568, 107, 571, 108, 110, 
	572, 524, 553, 555, 561, 524, 554, 524, 
	524, 556, 559, 560, 524, 557, 558, 524, 
	524, 524, 524, 569, 111, 575, 524, 524, 
	579, 524, 524, 524, 580, 582, 524, 581, 
	524, 581, 524, 583, 584, 585, 119, 125, 
	130, 608, 132, 524, 524, 524, 586, 587, 
	524, 120, 524, 524, 524, 121, 524, 524, 
	524, 124, 600, 602, 126, 524, 524, 127, 
	128, 524, 609, 613, 617, 610, 611, 612, 
	614, 615, 616, 524, 524, 618, 622, 628, 
	619, 626, 627, 620, 624, 625, 621, 623, 
	524, 629, 637, 642, 630, 631, 632, 633, 
	634, 635, 636, 638, 639, 640, 641, 524, 
	524, 524, 645, 134, 137, 524, 651, 524, 
	653, 654, 663, 666, 655, 656, 657, 658, 
	659, 660, 661, 662, 525, 664, 665, 667, 
	669, 672, 670, 671, 674, 677, 675, 676, 
	678, 679, 681, 683, 682, 684, 686, 688, 
	690, 689, 691, 692, 694, 525, 698, 699, 
	700, 702, 704, 703, 706, 707, 708, 713, 
	709, 710, 711, 524, 525, 526, 97, 712, 
	533, 531, 714, 715, 717, 718, 719, 721, 
	722, 724, 725, 726, 729, 727, 728, 730, 
	732, 733, 734, 736, 737, 524, 740, 740, 
	741, 742, 743, 745, 740, 740, 740, 744, 
	740, 744, 740, 746, 740, 748, 747, 747, 
	749, 750, 747, 751, 753, 747, 747, 747, 
	747, 752, 747, 752, 754, 747, 756, 755, 
	755, 760, 761, 762, 755, 763, 765, 768, 
	769, 770, 771, 772, 755, 773, 774, 778, 
	801, 805, 755, 806, 808, 810, 755, 811, 
	812, 814, 818, 820, 821, 755, 823, 841, 
	846, 853, 861, 868, 875, 880, 881, 885, 
	879, 890, 900, 906, 909, 918, 922, 926, 
	927, 928, 757, 759, 755, 758, 755, 755, 
	755, 755, 755, 755, 755, 764, 755, 764, 
	755, 141, 767, 755, 755, 755, 755, 755, 
	755, 755, 775, 755, 755, 142, 144, 755, 
	145, 785, 793, 796, 780, 797, 798, 786, 
	790, 791, 755, 780, 145, 782, 783, 146, 
	755, 782, 755, 755, 784, 755, 787, 789, 
	755, 787, 788, 790, 791, 789, 755, 755, 
	792, 755, 755, 794, 789, 790, 791, 794, 
	795, 755, 787, 789, 790, 791, 755, 787, 
	789, 790, 791, 755, 799, 789, 790, 791, 
	799, 800, 755, 145, 801, 780, 802, 790, 
	791, 803, 789, 145, 803, 780, 804, 807, 
	809, 147, 148, 755, 755, 815, 816, 817, 
	812, 819, 755, 755, 822, 755, 755, 824, 
	825, 834, 839, 826, 827, 828, 829, 830, 
	831, 832, 833, 756, 835, 836, 837, 838, 
	756, 840, 842, 845, 843, 844, 756, 756, 
	847, 850, 848, 849, 851, 852, 756, 854, 
	856, 855, 857, 858, 859, 755, 755, 862, 
	756, 863, 755, 864, 865, 866, 867, 759, 
	869, 872, 870, 871, 873, 874, 876, 877, 
	878, 756, 882, 883, 884, 886, 888, 889, 
	887, 756, 891, 892, 893, 896, 894, 895, 
	897, 898, 899, 901, 903, 902, 904, 905, 
	907, 908, 910, 911, 913, 916, 912, 914, 
	915, 917, 919, 920, 921, 923, 924, 925, 
	755, 755, 929, 930, 931, 929, 933, 932, 
	934, 932, 935, 936, 937, 932, 932
]

class << self
	attr_accessor :_lex_trans_actions
	private :_lex_trans_actions, :_lex_trans_actions=
end
self._lex_trans_actions = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 3, 4, 0, 5, 0, 
	0, 0, 6, 0, 7, 0, 8, 0, 
	7, 0, 0, 0, 0, 8, 7, 0, 
	8, 0, 7, 7, 0, 0, 0, 0, 
	0, 0, 0, 9, 0, 10, 0, 0, 
	0, 11, 0, 7, 0, 8, 0, 7, 
	0, 0, 0, 0, 8, 7, 0, 8, 
	0, 7, 7, 0, 0, 0, 0, 0, 
	0, 0, 12, 0, 13, 0, 0, 0, 
	0, 14, 0, 0, 0, 0, 0, 0, 
	15, 16, 17, 0, 0, 18, 19, 0, 
	0, 20, 21, 22, 23, 24, 25, 25, 
	26, 27, 25, 28, 27, 29, 27, 25, 
	25, 26, 25, 30, 25, 25, 31, 25, 
	25, 25, 25, 25, 25, 0, 32, 33, 
	0, 34, 33, 35, 33, 0, 0, 32, 
	0, 36, 0, 0, 0, 0, 0, 0, 
	0, 0, 23, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 37, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 38, 39, 40, 41, 0, 0, 0, 
	41, 24, 42, 25, 25, 25, 42, 43, 
	44, 45, 0, 0, 0, 0, 0, 46, 
	47, 0, 48, 49, 0, 50, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 51, 
	51, 52, 0, 24, 0, 53, 0, 7, 
	0, 8, 0, 7, 0, 0, 0, 0, 
	8, 7, 0, 8, 0, 7, 7, 0, 
	0, 0, 0, 0, 0, 0, 0, 54, 
	0, 0, 54, 0, 0, 54, 55, 0, 
	0, 0, 56, 57, 58, 59, 0, 7, 
	7, 60, 61, 61, 0, 0, 0, 24, 
	0, 0, 0, 25, 62, 25, 25, 25, 
	63, 64, 65, 64, 64, 64, 0, 66, 
	67, 66, 66, 66, 68, 69, 70, 71, 
	0, 72, 73, 74, 77, 78, 0, 24, 
	0, 7, 0, 7, 79, 80, 81, 63, 
	82, 0, 83, 0, 84, 85, 86, 0, 
	87, 88, 0, 89, 7, 7, 90, 91, 
	0, 0, 92, 93, 94, 95, 95, 95, 
	95, 95, 95, 95, 95, 96, 97, 98, 
	0, 0, 99, 0, 100, 101, 102, 0, 
	103, 104, 105, 0, 7, 0, 0, 106, 
	107, 0, 24, 108, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 109, 110, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 111, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 112, 113, 114, 
	0, 115, 116, 117, 7, 7, 118, 0, 
	0, 119, 120, 121, 95, 95, 95, 95, 
	95, 95, 95, 95, 122, 123, 124, 0, 
	0, 125, 0, 126, 127, 128, 0, 129, 
	130, 131, 0, 7, 0, 0, 132, 133, 
	0, 24, 134, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 135, 136, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 137, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 138, 139, 140, 0, 
	141, 142, 0, 143, 0, 144, 145, 146, 
	147, 148, 149, 0, 150, 151, 152, 153, 
	154, 155, 7, 156, 0, 0, 157, 158, 
	159, 160, 161, 162, 0, 163, 0, 0, 
	164, 165, 166, 167, 168, 169, 0, 24, 
	0, 0, 7, 170, 0, 0, 0, 0, 
	0, 0, 0, 171, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 172, 173, 174, 175, 176, 177, 
	63, 178, 0, 179, 0, 0, 0, 180, 
	181, 182, 0, 0, 183, 0, 0, 0, 
	184, 0, 185, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 184, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 186, 0, 0, 0, 0, 
	187, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	7, 188, 189, 0, 0, 0, 190, 191, 
	192, 63, 193, 0, 24, 194, 0, 195, 
	196, 0, 24, 0, 0, 197, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	198, 0, 0, 199, 0, 200, 201, 202, 
	203, 204, 63, 205, 0, 0, 206, 0, 
	207, 208, 209, 210, 24, 0, 23, 0, 
	0, 23, 0, 0, 0, 0, 0, 0, 
	7, 7, 7, 211, 212, 213, 214, 215, 
	216, 217, 0, 218, 219, 220, 221, 222, 
	223, 224, 225, 226, 63, 227, 0, 228, 
	229, 230, 231, 232, 233, 0, 0, 0, 
	234, 7, 7, 0, 235, 236, 237, 238, 
	239, 0, 0, 0, 0, 0, 240, 241, 
	63, 242, 0, 243, 24, 244, 245, 246, 
	247, 248, 249, 0, 24, 0, 0, 0, 
	0, 0, 0, 250, 251, 252, 253, 63, 
	254, 0, 255, 24, 256, 257, 258, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 259, 260, 0, 8, 0, 
	0, 7, 261, 0, 0, 0, 0, 0, 
	0, 7, 7, 0, 262, 0, 262, 262, 
	262, 0, 0, 262, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 0, 262, 263, 
	264, 0, 265, 266, 0, 54, 0, 267, 
	0, 268, 269, 270, 271, 272, 25, 273, 
	274, 275, 276, 277, 63, 278, 0, 279, 
	280, 0, 281, 282, 0, 283, 284, 261, 
	285, 0, 286, 0, 0, 287, 0, 0, 
	0, 0, 288, 0, 0, 0, 0, 0, 
	0, 289, 0, 0, 0, 290, 0, 291, 
	292, 0, 0, 0, 293, 0, 0, 294, 
	295, 296, 297, 0, 0, 0, 298, 299, 
	0, 300, 301, 302, 0, 7, 303, 304, 
	305, 0, 306, 95, 95, 95, 95, 95, 
	95, 95, 95, 307, 308, 309, 0, 0, 
	310, 0, 311, 312, 313, 0, 314, 315, 
	316, 0, 7, 0, 0, 317, 318, 0, 
	24, 319, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 320, 321, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	322, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 323, 
	324, 325, 0, 0, 0, 326, 24, 327, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 54, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 328, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 329, 330, 331, 332, 333, 333, 
	332, 329, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 259, 259, 259, 
	259, 259, 259, 259, 259, 334, 335, 336, 
	0, 24, 0, 0, 337, 338, 339, 63, 
	340, 0, 341, 24, 342, 7, 343, 344, 
	0, 24, 345, 0, 0, 346, 347, 348, 
	349, 63, 350, 0, 24, 351, 352, 353, 
	354, 0, 24, 0, 355, 0, 7, 0, 
	0, 0, 0, 0, 356, 0, 0, 357, 
	357, 0, 358, 0, 0, 0, 359, 7, 
	360, 360, 360, 0, 0, 361, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 362, 363, 0, 364, 365, 
	366, 367, 368, 369, 370, 63, 371, 0, 
	372, 0, 0, 373, 374, 375, 376, 377, 
	378, 379, 0, 380, 381, 0, 0, 382, 
	383, 384, 0, 0, 385, 0, 0, 384, 
	386, 386, 387, 388, 0, 389, 389, 0, 
	390, 391, 392, 393, 0, 394, 384, 384, 
	395, 0, 0, 396, 396, 0, 397, 398, 
	0, 399, 400, 401, 401, 402, 402, 0, 
	0, 403, 404, 404, 405, 405, 406, 407, 
	407, 408, 408, 409, 410, 410, 411, 411, 
	0, 0, 412, 413, 414, 415, 416, 417, 
	417, 414, 416, 418, 357, 419, 0, 0, 
	0, 0, 0, 420, 421, 360, 360, 360, 
	422, 360, 423, 424, 24, 425, 426, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 427, 0, 0, 0, 0, 
	422, 0, 0, 0, 0, 0, 428, 429, 
	0, 0, 0, 0, 0, 0, 430, 0, 
	0, 0, 0, 0, 429, 431, 432, 0, 
	433, 0, 434, 0, 0, 0, 0, 435, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 436, 0, 0, 0, 0, 0, 0, 
	0, 435, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	437, 438, 439, 7, 72, 440, 0, 441, 
	0, 442, 0, 0, 0, 443, 444
]

class << self
	attr_accessor :_lex_to_state_actions
	private :_lex_to_state_actions, :_lex_to_state_actions=
end
self._lex_to_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 75, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	75, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 75, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 75, 0, 0, 75, 0, 75, 0, 
	0, 0, 75, 75, 0, 75, 0, 0, 
	0, 0, 75, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 75, 0, 0, 0, 0, 0, 
	0, 75, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 75, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 75, 0, 
	0, 0, 0, 0, 75, 0, 0, 0, 
	0, 0, 0, 0, 75, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 75, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 75, 0, 0, 0, 
	0, 0, 0, 75, 0, 0, 0, 0, 
	0, 0, 0, 75, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 75, 0, 0, 75, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_lex_from_state_actions
	private :_lex_from_state_actions, :_lex_from_state_actions=
end
self._lex_from_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 76, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	76, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 76, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 76, 0, 0, 76, 0, 76, 0, 
	0, 0, 76, 76, 0, 76, 0, 0, 
	0, 0, 76, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 76, 0, 0, 0, 0, 0, 
	0, 76, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 76, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 76, 0, 
	0, 0, 0, 0, 76, 0, 0, 0, 
	0, 0, 0, 0, 76, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 76, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 76, 0, 0, 0, 
	0, 0, 0, 76, 0, 0, 0, 0, 
	0, 0, 0, 76, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 76, 0, 0, 76, 0, 0, 0, 
	0, 0
]

class << self
	attr_accessor :_lex_eof_trans
	private :_lex_eof_trans, :_lex_eof_trans=
end
self._lex_eof_trans = [
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 13, 13, 13, 13, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 44, 44, 44, 
	44, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 75, 
	75, 75, 75, 0, 0, 0, 0, 89, 
	91, 91, 95, 95, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 160, 160, 160, 160, 160, 160, 160, 
	160, 160, 160, 160, 160, 170, 172, 172, 
	172, 184, 186, 186, 186, 186, 186, 192, 
	184, 196, 196, 196, 196, 196, 196, 196, 
	196, 196, 196, 196, 196, 196, 196, 214, 
	214, 214, 214, 214, 214, 214, 214, 214, 
	214, 214, 214, 214, 214, 184, 196, 196, 
	196, 196, 247, 247, 247, 252, 254, 254, 
	254, 258, 258, 252, 258, 258, 258, 258, 
	258, 258, 258, 258, 258, 288, 288, 0, 
	301, 302, 303, 305, 307, 309, 307, 307, 
	0, 319, 320, 324, 324, 325, 334, 335, 
	336, 336, 336, 339, 339, 341, 342, 343, 
	343, 343, 345, 346, 347, 347, 343, 339, 
	339, 352, 353, 353, 353, 353, 353, 356, 
	356, 356, 356, 356, 356, 356, 356, 366, 
	367, 367, 367, 367, 379, 379, 379, 367, 
	367, 367, 367, 379, 379, 379, 379, 379, 
	379, 379, 379, 379, 390, 379, 391, 392, 
	392, 0, 399, 403, 403, 404, 413, 414, 
	415, 415, 415, 418, 418, 420, 421, 422, 
	422, 422, 424, 425, 426, 426, 422, 418, 
	418, 431, 432, 432, 432, 432, 432, 435, 
	435, 435, 435, 435, 435, 435, 435, 445, 
	446, 446, 446, 446, 458, 458, 458, 446, 
	446, 446, 446, 458, 458, 458, 458, 458, 
	458, 458, 458, 458, 469, 458, 470, 471, 
	471, 0, 478, 479, 0, 485, 0, 492, 
	496, 496, 0, 0, 502, 0, 505, 505, 
	506, 507, 0, 547, 549, 550, 551, 552, 
	554, 556, 560, 560, 551, 551, 551, 561, 
	551, 551, 556, 551, 551, 547, 565, 565, 
	565, 565, 565, 565, 556, 556, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 604, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 571, 571, 571, 571, 571, 571, 571, 
	571, 551, 0, 647, 648, 649, 651, 647, 
	654, 0, 673, 676, 678, 676, 679, 680, 
	681, 682, 684, 681, 681, 681, 681, 681, 
	687, 681, 681, 689, 687, 687, 681, 0, 
	708, 709, 95, 95, 712, 713, 95, 709, 
	709, 716, 718, 721, 709, 722, 709, 723, 
	724, 726, 728, 709, 716, 729, 729, 718, 
	729, 733, 729, 729, 729, 729, 0, 170, 
	741, 742, 741, 741, 0, 751, 752, 754, 
	756, 758, 756, 760, 0, 772, 773, 774, 
	775, 777, 779, 781, 782, 782, 782, 782, 
	782, 782, 782, 782, 782, 782, 782, 782, 
	782, 782, 782, 782, 0, 184, 840, 843, 
	844, 848, 850, 851, 852, 840, 853, 854, 
	856, 859, 860, 862, 864, 867, 868, 870, 
	871, 184, 868, 868, 859, 859, 859, 859, 
	890, 894, 896, 897, 901, 904, 905, 906, 
	907, 894, 890, 890, 890, 890, 890, 890, 
	890, 890, 890, 890, 890, 859, 911, 859, 
	859, 859, 912, 919, 919, 921, 923, 932, 
	933, 934, 934, 934, 937, 937, 939, 940, 
	941, 941, 941, 943, 944, 945, 945, 941, 
	937, 937, 950, 951, 951, 951, 951, 951, 
	954, 954, 954, 954, 954, 954, 954, 954, 
	964, 965, 965, 965, 965, 977, 977, 977, 
	965, 965, 965, 965, 977, 977, 977, 977, 
	977, 977, 977, 977, 977, 977, 977, 977, 
	977, 977, 992, 993, 994, 994, 184, 859, 
	859, 998, 859, 854, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1052, 
	844, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 
	1000, 1000, 1078, 859, 0, 1085, 1086, 1087, 
	1089, 1091, 1093, 0, 1102, 1103, 1104, 1105, 
	1107, 1102, 1110, 0, 258, 1165, 1167, 1168, 
	1169, 1170, 1171, 1173, 1175, 1177, 1180, 1180, 
	1171, 1171, 1183, 1184, 1171, 1171, 1186, 1188, 
	1189, 1189, 1192, 1203, 258, 1209, 1211, 1212, 
	1214, 1192, 1192, 1217, 1217, 1217, 1223, 1224, 
	1226, 1227, 1217, 1217, 1234, 1239, 1244, 1217, 
	1217, 1251, 1251, 1217, 1217, 1188, 1171, 1171, 
	1188, 1171, 1171, 1177, 258, 1268, 1269, 1269, 
	1269, 1269, 1269, 1269, 1275, 1177, 1278, 1279, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1318, 1319, 1279, 1279, 1323, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 
	1279, 1279, 1279, 1279, 1279, 1279, 1377, 1171, 
	1378, 0, 1382, 1382, 0, 1386, 1386, 1386, 
	1386, 1390
]

class << self
	attr_accessor :lex_start
end
self.lex_start = 159;
class << self
	attr_accessor :lex_error
end
self.lex_error = 0;

class << self
	attr_accessor :lex_en_interp_words
end
self.lex_en_interp_words = 168;
class << self
	attr_accessor :lex_en_interp_string
end
self.lex_en_interp_string = 233;
class << self
	attr_accessor :lex_en_plain_words
end
self.lex_en_plain_words = 297;
class << self
	attr_accessor :lex_en_plain_string
end
self.lex_en_plain_string = 300;
class << self
	attr_accessor :lex_en_interp_backslash_delimited
end
self.lex_en_interp_backslash_delimited = 302;
class << self
	attr_accessor :lex_en_plain_backslash_delimited
end
self.lex_en_plain_backslash_delimited = 306;
class << self
	attr_accessor :lex_en_regexp_modifiers
end
self.lex_en_regexp_modifiers = 307;
class << self
	attr_accessor :lex_en_expr_variable
end
self.lex_en_expr_variable = 309;
class << self
	attr_accessor :lex_en_expr_fname
end
self.lex_en_expr_fname = 314;
class << self
	attr_accessor :lex_en_expr_endfn
end
self.lex_en_expr_endfn = 426;
class << self
	attr_accessor :lex_en_expr_dot
end
self.lex_en_expr_dot = 433;
class << self
	attr_accessor :lex_en_expr_arg
end
self.lex_en_expr_arg = 455;
class << self
	attr_accessor :lex_en_expr_cmdarg
end
self.lex_en_expr_cmdarg = 486;
class << self
	attr_accessor :lex_en_expr_endarg
end
self.lex_en_expr_endarg = 492;
class << self
	attr_accessor :lex_en_expr_mid
end
self.lex_en_expr_mid = 500;
class << self
	attr_accessor :lex_en_expr_beg
end
self.lex_en_expr_beg = 524;
class << self
	attr_accessor :lex_en_expr_labelarg
end
self.lex_en_expr_labelarg = 740;
class << self
	attr_accessor :lex_en_expr_value
end
self.lex_en_expr_value = 747;
class << self
	attr_accessor :lex_en_expr_end
end
self.lex_en_expr_end = 755;
class << self
	attr_accessor :lex_en_leading_dot
end
self.lex_en_leading_dot = 929;
class << self
	attr_accessor :lex_en_line_comment
end
self.lex_en_line_comment = 932;
class << self
	attr_accessor :lex_en_line_begin
end
self.lex_en_line_begin = 159;


# line 82 "lib/parser/lexer.rl"
  # %

  ESCAPES = {
    'a' => "\a", 'b'  => "\b", 'e'  => "\e", 'f' => "\f",
    'n' => "\n", 'r'  => "\r", 's'  => "\s", 't' => "\t",
    'v' => "\v", '\\' => "\\"
  }

  BLANK_STRING = ''.freeze
  ESCAPED_NEXT_LINE = "\\\n".freeze
  REGEXP_META_CHARACTERS = Regexp.union(*"\\$()*+.<>?[]^{|}".chars).freeze
  UNDERSCORE_STRING = '_'.freeze

  RBRACE_OR_RBRACK = %w"} ]".freeze

  attr_reader   :source_buffer
  attr_reader   :encoding

  attr_accessor :diagnostics
  attr_accessor :static_env
  attr_accessor :force_utf32

  attr_accessor :cond, :cmdarg, :in_kwarg

  attr_accessor :tokens, :comments

  def initialize(version)
    @version    = version
    @static_env = nil

    @tokens     = nil
    @comments   = nil

    @has_encode = ''.respond_to?(:encode)

    reset
  end

  def reset(reset_state=true)
    # Ragel state:
    if reset_state
      # Unit tests set state prior to resetting lexer.
      @cs     = self.class.lex_en_line_begin

      @cond   = StackState.new('cond')
      @cmdarg = StackState.new('cmdarg')
      @cond_stack   = []
      @cmdarg_stack = []
    end

    @force_utf32   = false # Set to true by some tests

    @source        = nil # source string
    @source_pts    = nil # @source as a codepoint array
    @encoding      = nil # target encoding for output strings
    @need_encode   = nil

    @p             = 0   # stream position (saved manually in #advance)
    @ts            = nil # token start
    @te            = nil # token end
    @act           = 0   # next action

    @stack         = []  # state stack
    @top           = 0   # state stack top pointer

    # Lexer state:
    @token_queue   = []
    @literal_stack = []

    @eq_begin_s    = nil # location of last encountered =begin
    @sharp_s       = nil # location of last encountered #

    @newline_s     = nil # location of last encountered newline

    @num_base      = nil # last numeric base
    @num_digits_s  = nil # starting position of numeric digits
    @num_suffix_s  = nil # starting position of numeric suffix
    @num_xfrm      = nil # numeric suffix-induced transformation

    @escape_s      = nil # starting position of current sequence
    @escape        = nil # last escaped sequence, as string

    @herebody_s    = nil # starting position of current heredoc line

    # Ruby 1.9 ->() lambdas emit a distinct token if do/{ is
    # encountered after a matching closing parenthesis.
    @paren_nest    = 0
    @lambda_stack  = []

    # After encountering the closing line of <<~SQUIGGLY_HEREDOC,
    # we store the indentation level and give it out to the parser
    # on request. It is not possible to infer indentation level just
    # from the AST because escape sequences such as `\ ` or `\t` are
    # expanded inside the lexer, but count as non-whitespace for
    # indentation purposes.
    @dedent_level  = nil

    # If the lexer is in `command state' (aka expr_value)
    # at the entry to #advance, it will transition to expr_cmdarg
    # instead of expr_arg at certain points.
    @command_state = false

    # True at the end of "def foo a:"
    @in_kwarg      = false
  end

  def source_buffer=(source_buffer)
    @source_buffer = source_buffer

    if @source_buffer
      @source = @source_buffer.source
      @need_encode = false

      if @has_encode
        @encoding   = @source.encoding
      end

      if @has_encode && @source.encoding == Encoding::UTF_8
        @source_pts = @source.unpack('U*')
      else
        @source_pts = @source.unpack('C*')
      end

      if @has_encode &&
        (@source_pts.size > 1_000_000 || @force_utf32) &&
        @encoding != Encoding::UTF_32LE
        # A heuristic: if the buffer is larger than 1M, then
        # store it in UTF-32 and convert the tokens as they're
        # going out. If it's smaller, the conversion overhead
        # dominates runtime and this stops being beneficial.
        #
        # This is not really a good heuristic, as the result
        # heavily depends on token/character ratio. If it's low,
        # say the gem consists mostly of long identifiers and
        # symbols, then storing the source in UTF-8 would be faster.
        #
        # Patches accepted.
        @source = @source.encode(Encoding::UTF_32LE)
        @need_encode = true
      end

      if @source_pts[0] == 0xfeff
        # Skip byte order mark.
        @p = 1
      end
    else
      @source     = nil
      @source_pts = nil
    end
  end

  LEX_STATES = {
    :line_begin    => lex_en_line_begin,
    :expr_dot      => lex_en_expr_dot,
    :expr_fname    => lex_en_expr_fname,
    :expr_value    => lex_en_expr_value,
    :expr_beg      => lex_en_expr_beg,
    :expr_mid      => lex_en_expr_mid,
    :expr_arg      => lex_en_expr_arg,
    :expr_cmdarg   => lex_en_expr_cmdarg,
    :expr_end      => lex_en_expr_end,
    :expr_endarg   => lex_en_expr_endarg,
    :expr_endfn    => lex_en_expr_endfn,
    :expr_labelarg => lex_en_expr_labelarg,

    :interp_string => lex_en_interp_string,
    :interp_words  => lex_en_interp_words,
    :plain_string  => lex_en_plain_string,
    :plain_words   => lex_en_plain_string,
  }

  def state
    LEX_STATES.invert.fetch(@cs, @cs)
  end

  def state=(state)
    @cs = LEX_STATES.fetch(state)
  end

  def push_cmdarg
    @cmdarg_stack.push(@cmdarg)
    @cmdarg = StackState.new("cmdarg.#{@cmdarg_stack.count}")
  end

  def pop_cmdarg
    @cmdarg = @cmdarg_stack.pop
  end

  def push_cond
    @cond_stack.push(@cond)
    @cond = StackState.new("cond.#{@cond_stack.count}")
  end

  def pop_cond
    @cond = @cond_stack.pop
  end

  def dedent_level
    # We erase @dedent_level as a precaution to avoid accidentally
    # using a stale value.
    dedent_level, @dedent_level = @dedent_level, nil
    dedent_level
  end

  # Return next token: [type, value].
  def advance
    if @token_queue.any?
      return @token_queue.shift
    end

    # Ugly, but dependent on Ragel output. Consider refactoring it somehow.
    klass = self.class
    _lex_trans_keys         = klass.send :_lex_trans_keys
    _lex_key_spans          = klass.send :_lex_key_spans
    _lex_index_offsets      = klass.send :_lex_index_offsets
    _lex_indicies           = klass.send :_lex_indicies
    _lex_trans_targs        = klass.send :_lex_trans_targs
    _lex_trans_actions      = klass.send :_lex_trans_actions
    _lex_to_state_actions   = klass.send :_lex_to_state_actions
    _lex_from_state_actions = klass.send :_lex_from_state_actions
    _lex_eof_trans          = klass.send :_lex_eof_trans

    pe = @source_pts.size + 2
    p, eof = @p, pe

    @command_state = (@cs == klass.lex_en_expr_value ||
                      @cs == klass.lex_en_line_begin)

    
# line 10814 "lib/parser/lexer.rb"
begin
	testEof = false
	_slen, _trans, _keys, _inds, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if  @cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	case _lex_from_state_actions[ @cs] 
	when 76 then
# line 1 "NONE"
		begin
 @ts = p
		end
# line 10842 "lib/parser/lexer.rb"
	end
	_keys =  @cs << 1
	_inds = _lex_index_offsets[ @cs]
	_slen = _lex_key_spans[ @cs]
	_wide = ( (@source_pts[p] || 0))
	_trans = if (   _slen > 0 && 
			_lex_trans_keys[_keys] <= _wide && 
			_wide <= _lex_trans_keys[_keys + 1] 
		    ) then
			_lex_indicies[ _inds + _wide - _lex_trans_keys[_keys] ] 
		 else 
			_lex_indicies[ _inds + _slen ]
		 end
	end
	if _goto_level <= _eof_trans
	 @cs = _lex_trans_targs[_trans]
	if _lex_trans_actions[_trans] != 0
	case _lex_trans_actions[_trans]
	when 24 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 95 then
# line 799 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 25 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
	when 63 then
# line 1143 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
	when 66 then
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 264 then
# line 1187 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 32 then
# line 1445 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 34 then
# line 1461 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 36 then
# line 1489 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 51 then
# line 1675 "lib/parser/lexer.rl"
		begin
 heredoc_e     = p 		end
	when 304 then
# line 1732 "lib/parser/lexer.rl"
		begin
 @escape = nil 		end
	when 333 then
# line 1801 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 410 then
# line 2019 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
	when 404 then
# line 2020 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
	when 407 then
# line 2021 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
	when 401 then
# line 2022 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
	when 416 then
# line 2023 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
	when 384 then
# line 2024 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
	when 396 then
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 391 then
# line 2082 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 389 then
# line 2083 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 72 then
# line 2218 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 7 then
# line 1 "NONE"
		begin
 @te = p+1
		end
	when 92 then
# line 1042 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{')

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 747
		_goto_level = _again
		next
	end

   end
		end
	when 5 then
# line 987 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end

   end
		end
	when 88 then
# line 912 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, BLANK_STRING)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, BLANK_STRING)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 87 then
# line 848 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok
    string = string.encode(@encoding) if @need_encode

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if @need_encode
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 93 then
# line 987 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end

   end
		end
	when 90 then
# line 974 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 91 then
# line 848 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok
    string = string.encode(@encoding) if @need_encode

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if @need_encode
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 6 then
# line 874 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 4 then
# line 848 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok
    string = string.encode(@encoding) if @need_encode

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if @need_encode
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 119 then
# line 1042 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{')

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 747
		_goto_level = _again
		next
	end

   end
		end
	when 10 then
# line 987 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end

   end
		end
	when 116 then
# line 912 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, BLANK_STRING)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, BLANK_STRING)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 115 then
# line 848 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok
    string = string.encode(@encoding) if @need_encode

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if @need_encode
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 120 then
# line 987 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end

   end
		end
	when 118 then
# line 848 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok
    string = string.encode(@encoding) if @need_encode

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if @need_encode
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 11 then
# line 874 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 9 then
# line 848 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok
    string = string.encode(@encoding) if @need_encode

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if @need_encode
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 142 then
# line 912 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, BLANK_STRING)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, BLANK_STRING)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 141 then
# line 848 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok
    string = string.encode(@encoding) if @need_encode

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if @need_encode
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 144 then
# line 974 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    literal.extend_space @ts, @te
   end
		end
	when 145 then
# line 848 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok
    string = string.encode(@encoding) if @need_encode

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if @need_encode
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 148 then
# line 912 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, BLANK_STRING)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, BLANK_STRING)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 147 then
# line 848 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok
    string = string.encode(@encoding) if @need_encode

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if @need_encode
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 150 then
# line 848 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok
    string = string.encode(@encoding) if @need_encode

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if @need_encode
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 157 then
# line 1042 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DBEG, '#{')

    if current_literal.heredoc?
      current_literal.saved_herebody_s = @herebody_s
      @herebody_s = nil
    end

    current_literal.start_interp_brace
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 747
		_goto_level = _again
		next
	end

   end
		end
	when 13 then
# line 987 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end

   end
		end
	when 154 then
# line 912 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, BLANK_STRING)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, BLANK_STRING)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 153 then
# line 848 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok
    string = string.encode(@encoding) if @need_encode

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if @need_encode
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 158 then
# line 987 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    current_literal.flush_string
    current_literal.extend_content

    emit(:tSTRING_DVAR, nil, @ts, @ts + 1)

    p = @ts
    	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end

   end
		end
	when 156 then
# line 848 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    string = tok
    string = string.encode(@encoding) if @need_encode

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if @need_encode
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 12 then
# line 848 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
    string = tok
    string = string.encode(@encoding) if @need_encode

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if @need_encode
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 160 then
# line 912 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, BLANK_STRING)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, BLANK_STRING)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 159 then
# line 848 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    string = tok
    string = string.encode(@encoding) if @need_encode

    # tLABEL_END is only possible in non-cond context on >= 2.2
    if @version >= 22 && !@cond.active?
      lookahead = @source[@te...@te+2]
      lookahead = lookahead.encode(@encoding) if @need_encode
    end

    current_literal = literal
    if !current_literal.heredoc? &&
          (token = current_literal.nest_and_try_closing(string, @ts, @te, lookahead))
      if token[0] == :tLABEL_END
        p += 1
        pop_literal
         @cs = 740;
      else
         @cs = (pop_literal);
      end
      	begin
		p += 1
		_goto_level = _out
		next
	end

    else
      current_literal.extend_string(string, @ts, @te)
    end
   end
		end
	when 162 then
# line 1118 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tREGEXP_OPT, tok(@ts, @te - 1), @ts, @te - 1)
        p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 163 then
# line 1106 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        unknown_options = tok.scan(/[^imxouesn]/)
        if unknown_options.any?
          diagnostic :error, :regexp_options,
                     { :options => unknown_options.join }
        end

        emit(:tREGEXP_OPT)
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 14 then
# line 1246 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 164 then
# line 1246 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if    tok =~ /^\$([1-9][0-9]*)$/
          emit(:tNTH_REF, tok(@ts + 1).to_i)
        elsif tok =~ /^\$([&`'+])$/
          emit(:tBACK_REF)
        else
          emit(:tGVAR)
        end

         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 166 then
# line 1259 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@@[0-9]/
          diagnostic :error, :cvar_name, { :name => tok }
        end

        emit(:tCVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 165 then
# line 1269 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tok =~ /^@[0-9]/
          diagnostic :error, :ivar_name, { :name => tok }
        end

        emit(:tIVAR)
         @cs = (stack_pop); 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 187 then
# line 1290 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(KEYWORDS_BEGIN);
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 173 then
# line 1298 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tIDENTIFIER)
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 16 then
# line 1302 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
            @cs = 755; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end
  end
		end
	when 170 then
# line 1311 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 182 then
# line 1315 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 169 then
# line 1323 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 168 then
# line 547 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 186 then
# line 1290 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS_BEGIN);
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 183 then
# line 1294 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 185 then
# line 1298 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 180 then
# line 1302 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
            @cs = 755; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end
  end
		end
	when 176 then
# line 1311 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 181 then
# line 1318 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 524
		_goto_level = _again
		next
	end
  end
		end
	when 174 then
# line 1320 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 179 then
# line 1323 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 15 then
# line 1323 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 172 then
# line 1 "NONE"
		begin
	case  @act
	when 31 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN);
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 32 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 33 then
	begin begin p = (( @te))-1; end
 emit(:tIDENTIFIER)
            @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
end 
			end
	when 18 then
# line 1335 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tLABEL, tok(@ts, @te - 1))
            @cs = 740; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 189 then
# line 1341 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 188 then
# line 547 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 191 then
# line 1338 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 190 then
# line 1341 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 17 then
# line 1341 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 197 then
# line 1367 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 455; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 196 then
# line 1373 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 195 then
# line 547 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 207 then
# line 1352 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 198 then
# line 1356 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tIDENTIFIER)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 203 then
# line 1367 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 455; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 201 then
# line 1370 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 206 then
# line 1373 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 230 then
# line 1431 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        # Unlike expr_beg as invoked in the next rule, do not warn
        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 213 then
# line 1449 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        if tok(tm, tm + 1) == '/'
          # Ambiguous regexp literal.
          diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
        end

        p = tm - 1
        	begin
		 @cs = 524
		_goto_level = _again
		next
	end

       end
		end
	when 219 then
# line 1473 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; p = p - 1; 	begin
		 @cs = 524
		_goto_level = _again
		next
	end
  end
		end
	when 20 then
# line 1481 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 524
		_goto_level = _again
		next
	end
  end
		end
	when 221 then
# line 1490 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 35 then
# line 1499 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 208 then
# line 1513 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 524
		_goto_level = _again
		next
	end
  end
		end
	when 209 then
# line 547 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 220 then
# line 1440 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 524
		_goto_level = _again
		next
	end
  end
		end
	when 216 then
# line 1462 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 524
		_goto_level = _again
		next
	end

       end
		end
	when 218 then
# line 1478 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 524
		_goto_level = _again
		next
	end
  end
		end
	when 212 then
# line 1499 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 211 then
# line 1504 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 229 then
# line 1513 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 524
		_goto_level = _again
		next
	end
  end
		end
	when 21 then
# line 1504 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 37 then
# line 1513 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 524
		_goto_level = _again
		next
	end
  end
		end
	when 19 then
# line 1 "NONE"
		begin
	case  @act
	when 58 then
	begin begin p = (( @te))-1; end

        if tok(tm, tm + 1) == '/'
          # Ambiguous regexp literal.
          diagnostic :warning, :ambiguous_literal, nil, range(tm, tm + 1)
        end

        p = tm - 1
        	begin
		 @cs = 524
		_goto_level = _again
		next
	end

      end
	when 59 then
	begin begin p = (( @te))-1; end

        diagnostic :warning, :ambiguous_prefix, { :prefix => tok(tm, @te) },
                   range(tm, @te)

        p = tm - 1
        	begin
		 @cs = 524
		_goto_level = _again
		next
	end

      end
	when 64 then
	begin begin p = (( @te))-1; end

        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

      end
	else
	begin begin p = (( @te))-1; end
end
end 
			end
	when 39 then
# line 1549 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 455
		_goto_level = _again
		next
	end
  end
		end
	when 234 then
# line 547 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 235 then
# line 1549 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 455
		_goto_level = _again
		next
	end
  end
		end
	when 40 then
# line 1549 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1
           	begin
		 @cs = 455
		_goto_level = _again
		next
	end
  end
		end
	when 38 then
# line 1 "NONE"
		begin
	case  @act
	when 71 then
	begin begin p = (( @te))-1; end

        if @cond.active?
          emit(:kDO_COND, 'do', @te - 2, @te)
        else
          emit(:kDO, 'do', @te - 2, @te)
        end
         @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 72 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 455
		_goto_level = _again
		next
	end
 end
end 
			end
	when 245 then
# line 1576 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_do(true)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 238 then
# line 1582 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 239 then
# line 547 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 240 then
# line 1579 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 243 then
# line 1582 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 249 then
# line 1606 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 524
		_goto_level = _again
		next
	end
  end
		end
	when 248 then
# line 547 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 257 then
# line 1598 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 524
		_goto_level = _again
		next
	end
  end
		end
	when 251 then
# line 1600 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 255 then
# line 1606 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 524
		_goto_level = _again
		next
	end
  end
		end
	when 250 then
# line 1 "NONE"
		begin
	case  @act
	when 79 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 524; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 80 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 524
		_goto_level = _again
		next
	end
 end
end 
			end
	when 285 then
# line 1623 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = p - 1;
        if tok.start_with? '-'
          emit(:tUMINUS_NUM, '-', @ts, @ts + 1)
           @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 286 then
# line 1643 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type = delimiter = @source[@ts].chr
        p = p - 1; 	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 280 then
# line 1650 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = @source[@ts].chr, tok[-1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 47 then
# line 1657 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = @source[@ts...(@te - 1)], @source[@te - 1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 287 then
# line 1706 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, @source[@te - 1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 50 then
# line 1720 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 301 then
# line 1747 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[@source[@ts + 1]]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 300 then
# line 1757 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 288 then
# line 1796 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 44 then
# line 1816 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = p - 1;

        if version?(18)
          ident = tok(@ts, @te - 2)

          emit((@source[@ts] =~ /[A-Z]/) ? :tCONSTANT : :tIDENTIFIER,
               ident, @ts, @te - 2)
          p = p - 1; # continue as a symbol

          if !@static_env.nil? && @static_env.declared?(ident)
             @cs = 755;
          else
             @cs = (arg_or_cmdarg);
          end
        else
          emit(:tLABEL, tok(@ts, @te - 2), @ts, @te - 1)
           @cs = 740;
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 274 then
# line 1862 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 159
		_goto_level = _again
		next
	end
  end
		end
	when 48 then
# line 1875 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 260 then
# line 547 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 284 then
# line 1633 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tSTAR)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 281 then
# line 1657 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        type, delimiter = @source[@ts...(@te - 1)], @source[@te - 1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 279 then
# line 1663 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 289 then
# line 1720 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1), @ts)
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 299 then
# line 1757 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :incomplete_escape, nil, range(@ts, @ts + 1)
       end
		end
	when 305 then
# line 1763 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 282 then
# line 1796 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 327 then
# line 1231 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 271 then
# line 1859 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 273 then
# line 1862 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 159
		_goto_level = _again
		next
	end
  end
		end
	when 276 then
# line 1875 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 46 then
# line 1663 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :string_eof, nil, range(@ts, @ts + 1)
       end
		end
	when 53 then
# line 1734 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 45 then
# line 1859 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
		end
	when 49 then
# line 1875 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = @ts - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 43 then
# line 1 "NONE"
		begin
	case  @act
	when 102 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 103 then
	begin begin p = (( @te))-1; end
 emit(:kRESCUE, tok(@ts, tm), @ts, tm)
           p = tm - 1
            @cs = 500; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 104 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 106 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
 end
	when 107 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 110 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
 end
end 
			end
	when 335 then
# line 1895 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 524
		_goto_level = _again
		next
	end
  end
		end
	when 336 then
# line 547 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 337 then
# line 1883 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 341 then
# line 1895 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 524
		_goto_level = _again
		next
	end
  end
		end
	when 56 then
# line 1905 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 345 then
# line 1910 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        	begin
		 @cs = (push_literal(tok, tok, @ts))
		_goto_level = _again
		next
	end

       end
		end
	when 344 then
# line 1920 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 524
		_goto_level = _again
		next
	end
  end
		end
	when 343 then
# line 547 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 347 then
# line 1914 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 346 then
# line 1920 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 524
		_goto_level = _again
		next
	end
  end
		end
	when 55 then
# line 1920 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 524
		_goto_level = _again
		next
	end
  end
		end
	when 378 then
# line 1931 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit(:tLAMBDA, tok(@ts, @ts + 2), @ts, @ts + 2)

        @lambda_stack.push @paren_nest
         @cs = 426; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 70 then
# line 1968 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:kCLASS, 'class', @ts, @ts + 5)
           emit(:tLSHFT, '<<',    @te - 2, @te)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 355 then
# line 2103 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        type, delimiter = tok, @source[@te - 1].chr
        	begin
		 @cs = (push_literal(type, delimiter, @ts, nil, false, false, true))
		_goto_level = _again
		next
	end

       end
		end
	when 58 then
# line 2121 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end
  end
		end
	when 375 then
# line 2128 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 433; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 369 then
# line 2155 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 524; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 361 then
# line 2159 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if RBRACE_OR_RBRACK.include?(tok)
           @cs = 492;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 374 then
# line 2173 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tOP_ASGN, tok(@ts, @te - 1))
            @cs = 524; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 359 then
# line 2177 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tEH)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 356 then
# line 2185 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit_table(PUNCTUATION)
            @cs = 524; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 358 then
# line 2198 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tSEMI)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 424 then
# line 2201 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :error, :bare_backslash, nil, range(@ts, @ts + 1)
        p = p - 1;
       end
		end
	when 354 then
# line 2207 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 353 then
# line 547 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 434 then
# line 1964 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS)
            @cs = 314; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 432 then
# line 1968 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:kCLASS, 'class', @ts, @ts + 5)
           emit(:tLSHFT, '<<',    @te - 2, @te)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 431 then
# line 1979 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(KEYWORDS)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 381 then
# line 2053 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 421 then
# line 2113 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 373 then
# line 2121 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1; 	begin
		 @stack[ @top] =  @cs
		 @top+= 1
		 @cs = 309
		_goto_level = _again
		next
	end
  end
		end
	when 379 then
# line 2128 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 433; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 426 then
# line 1231 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
   end
		end
	when 368 then
# line 2155 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 524; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 380 then
# line 2185 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 524; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 366 then
# line 2192 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 372 then
# line 2207 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 59 then
# line 2053 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :error, :no_dot_digit_literal
       end
		end
	when 57 then
# line 2207 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin 
        diagnostic :fatal, :unexpected, { :character => tok.inspect[1..-2] }
       end
		end
	when 60 then
# line 1 "NONE"
		begin
	case  @act
	when 123 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'
            emit(:tLAMBEG)
          else # 'do'
            emit(:kDO_LAMBDA)
          end
        else
          if tok == '{'
            emit(:tLCURLY)
          else # 'do'
            emit_do
          end
        end

         @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 124 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 314; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 125 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class', @ts, @ts + 5)
           emit(:tLSHFT, '<<',    @te - 2, @te)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 126 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 524; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 127 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 128 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 500; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 129 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'
           @cs = 524; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 455; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 130 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          unless !@static_env.nil? && @static_env.declared?(tok)
             @cs = (arg_or_cmdarg);
          end
        else
          emit(:k__ENCODING__)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 131 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 132 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? UNDERSCORE_STRING
          diagnostic :error, :trailing_in_number, { :character => UNDERSCORE_STRING },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 134 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 135 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 136 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 138 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 142 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 143 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 455; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
end 
			end
	when 74 then
# line 2219 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 439 then
# line 2222 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 159; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 440 then
# line 2222 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 159; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 71 then
# line 2222 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  emit(:tNL, nil, @newline_s, @newline_s + 1)
           p = p - 1;  @cs = 159; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 443 then
# line 2232 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = 159
		_goto_level = _again
		next
	end

       end
		end
	when 442 then
# line 2240 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        diagnostic :fatal, :embedded_document, nil,
                   range(@eq_begin_s, @eq_begin_s + '=begin'.length)
       end
		end
	when 85 then
# line 2250 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 932
		_goto_level = _again
		next
	end
  end
		end
	when 2 then
# line 2254 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 77 then
# line 2257 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = p - 1; 	begin
		 @cs = 747
		_goto_level = _again
		next
	end
  end
		end
	when 78 then
# line 547 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    # Sit at EOF indefinitely. #advance would return $eof each time.
    # This allows to feed the lexer more data if needed; this is only used
    # in tests.
    #
    # Note that this action is not embedded into e_eof like e_heredoc_nl and e_bs
    # below. This is due to the fact that scanner state at EOF is observed
    # by tests, and encapsulating it in a rule would break the introspection.
    p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

   end
		end
	when 79 then
# line 2247 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 84 then
# line 2250 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  @eq_begin_s = @ts
           	begin
		 @cs = 932
		_goto_level = _again
		next
	end
  end
		end
	when 83 then
# line 2257 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 747
		_goto_level = _again
		next
	end
  end
		end
	when 1 then
# line 2257 "lib/parser/lexer.rl"
		begin
 begin p = (( @te))-1; end
 begin  p = p - 1; 	begin
		 @cs = 747
		_goto_level = _again
		next
	end
  end
		end
	when 69 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 89 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 912 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, BLANK_STRING)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, BLANK_STRING)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 117 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 912 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, BLANK_STRING)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, BLANK_STRING)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 143 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 912 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, BLANK_STRING)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, BLANK_STRING)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 149 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 912 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, BLANK_STRING)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, BLANK_STRING)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 155 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 912 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, BLANK_STRING)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, BLANK_STRING)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 161 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 912 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, BLANK_STRING)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, BLANK_STRING)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
	when 231 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1431 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        # Unlike expr_beg as invoked in the next rule, do not warn
        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 222 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1490 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 214 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1499 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 302 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1747 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        escape = { " "  => '\s', "\r" => '\r', "\n" => '\n', "\t" => '\t',
                   "\v" => '\v', "\f" => '\f' }[@source[@ts + 1]]
        diagnostic :warning, :invalid_escape_use, { :escape => escape }, range

        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 275 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1862 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = @ts - 1
           	begin
		 @cs = 159
		_goto_level = _again
		next
	end
  end
		end
	when 444 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2232 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        emit_comment(@eq_begin_s, @te)
        	begin
		 @cs = 159
		_goto_level = _again
		next
	end

       end
		end
	when 441 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2237 "lib/parser/lexer.rl"
		begin
 @te = p+1
		end
	when 86 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2250 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  @eq_begin_s = @ts
           	begin
		 @cs = 932
		_goto_level = _again
		next
	end
  end
		end
	when 3 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 2254 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = pe - 3  end
		end
	when 398 then
# line 655 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tRATIONAL,  Rational(chars)) } 		end
# line 2026 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? UNDERSCORE_STRING
          diagnostic :error, :trailing_in_number, { :character => UNDERSCORE_STRING },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 397 then
# line 656 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, chars)) } 		end
# line 2026 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? UNDERSCORE_STRING
          diagnostic :error, :trailing_in_number, { :character => UNDERSCORE_STRING },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 399 then
# line 657 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 2026 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? UNDERSCORE_STRING
          diagnostic :error, :trailing_in_number, { :character => UNDERSCORE_STRING },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 392 then
# line 661 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Float(chars))) } 		end
# line 2085 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 393 then
# line 665 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tRATIONAL,  Rational(chars)) } 		end
# line 2085 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 394 then
# line 666 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tIMAGINARY, Complex(0, Rational(chars))) } 		end
# line 2085 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 112 then
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        diagnostic :error, :unicode_point_too_large, nil,
                   range(codepoint_s, codepoint_s + codepoint_str.length)
        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 138 then
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        diagnostic :error, :unicode_point_too_large, nil,
                   range(codepoint_s, codepoint_s + codepoint_str.length)
        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 323 then
# line 681 "lib/parser/lexer.rl"
		begin

    @escape = ""

    codepoints  = tok(@escape_s + 2, p - 1)
    codepoint_s = @escape_s + 2

    codepoints.split(/[ \t]/).each do |codepoint_str|
      codepoint = codepoint_str.to_i(16)

      if codepoint >= 0x110000
        diagnostic :error, :unicode_point_too_large, nil,
                   range(codepoint_s, codepoint_s + codepoint_str.length)
        break
      end

      @escape     += codepoint.chr(Encoding::UTF_8)
      codepoint_s += codepoint_str.length + 1
    end
  		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 96 then
# line 701 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 122 then
# line 701 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 307 then
# line 701 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 99 then
# line 706 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 125 then
# line 706 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 310 then
# line 706 "lib/parser/lexer.rl"
		begin

    diagnostic :fatal, :invalid_escape
  		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 101 then
# line 725 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 127 then
# line 725 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 312 then
# line 725 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 98 then
# line 732 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 124 then
# line 732 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 309 then
# line 732 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s, p).to_i(8) % 0x100) 		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 114 then
# line 736 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 140 then
# line 736 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 325 then
# line 736 "lib/parser/lexer.rl"
		begin
 @escape = encode_escape(tok(@escape_s + 1, p).to_i(16)) 		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 109 then
# line 740 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 135 then
# line 740 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 320 then
# line 740 "lib/parser/lexer.rl"
		begin
 @escape = tok(@escape_s + 1, p).to_i(16).chr(Encoding::UTF_8) 		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 113 then
# line 744 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 139 then
# line 744 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 324 then
# line 744 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_hex_escape, nil, range(@escape_s - 1, p + 2)
      		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 108 then
# line 756 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 134 then
# line 756 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 319 then
# line 756 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 111 then
# line 767 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 137 then
# line 767 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 322 then
# line 767 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 97 then
# line 793 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 123 then
# line 793 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 308 then
# line 793 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 146 then
# line 799 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 151 then
# line 799 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 62 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 26 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1445 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 28 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1461 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 30 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1489 "lib/parser/lexer.rl"
		begin
 tm = p 		end
	when 175 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1320 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 194 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1338 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 202 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1370 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 29 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1499 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
        p = @ts - 1
        	begin
		 @cs = 755
		_goto_level = _again
		next
	end

       end
		end
	when 233 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1504 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 225 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1510 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 244 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1579 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 256 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1600 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 252 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1603 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 272 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1859 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 342 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1883 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 338 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1886 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
      if @in_kwarg
        p = p - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end

      else
        	begin
		 @cs = 159
		_goto_level = _again
		next
	end

      end
     end
		end
	when 351 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1914 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 348 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1917 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 159
		_goto_level = _again
		next
	end
  end
		end
	when 425 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2192 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 367 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2195 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 929
		_goto_level = _again
		next
	end
  end
		end
	when 80 then
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 2247 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 224 then
# line 1012 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1414 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          p = @ts - 1
          	begin
		 @cs = 755
		_goto_level = _again
		next
	end

        else
          emit(:tLCURLY, '{', @te - 1, @te)
           @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 246 then
# line 1012 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1572 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACE_ARG)
            @cs = 747;  end
		end
	when 334 then
# line 1012 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1774 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop
          emit(:tLAMBEG)
        else
          emit(:tLBRACE)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 437 then
# line 1012 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    current_literal = literal
    if current_literal
      current_literal.start_interp_brace
    end
  		end
# line 1939 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'
            emit(:tLAMBEG)
          else # 'do'
            emit(:kDO_LAMBDA)
          end
        else
          if tok == '{'
            emit(:tLCURLY)
          else # 'do'
            emit_do
          end
        end

         @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 438 then
# line 1021 "lib/parser/lexer.rl"
		begin

    current_literal = literal
    if current_literal
      if current_literal.end_interp_brace_and_try_closing
        if version?(18, 19)
          emit(:tRCURLY, '}', p - 1, p)
        else
          emit(:tSTRING_DEND, '}', p - 1, p)
        end

        if current_literal.saved_herebody_s
          @herebody_s = current_literal.saved_herebody_s
        end

        p = p - 1;
         @cs = (stack_pop);
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
    end
  		end
# line 2159 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if RBRACE_OR_RBRACK.include?(tok)
           @cs = 492;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 64 then
# line 1143 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
	when 67 then
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 178 then
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1320 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 193 then
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1338 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 205 then
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1370 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 227 then
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1507 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 242 then
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1579 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 254 then
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1600 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 278 then
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1859 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 340 then
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1883 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 350 then
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1914 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 371 then
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2192 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 82 then
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2247 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 199 then
# line 1187 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1360 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 290 then
# line 1187 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1712 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 263 then
# line 1187 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1847 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 363 then
# line 1187 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2135 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 455; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 365 then
# line 1187 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1 "NONE"
		begin
	case  @act
	when 123 then
	begin begin p = (( @te))-1; end

        if @lambda_stack.last == @paren_nest
          @lambda_stack.pop

          if tok == '{'
            emit(:tLAMBEG)
          else # 'do'
            emit(:kDO_LAMBDA)
          end
        else
          if tok == '{'
            emit(:tLCURLY)
          else # 'do'
            emit_do
          end
        end

         @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 124 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 314; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 125 then
	begin begin p = (( @te))-1; end
 emit(:kCLASS, 'class', @ts, @ts + 5)
           emit(:tLSHFT, '<<',    @te - 2, @te)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 126 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 524; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 127 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 128 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
            @cs = 500; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 129 then
	begin begin p = (( @te))-1; end

        emit_table(KEYWORDS)

        if version?(18) && tok == 'not'
           @cs = 524; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 455; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 130 then
	begin begin p = (( @te))-1; end

        if version?(18)
          emit(:tIDENTIFIER)

          unless !@static_env.nil? && @static_env.declared?(tok)
             @cs = (arg_or_cmdarg);
          end
        else
          emit(:k__ENCODING__)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 131 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 132 then
	begin begin p = (( @te))-1; end

        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? UNDERSCORE_STRING
          diagnostic :error, :trailing_in_number, { :character => UNDERSCORE_STRING },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 134 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tINTEGER, tok(@ts, @te - 1).to_i)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 135 then
	begin begin p = (( @te))-1; end

        if version?(18, 19, 20)
          diagnostic :error,
                     :trailing_in_number, { :character => tok(@te - 1, @te) },
                     range(@te - 1, @te)
        else
          emit(:tFLOAT, tok(@ts, @te - 1).to_f)
          p = p - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
      end
	when 136 then
	begin begin p = (( @te))-1; end

        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

      end
	when 138 then
	begin begin p = (( @te))-1; end
 emit(:tCONSTANT)
            @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 142 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 143 then
	begin begin p = (( @te))-1; end

        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 455; 	begin
		p += 1
		_goto_level = _out
		next
	end

      end
end 
			end
	when 200 then
# line 1188 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1360 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tFID, tok(@ts, tm), @ts, tm)
            @cs = (arg_or_cmdarg); p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 291 then
# line 1188 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1712 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 265 then
# line 1188 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1847 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 364 then
# line 1188 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2135 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if tm == @te
          # Suffix was consumed, e.g. foo!
          emit(:tFID)
        else
          # Suffix was not consumed, e.g. foo!=
          emit(:tIDENTIFIER, tok(@ts, tm), @ts, tm)
          p = tm - 1
        end
         @cs = 455; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 292 then
# line 1193 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1712 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 266 then
# line 1193 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1847 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 293 then
# line 1194 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1712 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 267 then
# line 1194 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1847 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 297 then
# line 1195 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1712 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 270 then
# line 1195 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1847 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 296 then
# line 1196 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1712 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 269 then
# line 1196 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1 "NONE"
		begin
	case  @act
	when 102 then
	begin begin p = (( @te))-1; end
 emit_table(PUNCTUATION_BEGIN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 103 then
	begin begin p = (( @te))-1; end
 emit(:kRESCUE, tok(@ts, tm), @ts, tm)
           p = tm - 1
            @cs = 500; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 104 then
	begin begin p = (( @te))-1; end
 emit_table(KEYWORDS_BEGIN)
            @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end
 end
	when 106 then
	begin begin p = (( @te))-1; end
 p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
 end
	when 107 then
	begin begin p = (( @te))-1; end

    emit(:tIDENTIFIER)

    if !@static_env.nil? && @static_env.declared?(tok)
       @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

    else
       @cs = (arg_or_cmdarg); 	begin
		p += 1
		_goto_level = _out
		next
	end

    end
  end
	when 110 then
	begin begin p = (( @te))-1; end
 p = @ts - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
 end
end 
			end
	when 294 then
# line 1197 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 1712 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 268 then
# line 1197 "lib/parser/lexer.rl"
		begin
 tm = p - 3 		end
# line 1847 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  p = @ts - 1
           	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 295 then
# line 1202 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 1712 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tSYMBOL, tok(@ts + 1, tm), @ts, tm)
        p = tm - 1
         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 420 then
# line 1207 "lib/parser/lexer.rl"
		begin
 tm = p - 2 		end
# line 2117 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tCONSTANT, tok(@ts, tm), @ts, tm)
           p = tm - 1; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 223 then
# line 1213 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 1408 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK, '[', @te - 1, @te)
            @cs = 524; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 326 then
# line 1213 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 1786 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 423 then
# line 1213 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)
  		end
# line 2181 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLBRACK2)
            @cs = 524; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 215 then
# line 1220 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1389 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        if version?(18)
          emit(:tLPAREN2, '(', @te - 1, @te)
           @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
          emit(:tLPAREN_ARG, '(', @te - 1, @te)
           @cs = 524; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 228 then
# line 1220 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1402 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLPAREN2)
            @cs = 524; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 236 then
# line 1220 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1526 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit(:tLPAREN_ARG, '(', @te - 1, @te)
        if version?(18)
           @cs = 747; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = 524; 	begin
		p += 1
		_goto_level = _out
		next
	end

        end
       end
		end
	when 283 then
# line 1220 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 1791 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:tLPAREN)
           	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 376 then
# line 1220 "lib/parser/lexer.rl"
		begin

    @cond.push(false); @cmdarg.push(false)

    @paren_nest += 1
  		end
# line 2155 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit_table(PUNCTUATION)
            @cs = 524; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 377 then
# line 1226 "lib/parser/lexer.rl"
		begin

    @paren_nest -= 1
  		end
# line 2159 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        emit_table(PUNCTUATION)
        @cond.lexpop; @cmdarg.lexpop

        if RBRACE_OR_RBRACK.include?(tok)
           @cs = 492;
        else # )
          # fnext expr_endfn; ?
        end

        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 52 then
# line 1675 "lib/parser/lexer.rl"
		begin
 heredoc_e     = p 		end
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 298 then
# line 1676 "lib/parser/lexer.rl"
		begin
 new_herebody_s = p 		end
# line 1677 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        tok(@ts, heredoc_e) =~ /^<<(-?)(~?)(["'`]?)(.*)\3$/

        indent      = !$1.empty? || !$2.empty?
        dedent_body = !$2.empty?
        type        =  '<<' + ($3.empty? ? '"' : $3)
        delimiter   =  $4

        if dedent_body && version?(18, 19, 20, 21, 22)
          emit(:tLSHFT, '<<', @ts, @ts + 2)
          p = @ts + 1
           @cs = 524; 	begin
		p += 1
		_goto_level = _out
		next
	end

        else
           @cs = (push_literal(type, delimiter, @ts, heredoc_e, indent, dedent_body));

          if @herebody_s.nil?
            @herebody_s = new_herebody_s
          end

          p = @herebody_s - 1
        end
       end
		end
	when 303 then
# line 1732 "lib/parser/lexer.rl"
		begin
 @escape = nil 		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 330 then
# line 1801 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1802 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  emit(:kRESCUE, tok(@ts, tm), @ts, tm)
           p = tm - 1
            @cs = 500; 	begin
		p += 1
		_goto_level = _out
		next
	end
  end
		end
	when 411 then
# line 2019 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 405 then
# line 2020 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 408 then
# line 2021 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 402 then
# line 2022 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 417 then
# line 2023 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 386 then
# line 2024 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
	when 418 then
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 654 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 73 then
# line 2218 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 2219 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin  p = tm - 1; 	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 8 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 184 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1290 "lib/parser/lexer.rl"
		begin
 @act = 31;		end
	when 171 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1294 "lib/parser/lexer.rl"
		begin
 @act = 32;		end
	when 167 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1298 "lib/parser/lexer.rl"
		begin
 @act = 33;		end
	when 22 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1449 "lib/parser/lexer.rl"
		begin
 @act = 58;		end
	when 217 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1462 "lib/parser/lexer.rl"
		begin
 @act = 59;		end
	when 23 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1499 "lib/parser/lexer.rl"
		begin
 @act = 64;		end
	when 210 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1504 "lib/parser/lexer.rl"
		begin
 @act = 65;		end
	when 237 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1536 "lib/parser/lexer.rl"
		begin
 @act = 71;		end
	when 41 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1549 "lib/parser/lexer.rl"
		begin
 @act = 72;		end
	when 258 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1594 "lib/parser/lexer.rl"
		begin
 @act = 79;		end
	when 247 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1598 "lib/parser/lexer.rl"
		begin
 @act = 80;		end
	when 261 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1796 "lib/parser/lexer.rl"
		begin
 @act = 102;		end
	when 329 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1802 "lib/parser/lexer.rl"
		begin
 @act = 103;		end
	when 328 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1808 "lib/parser/lexer.rl"
		begin
 @act = 104;		end
	when 54 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1847 "lib/parser/lexer.rl"
		begin
 @act = 106;		end
	when 259 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1231 "lib/parser/lexer.rl"
		begin
 @act = 107;		end
	when 262 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1875 "lib/parser/lexer.rl"
		begin
 @act = 110;		end
	when 433 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1939 "lib/parser/lexer.rl"
		begin
 @act = 123;		end
	when 428 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1964 "lib/parser/lexer.rl"
		begin
 @act = 124;		end
	when 436 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1974 "lib/parser/lexer.rl"
		begin
 @act = 126;		end
	when 429 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1979 "lib/parser/lexer.rl"
		begin
 @act = 127;		end
	when 430 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1983 "lib/parser/lexer.rl"
		begin
 @act = 128;		end
	when 435 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1987 "lib/parser/lexer.rl"
		begin
 @act = 129;		end
	when 427 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1998 "lib/parser/lexer.rl"
		begin
 @act = 130;		end
	when 422 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2012 "lib/parser/lexer.rl"
		begin
 @act = 131;		end
	when 357 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2026 "lib/parser/lexer.rl"
		begin
 @act = 132;		end
	when 388 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2070 "lib/parser/lexer.rl"
		begin
 @act = 135;		end
	when 61 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2085 "lib/parser/lexer.rl"
		begin
 @act = 136;		end
	when 360 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2113 "lib/parser/lexer.rl"
		begin
 @act = 138;		end
	when 352 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1231 "lib/parser/lexer.rl"
		begin
 @act = 142;		end
	when 362 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2135 "lib/parser/lexer.rl"
		begin
 @act = 143;		end
	when 152 then
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 912 "lib/parser/lexer.rl"
		begin
 @te = p+1
 begin 
    current_literal = literal
    if @te == pe
      diagnostic :fatal, :string_eof, nil,
                 range(current_literal.str_s, current_literal.str_s + 1)
    end

    if current_literal.heredoc?
      line = tok(@herebody_s, @ts).gsub(/\r+$/, BLANK_STRING)

      if version?(18, 19, 20)
        # See ruby:c48b4209c
        line = line.gsub(/\r.*$/, BLANK_STRING)
      end

      # Try ending the heredoc with the complete most recently
      # scanned line. @herebody_s always refers to the start of such line.
      if current_literal.nest_and_try_closing(line, @herebody_s, @ts)
        # Adjust @herebody_s to point to the next line.
        @herebody_s = @te

        # Continue regular lexing after the heredoc reference (<<END).
        p = current_literal.heredoc_e - 1
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      else
        # Calculate indentation level for <<~HEREDOCs.
        current_literal.infer_indent_level(line)

        # Ditto.
        @herebody_s = @te
      end
    else
      # Try ending the literal with a newline.
      if current_literal.nest_and_try_closing(tok, @ts, @te)
         @cs = (pop_literal); 	begin
		p += 1
		_goto_level = _out
		next
	end

      end

      if @herebody_s
        # This is a regular literal intertwined with a heredoc. Like:
        #
        #     p <<-foo+"1
        #     bar
        #     foo
        #     2"
        #
        # which, incidentally, evaluates to "bar\n1\n2".
        p = @herebody_s - 1
        @herebody_s = nil
      end
    end

    if current_literal.words? && !eof_codepoint?(@source_pts[p])
      current_literal.extend_space @ts, @te
    else
      # A literal newline is appended if the heredoc was _not_ closed
      # this time (see fbreak above). See also Literal#nest_and_try_closing
      # for rationale of calling #flush_string here.
      current_literal.extend_string tok, @ts, @te
      current_literal.flush_string
    end
   end
		end
# line 799 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
	when 102 then
# line 701 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 710 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 128 then
# line 701 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 710 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 313 then
# line 701 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 710 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 107 then
# line 701 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 714 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 133 then
# line 701 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 714 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 318 then
# line 701 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 714 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 106 then
# line 720 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 714 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 132 then
# line 720 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 714 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 317 then
# line 720 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 714 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 104 then
# line 725 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 714 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 130 then
# line 725 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 714 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 315 then
# line 725 "lib/parser/lexer.rl"
		begin
 @escape = "\x7f" 		end
# line 714 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 100 then
# line 726 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 710 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 126 then
# line 726 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 710 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 311 then
# line 726 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 710 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 110 then
# line 756 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 767 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 136 then
# line 756 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 767 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 321 then
# line 756 "lib/parser/lexer.rl"
		begin

        diagnostic :fatal, :invalid_unicode_escape, nil, range(@escape_s - 1, p)
      		end
# line 767 "lib/parser/lexer.rl"
		begin

          diagnostic :fatal, :unterminated_unicode, nil, range(p - 1, p)
        		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 94 then
# line 799 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 793 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 121 then
# line 799 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 793 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 306 then
# line 799 "lib/parser/lexer.rl"
		begin

    @escape_s = p
    @escape   = nil
  		end
# line 793 "lib/parser/lexer.rl"
		begin

      diagnostic :fatal, :escape_eof, nil, range(p - 1, p)
    		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 65 then
# line 1143 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
	when 177 then
# line 1143 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1320 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 192 then
# line 1143 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1338 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 204 then
# line 1143 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1370 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 226 then
# line 1143 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1507 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin  	begin
		 @cs = 755
		_goto_level = _again
		next
	end
  end
		end
	when 241 then
# line 1143 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1579 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 253 then
# line 1143 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1600 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 277 then
# line 1143 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1859 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 339 then
# line 1143 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1883 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 349 then
# line 1143 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1914 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 370 then
# line 1143 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2192 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 81 then
# line 1143 "lib/parser/lexer.rl"
		begin
 @sharp_s = p - 1 		end
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 2247 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1;		end
	when 413 then
# line 2023 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 654 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 383 then
# line 2024 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 654 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
	when 395 then
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 654 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2026 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? UNDERSCORE_STRING
          diagnostic :error, :trailing_in_number, { :character => UNDERSCORE_STRING },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 390 then
# line 2082 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 660 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 2085 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 387 then
# line 2083 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 660 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tFLOAT,     Float(chars)) } 		end
# line 2085 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@ts, @num_suffix_s)

        if version?(18, 19, 20)
          emit(:tFLOAT, Float(digits))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits)
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 232 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 521 "lib/parser/lexer.rl"
		begin

    # Record position of a newline for precise location reporting on tNL
    # tokens.
    #
    # This action is embedded directly into c_nl, as it is idempotent and
    # there are no cases when we need to skip it.
    @newline_s = p
  		end
# line 1504 "lib/parser/lexer.rl"
		begin
 @act = 65;		end
	when 31 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1499 "lib/parser/lexer.rl"
		begin
 @act = 64;		end
	when 42 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1549 "lib/parser/lexer.rl"
		begin
 @act = 72;		end
	when 68 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1146 "lib/parser/lexer.rl"
		begin
 emit_comment(@sharp_s, p == pe ? p - 2 : p) 		end
# line 1968 "lib/parser/lexer.rl"
		begin
 @act = 125;		end
	when 33 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1461 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1462 "lib/parser/lexer.rl"
		begin
 @act = 59;		end
	when 332 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1801 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1847 "lib/parser/lexer.rl"
		begin
 @act = 106;		end
	when 331 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 1801 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1231 "lib/parser/lexer.rl"
		begin
 @act = 107;		end
	when 414 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2023 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2026 "lib/parser/lexer.rl"
		begin
 @act = 132;		end
	when 105 then
# line 701 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 710 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 714 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 131 then
# line 701 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 710 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 714 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 316 then
# line 701 "lib/parser/lexer.rl"
		begin

    char = @source[p - 1].chr
    @escape = ESCAPES.fetch(char, char)
  		end
# line 710 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 714 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 103 then
# line 726 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 710 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 714 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 129 then
# line 726 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 710 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 714 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 874 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
    current_literal = literal
    # Get the first character after the backslash.
    escaped_char = @source[@escape_s].chr

    if current_literal.munge_escape? escaped_char
      # If this particular literal uses this character as an opening
      # or closing delimiter, it is an escape sequence for that
      # particular character. Write it without the backslash.

      if current_literal.regexp? && REGEXP_META_CHARACTERS.match(escaped_char)
        # Regular expressions should include escaped delimiters in their
        # escaped form, except when the escaped character is
        # a closing delimiter but not a regexp metacharacter.
        #
        # The backslash itself cannot be used as a closing delimiter
        # at the same time as an escape symbol, but it is always munged,
        # so this branch also executes for the non-closing-delimiter case
        # for the backslash.
        current_literal.extend_string(tok, @ts, @te)
      else
        current_literal.extend_string(escaped_char, @ts, @te)
      end
    else
      # It does not. So this is an actual escape sequence, yay!
      if current_literal.regexp?
        # Regular expressions should include escape sequences in their
        # escaped form. On the other hand, escaped newlines are removed.
        current_literal.extend_string(tok.gsub(ESCAPED_NEXT_LINE, BLANK_STRING), @ts, @te)
      else
        current_literal.extend_string(@escape || tok, @ts, @te)
      end
    end
   end
		end
	when 314 then
# line 726 "lib/parser/lexer.rl"
		begin
 @escape = @source[p - 1].chr 		end
# line 710 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord & 0x9f)
  		end
# line 714 "lib/parser/lexer.rl"
		begin

    @escape = encode_escape(@escape[0].ord | 0x80)
  		end
# line 1734 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        value = @escape || tok(@ts + 1)

        if version?(18)
          emit(:tINTEGER, value[0].ord)
        else
          emit(:tCHARACTER, value)
        end

         @cs = 755; 	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 409 then
# line 2019 "lib/parser/lexer.rl"
		begin
 @num_base = 16; @num_digits_s = p 		end
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 654 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2026 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? UNDERSCORE_STRING
          diagnostic :error, :trailing_in_number, { :character => UNDERSCORE_STRING },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 403 then
# line 2020 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = p 		end
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 654 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2026 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? UNDERSCORE_STRING
          diagnostic :error, :trailing_in_number, { :character => UNDERSCORE_STRING },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 406 then
# line 2021 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = p 		end
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 654 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2026 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? UNDERSCORE_STRING
          diagnostic :error, :trailing_in_number, { :character => UNDERSCORE_STRING },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 400 then
# line 2022 "lib/parser/lexer.rl"
		begin
 @num_base = 2;  @num_digits_s = p 		end
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 654 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2026 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? UNDERSCORE_STRING
          diagnostic :error, :trailing_in_number, { :character => UNDERSCORE_STRING },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 412 then
# line 2023 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 654 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2026 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? UNDERSCORE_STRING
          diagnostic :error, :trailing_in_number, { :character => UNDERSCORE_STRING },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 382 then
# line 2024 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 654 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2026 "lib/parser/lexer.rl"
		begin
 @te = p
p = p - 1; begin 
        digits = tok(@num_digits_s, @num_suffix_s)

        if digits.end_with? UNDERSCORE_STRING
          diagnostic :error, :trailing_in_number, { :character => UNDERSCORE_STRING },
                     range(@te - 1, @te)
        elsif digits.empty? && @num_base == 8 && version?(18)
          # 1.8 did not raise an error on 0o.
          digits = "0"
        elsif digits.empty?
          diagnostic :error, :empty_numeric
        elsif @num_base == 8 && (invalid_idx = digits.index(/[89]/))
          invalid_s = @num_digits_s + invalid_idx
          diagnostic :error, :invalid_octal, nil,
                     range(invalid_s, invalid_s + 1)
        end

        if version?(18, 19, 20)
          emit(:tINTEGER, digits.to_i(@num_base))
          p = @num_suffix_s - 1
        else
          @num_xfrm.call(digits.to_i(@num_base))
        end
        	begin
		p += 1
		_goto_level = _out
		next
	end

       end
		end
	when 27 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 839 "lib/parser/lexer.rl"
		begin

    # After every heredoc was parsed, @herebody_s contains the
    # position of next token after all heredocs.
    if @herebody_s
      p = @herebody_s
      @herebody_s = nil
    end
  		end
# line 1461 "lib/parser/lexer.rl"
		begin
 tm = p 		end
# line 1462 "lib/parser/lexer.rl"
		begin
 @act = 59;		end
	when 419 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 654 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2058 "lib/parser/lexer.rl"
		begin
 @act = 134;		end
	when 415 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2023 "lib/parser/lexer.rl"
		begin
 @num_base = 10; @num_digits_s = @ts 		end
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 654 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2058 "lib/parser/lexer.rl"
		begin
 @act = 134;		end
	when 385 then
# line 1 "NONE"
		begin
 @te = p+1
		end
# line 2024 "lib/parser/lexer.rl"
		begin
 @num_base = 8;  @num_digits_s = @ts 		end
# line 2025 "lib/parser/lexer.rl"
		begin
 @num_suffix_s = p 		end
# line 654 "lib/parser/lexer.rl"
		begin
 @num_xfrm = lambda { |chars| emit(:tINTEGER,   chars) } 		end
# line 2058 "lib/parser/lexer.rl"
		begin
 @act = 134;		end
# line 20725 "lib/parser/lexer.rb"
	end
	end
	end
	if _goto_level <= _again
	case _lex_to_state_actions[ @cs] 
	when 75 then
# line 1 "NONE"
		begin
 @ts = nil;		end
# line 20735 "lib/parser/lexer.rb"
	end

	if  @cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	if _lex_eof_trans[ @cs] > 0
		_trans = _lex_eof_trans[ @cs] - 1;
		_goto_level = _eof_trans
		next;
	end
	end

	end
	if _goto_level <= _out
		break
	end
end
	end

# line 311 "lib/parser/lexer.rl"
    # %

    @p = p

    if @token_queue.any?
      @token_queue.shift
    elsif @cs == klass.lex_error
      [ false, [ '$error', range(p - 1, p) ] ]
    else
      eof = @source_pts.size + 1
      [ false, [ '$eof',   range(eof, eof) ] ]
    end
  end

  protected

  def eof_codepoint?(point)
    [0x04, 0x1a, 0x00].include? point
  end

  def version?(*versions)
    versions.include?(@version)
  end

  def stack_pop
    @top -= 1
    @stack[@top]
  end

  if "".respond_to?(:encode)
    def encode_escape(ord)
      ord.chr.force_encoding(@encoding)
    end

    def tok(s = @ts, e = @te)
      source = @source[s...e]
      return source unless @need_encode
      source.encode(@encoding)
    end
  else
    def encode_escape(ord)
      ord.chr
    end

    def tok(s = @ts, e = @te)
      @source[s...e]
    end
  end

  def range(s = @ts, e = @te)
    Parser::Source::Range.new(@source_buffer, s, e)
  end

  def emit(type, value = tok, s = @ts, e = @te)
    token = [ type, [ value, range(s, e) ] ]

    @token_queue.push(token)

    @tokens.push(token) if @tokens

    token
  end

  def emit_table(table, s = @ts, e = @te)
    value = tok(s, e)

    emit(table[value], value, s, e)
  end

  def emit_do(do_block=false)
    if @cond.active?
      emit(:kDO_COND)
    elsif @cmdarg.active? || do_block
      emit(:kDO_BLOCK)
    else
      emit(:kDO)
    end
  end

  def arg_or_cmdarg
    if @command_state
      self.class.lex_en_expr_cmdarg
    else
      self.class.lex_en_expr_arg
    end
  end

  def emit_comment(s = @ts, e = @te)
    if @comments
      @comments.push(Parser::Source::Comment.new(range(s, e)))
    end

    if @tokens
      @tokens.push([ :tCOMMENT, [ tok(s, e), range(s, e) ] ])
    end

    nil
  end

  def diagnostic(type, reason, arguments=nil, location=range, highlights=[])
    @diagnostics.process(
        Parser::Diagnostic.new(type, reason, arguments, location, highlights))
  end

  #
  # === LITERAL STACK ===
  #

  def push_literal(*args)
    new_literal = Literal.new(self, *args)
    @literal_stack.push(new_literal)

    if new_literal.words?
      if new_literal.interpolate?
        self.class.lex_en_interp_words
      else
        self.class.lex_en_plain_words
      end
    elsif new_literal.backslash_delimited?
      if new_literal.interpolate?
        self.class.lex_en_interp_backslash_delimited
      else
        self.class.lex_en_plain_backslash_delimited
      end
    else
      if new_literal.interpolate?
        self.class.lex_en_interp_string
      else
        self.class.lex_en_plain_string
      end
    end
  end

  def literal
    @literal_stack.last
  end

  def pop_literal
    old_literal = @literal_stack.pop

    @dedent_level = old_literal.dedent_level

    if old_literal.type == :tREGEXP_BEG
      # Fetch modifiers.
      self.class.lex_en_regexp_modifiers
    else
      self.class.lex_en_expr_end
    end
  end

  # Mapping of strings to parser tokens.

  PUNCTUATION = {
    '='   => :tEQL,     '&'   => :tAMPER2,  '|'   => :tPIPE,
    '!'   => :tBANG,    '^'   => :tCARET,   '+'   => :tPLUS,
    '-'   => :tMINUS,   '*'   => :tSTAR2,   '/'   => :tDIVIDE,
    '%'   => :tPERCENT, '~'   => :tTILDE,   ','   => :tCOMMA,
    ';'   => :tSEMI,    '.'   => :tDOT,     '..'  => :tDOT2,
    '...' => :tDOT3,    '['   => :tLBRACK2, ']'   => :tRBRACK,
    '('   => :tLPAREN2, ')'   => :tRPAREN,  '?'   => :tEH,
    ':'   => :tCOLON,   '&&'  => :tANDOP,   '||'  => :tOROP,
    '-@'  => :tUMINUS,  '+@'  => :tUPLUS,   '~@'  => :tTILDE,
    '**'  => :tPOW,     '->'  => :tLAMBDA,  '=~'  => :tMATCH,
    '!~'  => :tNMATCH,  '=='  => :tEQ,      '!='  => :tNEQ,
    '>'   => :tGT,      '>>'  => :tRSHFT,   '>='  => :tGEQ,
    '<'   => :tLT,      '<<'  => :tLSHFT,   '<='  => :tLEQ,
    '=>'  => :tASSOC,   '::'  => :tCOLON2,  '===' => :tEQQ,
    '<=>' => :tCMP,     '[]'  => :tAREF,    '[]=' => :tASET,
    '{'   => :tLCURLY,  '}'   => :tRCURLY,  '`'   => :tBACK_REF2,
    '!@'  => :tBANG,    '&.'  => :tANDDOT,
  }

  PUNCTUATION_BEGIN = {
    '&'   => :tAMPER,   '*'   => :tSTAR,    '**'  => :tDSTAR,
    '+'   => :tUPLUS,   '-'   => :tUMINUS,  '::'  => :tCOLON3,
    '('   => :tLPAREN,  '{'   => :tLBRACE,  '['   => :tLBRACK,
  }

  KEYWORDS = {
    'if'     => :kIF_MOD,      'unless'   => :kUNLESS_MOD,
    'while'  => :kWHILE_MOD,   'until'    => :kUNTIL_MOD,
    'rescue' => :kRESCUE_MOD,  'defined?' => :kDEFINED,
    'BEGIN'  => :klBEGIN,      'END'      => :klEND,
  }

  KEYWORDS_BEGIN = {
    'if'     => :kIF,          'unless'   => :kUNLESS,
    'while'  => :kWHILE,       'until'    => :kUNTIL,
    'rescue' => :kRESCUE,      'defined?' => :kDEFINED,
  }

  %w(class module def undef begin end then elsif else ensure case when
     for break next redo retry in do return yield super self nil true
     false and or not alias __FILE__ __LINE__ __ENCODING__).each do |keyword|
    KEYWORDS_BEGIN[keyword] = KEYWORDS[keyword] = :"k#{keyword.upcase}"
  end

  
# line 2262 "lib/parser/lexer.rl"

  # %
end
